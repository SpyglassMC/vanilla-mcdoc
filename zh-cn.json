{
	"::java::assets::atlas::Atlas.sources": "精灵图源，定义了要从该图集添加或移除的精灵图纹理。",
	"::java::assets::atlas::Directory.prefix": "精灵图名称前缀，通常以`/`结尾。",
	"::java::assets::atlas::Directory.source": "要包含的纹理位置目录，相对于`textures`文件夹，不包括尾随的`/`。",
	"::java::assets::atlas::Filter.pattern": "用于删除图集中已有的精灵图标识符的模式。精灵图源的顺序很重要。",
	"::java::assets::atlas::PalettedPermutations.separator": "用于连接纹理和排列名称以生成精灵图名称的值。\n默认为`_`。",
	"::java::assets::atlas::Single.resource": "源中单个纹理的位置。",
	"::java::assets::atlas::Single.sprite": "可以引用的精灵图标识符。\n如果未指定，则匹配 `resource`。",
	"::java::assets::atlas::Unstitch.divisor_x": "如果设置为资源宽度，区域将使用像素坐标。",
	"::java::assets::atlas::Unstitch.divisor_y": "如果设置为资源高度，区域将使用像素坐标。",
	"::java::assets::block_state_definition::BlockStateDefinitionMultipartEntry.when": "一个条件或着至少一个条件可用的数组。",
	"::java::assets::block_state_definition::ModelVariantBase.uvlock": "如果设置为`true`，纹理不会随方块旋转。",
	"::java::assets::credits::Credits.section": "公司段。",
	"::java::assets::credits::CreditsCompanySegment.section": "公司段。",
	"::java::assets::credits::CreditsJobTitle.names": "拥有该头衔的员工。",
	"::java::assets::equipment::Dyeable.color_when_undyed": "若指定，则将使用`dyed_color`组件内的颜色来对该纹理层染色。\n如果物品不可染色或未染色，则它将被染为此处指定的颜色。\n如果没有指定此字段，且物品不可染色或未染色，则该纹理层将被隐藏。",
	"::java::assets::equipment::Equipment.layers": "每个模型图层类型的图层列表。",
	"::java::assets::equipment::Layer.dyeable": "指定这个图层在染色时的表现（在`#dyeable`物品标签中，且具有`dyed_color`组件）。",
	"::java::assets::equipment::Layer.texture": "这个图层的纹理ID，位于`entity/equipment/<layer>/`内。",
	"::java::assets::equipment::WingsLayer.use_player_texture": "这个鞘翅图层纹理是否应由玩家的披风纹理覆盖。\n默认为`false`。",
	"::java::assets::font::UnihexOverrideRange.from": "起始码位，设置范围包含此码位。",
	"::java::assets::font::UnihexOverrideRange.left": "字形的左边缘所在的位置，以像素为单位。在此位置左方的部分不被渲染。",
	"::java::assets::font::UnihexOverrideRange.right": "字形的右边缘所在的位置，以像素为单位。在此位置右方的部分不被渲染。",
	"::java::assets::font::UnihexOverrideRange.to": "（码位大于字符串from）终止码位，设置范围包含此码位。",
	"::java::assets::font::UnihexProvider.hex_file": "字体使用字体文件的位置，必须为包含一个或多个*.hex文件的ZIP文件（ZIP文件中扩展名不是*.hex的文件将被忽略）。",
	"::java::assets::font::UnihexProvider.size_overrides": "要覆盖大小的范围列表。覆盖一些码位对应字形使用的宽度，阻止它们使用自动计算的宽度。",
	"::java::assets::item_definition::Chest.openness": "默认为`0`。",
	"::java::assets::item_definition::Compass.wobble": "数据是否在稳定前震荡一段时间。默认为true。",
	"::java::assets::item_definition::CompassTarget.Lodestone": "指向存储在`lodestone_tracker`组件中的位置。",
	"::java::assets::item_definition::CompassTarget.None": "总是指向不存在的位置（表现为失控地旋转并指向随机方向）。",
	"::java::assets::item_definition::CompassTarget.Recovery": "指向玩家最后死亡的位置。",
	"::java::assets::item_definition::CompassTarget.Spawn": "指向世界出生点。",
	"::java::assets::item_definition::ComponentFlags.predicate": "要检查的组件谓词。",
	"::java::assets::item_definition::ComponentFlags.value": "谓词指定的值。",
	"::java::assets::item_definition::ComponentStrings.component": "要检查的值的组件类型。\n如果所选值来自客户端无权访问的注册表，\n则该条目将被静默忽略。",
	"::java::assets::item_definition::ConstantTint.value": "用于染色的顏色。",
	"::java::assets::item_definition::Count.normalize": "为false时返回堆叠数（钳制于0..max_stack_size间）。\n为true时返回堆叠数与最大堆叠数（max_stack_size组件的值）的比值（钳制于0..1间）。\n默认为true。",
	"::java::assets::item_definition::CustomModelDataFlags.index": "`custom_model_data`组件中`flags`列表的索引值。默认为0。",
	"::java::assets::item_definition::CustomModelDataFloats.index": "`custom_model_data`组件中`floats`列表的索引值。默认为0。",
	"::java::assets::item_definition::CustomModelDataStrings.index": "`custom_model_data`组件中`strings`列表的索引值。默认为0。",
	"::java::assets::item_definition::CustomModelDataTint.default": "当`custom_model_data`组件不存在，或指定索引的颜色不存在时，要使用的默认颜色。",
	"::java::assets::item_definition::CustomModelDataTint.index": "`custom_model_data`组件中`colors`列表的索引值。默认为0。",
	"::java::assets::item_definition::Damage.normalize": "为false时返回损耗值（钳制于0..max_damage间）。\n为true时返回损耗值（damage组件的值）与耐久度上限（max_damage组件的值）的比值（钳制于0..1间）。\n默认为true。",
	"::java::assets::item_definition::DyeTint.default": "当`dyed_color`组件不存在时使用的默认颜色。",
	"::java::assets::item_definition::FireworkTint.default": "当`firework_explosion`组件不存在时使用的默认颜色。",
	"::java::assets::item_definition::HasComponent.ignore_default": "组件使用默认值时，是否视为“组件不存在”。默认为false。",
	"::java::assets::item_definition::Head.animation": "头颅动画进度，控制龙首和猪灵的头渲染时动态部分的动画进度。默认为0。",
	"::java::assets::item_definition::Head.texture": "指定一个纹理，用于替代`kind`中的纹理。",
	"::java::assets::item_definition::ItemDefinition.hand_animation_on_swap": "玩家在快捷栏切换到此物品堆叠时是否应该渲染切换过渡动画。\n默认为`true`。",
	"::java::assets::item_definition::ItemDefinition.oversized_in_gui": "是否允许物品模型大于其物品槽。\n默认为`false`，这会使GUI中的物品模型被裁剪到物品槽大小。\n`true`的行为**不**受到官方支持。",
	"::java::assets::item_definition::KeybindDown.keybind": "要测试的绑定按键ID。",
	"::java::assets::item_definition::LocalTime.locale": "（默认值为\"\"，表示根区域设置，包括使用英语的一组默认值）区域设置。\n示例：`en_US`、`es_AU@numbers=thai;calendar=japanese`。\nzh@calendar=chinese;numbers=hanidec将使用农历日期、中文数字生成，如日期格式为M月d日的此属性会在农历十月十三日返回“一〇月一三日”。",
	"::java::assets::item_definition::LocalTime.pattern": "将时间格式化为字符串的日期格式\n示例：`yyyy-MM-dd`、`HH:mm:ss`。\n如yyyy-MM-dd表示四位数年份、两位数月份、两位数日期以-分隔的格式，HH:mm:ss表示24小时制下当前的时、分、秒。",
	"::java::assets::item_definition::LocalTime.time_zone": "默认为客户端设置的时区。\n示例：`Europe/Stockholm`、`GMT+0:45`。",
	"::java::assets::item_definition::MapColorTint.default": "当`map_color`组件不存在时使用的默认颜色。",
	"::java::assets::item_definition::PotionTint.default": "当`potion_contents`组件不存在时，或者效果列表为空且未设置`custom_color`时使用的默认颜色。\n(来自wiki的说明：组件存在时，优先返回组件中的自定义颜色，在效果列表为空时返回默认颜色，否则返回效果颜色的均值；如果组件不存在，则返回默认颜色。)",
	"::java::assets::item_definition::RangeDispatch.entries": "有效项列表。会从符合（ 测试数值<=`threshold`） 的模型中，选择`threshold`最小的那个（小于或等于‘threshold’的最后一项将被选中）。\n每项的顺序不影响最终结果，Minecraft在加载此列表时，会按照`threshold`大小将所有项重新排序。\n（需要测试）",
	"::java::assets::item_definition::RangeDispatch.fallback": "没有任何一项小于或等于最终属性值时渲染的物品模型。不存在时将渲染“missing（紫黑方块）”模型。",
	"::java::assets::item_definition::RangeDispatch.scale": "与属性值相乘的因数。默认为1。",
	"::java::assets::item_definition::Select.fallback": "备选模型，即cases中的所有情况都不满足时要渲染的物品模型。不存在时将渲染“missing（紫黑方块）”模型。",
	"::java::assets::item_definition::ShulkerBox.orientation": "渲染的方向，默认为up",
	"::java::assets::item_definition::Special.base": "models中的模型的命名空间ID，提供转换、粒子纹理和GUI光。",
	"::java::assets::item_definition::Special.model": "渲染一个特殊模型（非数据驱动，硬编码于游戏内）。",
	"::java::assets::item_definition::TeamTint.default": "当上下文实体不存在、上下文实体没有队伍，或上下文实体的队伍没有颜色时，要使用的默认颜色。",
	"::java::assets::item_definition::Time.wobble": "数据是否在稳定前震荡一段时间。默认为true。",
	"::java::assets::item_definition::UseCycle.period": "返回以\"period（值≥0，默认为1.0）每次使用的周期刻数。\"为模的剩余使用刻数。\n默认为1。",
	"::java::assets::item_definition::UseDuration.remaining": "为true时，返回剩余使用刻数；\n为false时，返回已使用刻数。\n默认为false。",
	"::java::assets::lang::LangDeprecated.removed": "被移除的语言文件中的翻译键。",
	"::java::assets::lang::LangDeprecated.renamed": "被重命名的语言文件中的翻译键。",
	"::java::assets::model::ModelElementRotation.rescale": "（默认为false）是否对旋转后的模型元素重新缩放。",
	"::java::assets::model::Predicates.HoneyLevel": "蜂巢或蜂箱的储蜜量。",
	"::java::assets::model::Predicates.Level": "光源物品的亮度等级。",
	"::java::assets::model::Predicates.Throwing": "三叉戟是否正在使用中。",
	"::java::assets::model::Predicates.Tooting": "山羊角是否正在使用中。",
	"::java::assets::regional_compliancies::Notification": "区域代码。",
	"::java::assets::shader::post::InternalTarget.clear_color": "目标在创建或清除时将被填充此颜色。默认为`0`。",
	"::java::assets::shader::post::InternalTarget.persistent": "如果为`true`，则目标将在数个帧之间持续。默认为`false`。\n当屏幕尺寸改变时，目标内容将被清除。",
	"::java::assets::shader::post::UniformBlocks.[string]": "此方块中的统一值列表。其顺序必须与着色器文件中的顺序一致。",
	"::java::assets::shader::post::UniformValue.name": "游戏本身用不到该值，但在实践中最好设置一下。",
	"::java::assets::shader::program::Defines.flags": "将在文件头部以`#define <key>`形式插入的标志。",
	"::java::assets::shader::program::Defines.values": "将在文件头部以`#define <key> <value>`形式插入的数值替换。",
	"::java::assets::shader::program::ShaderProgram.blend": "未使用。",
	"::java::assets::shader::program::ShaderProgram.defines": "定义插入文件头部的GLSL提示词。",
	"::java::assets::sounds::Sound.attenuation_distance": "声音线性衰减传播模型中声音最远能传播到的距离。部分声音事件实例设置此值无效。默认值为16.",
	"::java::assets::sounds::Sound.pitch": "（值>0，默认为1）声音播放时的音高。",
	"::java::assets::sounds::Sound.preload": "（默认为false，type为event时无效，原版中用于水下环境音效）声音文件是否预加载，即在加载所有声音事件定义信息后立刻载入内存加快第一次播放速度。",
	"::java::assets::sounds::Sound.stream": "如果为`true`，将从其文件流式传输。时长过长的声音应启用此功能以避免延迟。默认为`false`。\n当为`false`时，可以同时运行多个声音实例。当为`true`时，只允许同时播放该类型的4个实例。\n即不需要完全加载声音文件，而是按照播放进度逐渐解码播放。如果设置了流式播放，那么这个声音就不会循环播放，且预载无效。",
	"::java::assets::sounds::Sound.type": "`name`命名空间ID的目标类型。默认值`sound`。（与wiki不一致 默认为file 可以为file和event）",
	"::java::assets::sounds::Sound.volume": "（值>0，默认为1）声音播放时的音量。\n音量，音高，距离等设置并非实际按照此处定义，详见wiki Java版声音事件。",
	"::java::assets::sounds::Sound.weight": "（值>0，默认为1，字符串type为event时无效）游戏在播放使用此声音事件引用的声音事件实例时，随机挑选到这个声音信息的权重。当字符串type为event时，游戏会使用引用的声音事件引用自身权重之和，而不使用此值。",
	"::java::assets::sounds::SoundEventRegistration.replace": "设置为`true`时，同名声音事件的音效列表会被这个列表覆盖。\n设置为`false`时，同名声音事件的音效列表会合并。默认值`false`。\n此声音信息是否替换低优先级的资源包中为此声音事件引用定义的信息，而非将它们的声音信息合并。",
	"::java::assets::sounds::SoundEventRegistration.sounds": "这个声音事件使用的音效。事件触发时，从列表中按照权重随机抽选一个音效播放。",
	"::java::assets::sounds::SoundEventRegistration.subtitle": "游戏使用此声音事件引用的声音事件实例时，游戏使用的字幕的本地化键名。",
	"::java::assets::sounds::SoundType.File": "一个声音文件",
	"::java::assets::sounds::SoundType.SoundEvent": "一个已定义的声音事件。",
	"::java::assets::texture_meta::ColormapTextureMeta.blur": "（默认为false）决定游戏使用何种纹理过滤。如果设置此项为false，游戏将使用最近邻插值，形成颗粒感较强的图像；如果为true，则使用（双）线性插值，形成平滑但更为模糊的图像。",
	"::java::assets::texture_meta::ColormapTextureMeta.clamp": "（默认为false）决定超出纹理坐标的部分应该如何取色。如果设置此项为false，纹理将不断重复以填充超出纹理坐标的部分；如果为true，则重复纹理的边缘使得超出纹理坐标的部分变成边缘的拉伸。",
	"::java::assets::texture_meta::ColormapTextureMeta.mipmaps": "自定义纹理的mipmap值。",
	"::java::assets::texture_meta::GuiMeta.scaling": "配置GUI纹理变换尺寸行为。默认值`stretch`。",
	"::java::assets::texture_meta::NineSlice.stretch_inner": "（默认为false）九宫格中间的纹理是否拉伸渲染而非进行平铺。",
	"::java::assets::texture_meta::TextureAnimation.frames": "一个帧列表，列表内的帧按照顺序依次播放，当播放到最后一帧完毕时从头开始继续播放。如果此列表不存在或为空，则按照帧纹理的顺序作为播放顺序。",
	"::java::assets::texture_meta::TextureAnimation.frames.index": "（不小于0）指定这一帧显示帧纹理的编号。如果帧纹理的编号小于0或大于帧纹理数量，则这一帧不会被播放。",
	"::java::assets::texture_meta::TextureAnimation.frames.time": "（大于0）这一帧的持续时间，覆盖frametime的值。如果此值不大于0，则这一帧不会被播放。",
	"::java::assets::texture_meta::TextureAnimation.frametime": "（大于0，默认为1）设置每一帧渲染持续多少游戏刻。",
	"::java::assets::texture_meta::TextureAnimation.height": "（大于0）帧纹理的高度，以像素为单位。如果指定高度的同时不指定宽度，则帧纹理的宽度为整个纹理的宽度。如果宽度和高度都不指定，则帧纹理的大小为正方形，边长为高度和宽度的较小值。如果指定的高度大于纹理的高度，则这个纹理会被作为静态纹理渲染。设置为-1则与不设置此值无差别。",
	"::java::assets::texture_meta::TextureAnimation.interpolate": "（默认为false）表示是否在帧之间进行插值渲染。如果为true，游戏将根据当前渲染帧的时间混合前后两帧的纹理进行渲染。",
	"::java::assets::texture_meta::TextureAnimation.width": "（大于0）帧纹理的宽度，以像素为单位。如果指定宽度的同时不指定高度，则帧纹理的高度为整个纹理的高度。如果宽度和高度都不指定，则帧纹理的大小为正方形，边长为高度和宽度的较小值。如果指定的宽度大于纹理的宽度，则这个纹理会被作为静态纹理渲染。设置为-1则与不设置此值无差别。",
	"::java::assets::texture_meta::TextureAnimationFrame.index": "（不小于0）指定这一帧显示帧纹理的编号。如果帧纹理的编号小于0或大于帧纹理数量，则这一帧不会被播放。",
	"::java::assets::texture_meta::TextureAnimationFrame.time": "（大于0）这一帧的持续时间，覆盖frametime的值。如果此值不大于0，则这一帧不会被播放。",
	"::java::assets::texture_meta::TextureMeta.texture": "仅适用于颜色图。",
	"::java::assets::texture_meta::TextureMeta.texture.blur": "（默认为false）决定游戏使用何种纹理过滤。如果设置此项为false，游戏将使用最近邻插值，形成颗粒感较强的图像；如果为true，则使用（双）线性插值，形成平滑但更为模糊的图像。",
	"::java::assets::texture_meta::TextureMeta.texture.clamp": "（默认为false）决定超出纹理坐标的部分应该如何取色。如果设置此项为false，纹理将不断重复以填充超出纹理坐标的部分；如果为true，则重复纹理的边缘使得超出纹理坐标的部分变成边缘的拉伸。",
	"::java::assets::texture_meta::TextureMeta.texture.mipmaps": "自定义纹理的mipmap值。",
	"::java::assets::texture_meta::TextureMeta.villager": "仅适用于村民纹理。",
	"::java::assets::texture_meta::TextureMeta.villager.hat": "确定村民的'职业'帽子图层是否应允许'类型'帽子层渲染。如果未定义此mcmeta，则使用默认值none。\n村民纹理帽子的渲染方式。必须为none、partial或full之一。\n如果村民职业服装纹理帽子渲染方式为none，或职业服装渲染方式为partial时生物群系服装纹理不为full，则渲染村民生物群系服装中的帽子纹理；其他情况下，则不渲染村民生物群系服装中的帽子纹理。",
	"::java::assets::texture_meta::VillagerTextureMeta.hat": "确定村民的'职业'帽子图层是否应允许'类型'帽子层渲染。如果未定义此mcmeta，则使用默认值none。\n村民纹理帽子的渲染方式。必须为none、partial或full之一。\n如果村民职业服装纹理帽子渲染方式为none，或职业服装渲染方式为partial时生物群系服装纹理不为full，则渲染村民生物群系服装中的帽子纹理；其他情况下，则不渲染村民生物群系服装中的帽子纹理。",
	"::java::assets::waypoint_style::WaypointStyle.far_distance": "默认为 322。",
	"::java::assets::waypoint_style::WaypointStyle.near_distance": "默认为 128。",
	"::java::data::advancement::Advancement.criteria": "如果未定义`requirements`，则需要满足此处定义的所有准则。",
	"::java::data::advancement::Advancement.display": "如果存在，进度将在进度页面中可见。",
	"::java::data::advancement::Advancement.parent": "此进度的上游进度的命名空间ID。\n若此项不存在，则此进度为根进度。\n循环引用将导致加载失败。",
	"::java::data::advancement::Advancement.requirements": "包含多个准则(criteria)子列表，每一个子列表中都允许包含此进度中定义的一个或几个准则。\n完成或废除一个准则时，则这个准则所在的子列表视为已完成（\"或\"逻辑），所有子列表都完成时（\"且\"逻辑），则此进度达成。\n如果所有准则都需要满足，则可以省略此项，这时满足所有此进度已定义的准则时进度才会达成。\n如果此项未省略，则在此项中此进度定义的所有准则至少出现一次。子列表只有 空值或不可能完成的准则时，则此子列表无法完成，因此此进度无法通过除作弊外的方法达成。",
	"::java::data::advancement::Advancement.rewards": "进度达成后玩家将获得的奖励。",
	"::java::data::advancement::Advancement.sends_telemetry_event": "默认为false。实现此进度时是否应收集遥测数据，只对\"minecraft:\"命名空间中的进度生效。",
	"::java::data::advancement::AdvancementCriterion.trigger": "该准则的触发器的命名空间ID。每种触发器都有其对应的触发情形和可检查条件。",
	"::java::data::advancement::AdvancementDisplay.announce_to_chat": "是否在完成此进度时在聊天中提示。默认为`true`。",
	"::java::data::advancement::AdvancementDisplay.background": "（仅根进度可用）进度标签的背景，这是一个文件路径。",
	"::java::data::advancement::AdvancementDisplay.frame": "图标边框的可选种类。challenge为\"曲速泡\"等进度对应的图标边框；goal为\"僵尸科医生\"等进度对应的图标边框；task为\"来硬的\"等进度对应的图标边框。默认为`task`。",
	"::java::data::advancement::AdvancementDisplay.hidden": "是否在进度屏幕隐藏此进度以及其所有子进度，直到完成此进度。\n此项对根进度自身无效，但依然能影响其子进度。\n默认为false。",
	"::java::data::advancement::AdvancementDisplay.show_toast": "是否在完成此进度后显示右上角的提示信息。默认为true。",
	"::java::data::advancement::AdvancementFrame.Challenge": "花哨的尖刺边框（例如：\"曲速泡\"）。",
	"::java::data::advancement::AdvancementFrame.Goal": "圆角矩形边框（例如：\"僵尸科医生\"）。",
	"::java::data::advancement::AdvancementFrame.Task": "普通边框（例如：\"来硬的\"）。",
	"::java::data::advancement::AdvancementRewards.experience": "要令玩家获得的经验值。",
	"::java::data::advancement::AdvancementRewards.function": "要执行的函数，此函数的执行者为达成此进度的玩家，执行位置不为玩家位置。为函数的命名空间，不能为函数标签。\n等同于一个未知位置的命名方块执行了一次/execute as (达成进度的玩家) run function <函数>。",
	"::java::data::advancement::AdvancementRewards.loot": "要给予的战利品表。",
	"::java::data::advancement::AdvancementRewards.recipes": "要解锁的配方。",
	"::java::data::advancement::predicate::BlockPredicate.components": "匹配方块实体上精确的数据组件值。",
	"::java::data::advancement::predicate::BlockPredicate.predicates": "测试方块实体上的数据组件值。",
	"::java::data::advancement::predicate::DamagePredicate.blocked": "伤害是否被成功格挡。",
	"::java::data::advancement::predicate::DamagePredicate.dealt": "伤害减免前的伤害量。",
	"::java::data::advancement::predicate::DamagePredicate.source_entity": "伤害来源（例如：骷髅射的箭或玩家点燃的TNT）。",
	"::java::data::advancement::predicate::DamagePredicate.taken": "伤害减免后的伤害量。",
	"::java::data::advancement::predicate::DamagePredicate.type": "伤害来源的类型。",
	"::java::data::advancement::predicate::DamageSourcePredicate.direct_entity": "直接造成伤害的实体（例如：箭矢或TNT）。",
	"::java::data::advancement::predicate::DamageSourcePredicate.is_direct": "当伤害来源和直接伤害来源是同一个实体时，视为直接伤害。",
	"::java::data::advancement::predicate::DamageSourcePredicate.source_entity": "伤害来源（例如：射出箭矢的骷髅或点燃TNT的玩家）。",
	"::java::data::advancement::predicate::DamageSourcePredicate.tags": "伤害类型所属的伤害类型标签。",
	"::java::data::advancement::predicate::DamageTagPredicate.expected": "相应的伤害是否应该包含在指定的标签中。",
	"::java::data::advancement::predicate::DamageTagPredicate.id": "检查伤害类型标签。",
	"::java::data::advancement::predicate::EntityPredicate.components": "匹配实体上的精确数据组件值。",
	"::java::data::advancement::predicate::EntityPredicate.movement_affected_by": "实体下方最多0.5个方块处是否存在可能影响其移动的方块。",
	"::java::data::advancement::predicate::EntityPredicate.periodic_tick": "在实体的生命周期内，每`n`个游戏刻检查一次。",
	"::java::data::advancement::predicate::EntityPredicate.predicates": "测试实体上的数据组件值。",
	"::java::data::advancement::predicate::EntityPredicate.targeted_entity": "某个生物的AI/仇恨所锁定的实体。",
	"::java::data::advancement::predicate::LocationPredicate.can_see_sky": "该位置是否具有最大可能的天空光照等级",
	"::java::data::advancement::predicate::LocationPredicate.light": "使用以下公式进行计算：`max(sky-darkening, block)`。",
	"::java::data::advancement::predicate::LocationPredicate.smokey": "该方块是否在任一种营火上方（距其小于等于5个方块处）。",
	"::java::data::advancement::predicate::PlayerPredicate.input": "检查玩家按下的移动键。",
	"::java::data::advancement::predicate::PlayerPredicate.level": "经验/XP 等级。",
	"::java::data::advancement::trigger::BeeNestDestroyed.item": "用于破坏方块的物品。",
	"::java::data::advancement::trigger::BeeNestDestroyed.num_bees_inside": "在蜂窝、蜂箱被破坏前，里面蜜蜂的数量。",
	"::java::data::advancement::trigger::ConstructBeacon.level": "更新后的信标底座的层级。",
	"::java::data::advancement::trigger::DefaultBlockUse.location": "方块的位置。",
	"::java::data::advancement::trigger::FishingRodHooked.entity": "被勾住的实体。",
	"::java::data::advancement::trigger::FishingRodHooked.item": "钓起的物品。",
	"::java::data::advancement::trigger::FishingRodHooked.rod": "所使用的钓竿。",
	"::java::data::advancement::trigger::InventoryChangedSlots.empty": "空槽位的数量。",
	"::java::data::advancement::trigger::InventoryChangedSlots.full": "满堆叠的槽位数量。",
	"::java::data::advancement::trigger::InventoryChangedSlots.occupied": "已占用的槽位数量。",
	"::java::data::advancement::trigger::ItemDurabilityChanged.delta": "耐久度的变化（负数表示耐久度下降）。",
	"::java::data::advancement::trigger::ItemDurabilityChanged.durability": "改变后的新耐久度。",
	"::java::data::advancement::trigger::ItemDurabilityChanged.item": "改变前的原耐久度。",
	"::java::data::advancement::trigger::KilledByArrow.fired_from_weapon": "用于发射箭矢的物品（武器）。",
	"::java::data::advancement::trigger::KilledByArrow.unique_entity_types": "有多少种类的实体被击杀。",
	"::java::data::advancement::trigger::KilledByCrossbow.unique_entity_types": "有多少种类的实体被击杀。",
	"::java::data::advancement::trigger::NetherTravel.distance": "玩家从主世界进入下界时的位置同从下界返回主世界时的位置之间的距离。",
	"::java::data::advancement::trigger::NetherTravel.entered": "玩家从主世界进入下界时的位置。",
	"::java::data::advancement::trigger::NetherTravel.exited": "玩家从下界返回主世界时的位置。",
	"::java::data::advancement::trigger::NetherTravel.start_position": "玩家从主世界进入下界时的位置。",
	"::java::data::advancement::trigger::PlacedBlock.item": "在物品被消耗之前，用于放置该方块的物品。",
	"::java::data::advancement::trigger::PlacedBlock.location": "方块被放置在的位置。",
	"::java::data::advancement::trigger::ShotCrossbow.item": "所使用的弩。",
	"::java::data::advancement::trigger::UsedEnderEye.distance": "玩家与要塞之间的水平距离。",
	"::java::data::advancement::trigger::VillagerTrade.item": "所购买的物品。`count`标签检查的是单次交易中的物品数量，而非交易总量。",
	"::java::data::damage_type::DamageScaling.LivingNonPlayer": "如果伤害由非玩家的生物实体所造成，则会根据游戏难度进行相应比例的调整。",
	"::java::data::damage_type::DamageScaling.Never": "总是如此。",
	"::java::data::damage_type::DamageType.death_message_type": "控制是否使用特殊的死亡消息变体。默认为`default`。\n\n详情请查看：https://zh.minecraft.wiki/w/%E6%AD%BB%E4%BA%A1%E6%B6%88%E6%81%AF",
	"::java::data::damage_type::DamageType.effects": "控制伤害施加在玩家身上的表现形式。默认为`hurt`。",
	"::java::data::damage_type::DamageType.exhaustion": "造成的饥饿的程度。",
	"::java::data::damage_type::DamageType.message_id": "该伤害类型造成的死亡事件所使用的消息ID。\n该ID会与`death_message_type`的结果组合，形成一个翻译键。",
	"::java::data::damage_type::DamageType.scaling": "是否根据游戏难度调整伤害值。",
	"::java::data::damage_type::DeathMessageType.Default": "生成`death.attack.` + message_id的翻译键。",
	"::java::data::damage_type::DeathMessageType.FallVariants": "生成`death.attack.` + message_id的翻译键。",
	"::java::data::damage_type::DeathMessageType.IntentionalGameDesign": "生成`death.attack.` + message_id + `.link`的翻译键。",
	"::java::data::dialog::AfterAction.Close": "关闭对话框。\n如果有上一个非对话框界面，则返回该界面。",
	"::java::data::dialog::AfterAction.None": "不执行任何操作。\n仅在`pause`设置为`false`时可用。",
	"::java::data::dialog::AfterAction.WaitForResponse": "将对话框替换为“等待响应”界面。\n该等待界面在单人游戏模式下会解除游戏的暂停状态。",
	"::java::data::dialog::Button.action": "若未指定，点击按钮后将将直接关闭对话框而无任何操作。",
	"::java::data::dialog::Button.width": "按钮的宽度。\n默认为 150。",
	"::java::data::dialog::ButtonListDialogBase.button_width": "列表中的按钮的宽度。\n默认为 150。",
	"::java::data::dialog::ConfirmationDialog.no": "该操作也被用于按下ESC后的菜单界面。",
	"::java::data::dialog::DialogBase.after_action": "在执行点击或提交操作后，对对话框执行的附加操作。\n默认为`close`。",
	"::java::data::dialog::DialogBase.can_close_with_escape": "是否可以使用ESC键关闭对话框。\n默认为`true`。",
	"::java::data::dialog::DialogBase.external_title": "用于指向此对话框的按钮名称。\n若未指定，则将使用`title`字段。",
	"::java::data::dialog::DialogBase.pause": "该对话框在单人游戏模式下是否会暂停游戏。\n默认为`true`。",
	"::java::data::dialog::action::DynamicCustomAction.additions": "除由输入生成的字段外，额外添加的静态字段。",
	"::java::data::dialog::action::DynamicCustomAction.id": "一个自定义操作的ID。\n对于原版服务器没有任何作用。",
	"::java::data::dialog::action::DynamicRunCommand.template": "一个将被解析为命令的宏模板。\n文本输入内的特殊字符（包括`'`和`\"`）将会得到转义，以符合SNBT字面量的格式要求。",
	"::java::data::dialog::body::ItemBody.description": "显示在物品右侧的描述文本。",
	"::java::data::dialog::body::ItemBody.height": "物品的高度。\n默认为 16。",
	"::java::data::dialog::body::ItemBody.show_decorations": "是否在物品上方渲染数量与耐久度条。\n默认为`true`。",
	"::java::data::dialog::body::ItemBody.show_tooltip": "当鼠标悬停在物品上时是否显示物品的提示信息。\n默认为`true`。",
	"::java::data::dialog::body::ItemBody.width": "物品的宽度。\n默认为 16。",
	"::java::data::dialog::body::PlainMessage.contents": "多行的文本标签。\n文本中的点击事件会像其他操作一样触发`after_action`。",
	"::java::data::dialog::body::PlainMessage.width": "消息的最大宽度。\n默认为 200。",
	"::java::data::dialog::input::BooleanInput.initial": "控件的初始值。\n默认为`false`（未选中状态）。",
	"::java::data::dialog::input::BooleanInput.label": "显示在控件右侧的标签文本。",
	"::java::data::dialog::input::BooleanInput.on_false": "当控件未选中时要发送的字符串。\n默认为`\"false\"`。",
	"::java::data::dialog::input::BooleanInput.on_true": "当控件被选中时要发送的字符串。\n默认为`\"true\"`。",
	"::java::data::dialog::input::InputControl.key": "用于构建宏命令并生成自定义操作数据负载的输入键。",
	"::java::data::dialog::input::MultiLine.height": "输入框的高度。\n如果没有设置此字段：\n- 若设置了`max_lines`，则将根据最大行数自动选择合适的高度。所选高度上限为 512。\n- 若也没有设置`max_lines`，则将自动选择适合 4 行文本的高度。",
	"::java::data::dialog::input::NumberRangeInput.end": "结束值（包含该值）。",
	"::java::data::dialog::input::NumberRangeInput.initial": "滑块的初始值（向下舍入到最接近的步长值）。\n默认为该区间的中间值。",
	"::java::data::dialog::input::NumberRangeInput.label": "滑块上显示的标签文本。",
	"::java::data::dialog::input::NumberRangeInput.label_format": "用于构建标签文本的翻译键。\n`%1$s` 将被 `label` 的值替换；`%2$s` 将被滑块的当前值替换。\n默认为`options.generic_value`。",
	"::java::data::dialog::input::NumberRangeInput.start": "起始值（包含该值）。",
	"::java::data::dialog::input::NumberRangeInput.step": "输入值的步进大小。\n若未设置，则允许范围内的任意值。",
	"::java::data::dialog::input::NumberRangeInput.width": "默认为 200。",
	"::java::data::dialog::input::SingleOptionInput.label_visible": "默认为`true`。",
	"::java::data::dialog::input::SingleOptionInput.width": "默认为 200。",
	"::java::data::dialog::input::TextInput.initial": "文本输入的初始内容。\n默认为 `\"\"`（空字符串）。",
	"::java::data::dialog::input::TextInput.label_visible": "默认为 `true`。",
	"::java::data::dialog::input::TextInput.max_length": "输入框的最大长度。\n默认为 32。",
	"::java::data::dialog::input::TextInput.width": "默认为 200。",
	"::java::data::trim::TrimMaterial.description": "要在物品提示框中显示的文本。",
	"::java::data::trim::TrimMaterial.ingredient": "在锻造台中充当锻造材料的物品。",
	"::java::data::trim::TrimMaterial.override_armor_materials": "应有不同调色板颜色的[盔甲材料](https://zh.minecraft.wiki/w/%E7%9B%94%E7%94%B2%E6%9D%90%E6%96%99)。",
	"::java::data::trim::TrimPattern.description": "要在物品提示框中显示的文本。",
	"::java::data::trim::TrimPattern.template_item": "在锻造台中代表纹饰图案的物品。",
	"::java::util::text::TextObject.atlas": "默认为`minecraft:blocks`",
	"::java::world::component::predicate::CollectionCountPredicate.count": "统计并检查符合特定谓词的属性修饰符的数量。",
	"::java::world::component::predicate::CollectionCountPredicate.test": "一个谓词。属性修饰符集合内容谓词。",
	"::java::world::component::predicate::CollectionPredicate.contains": "检查是否有物品堆叠符合特定谓词。要求每个谓词都有至少一个物品堆叠符合，一个物品堆叠不必符合所有谓词。",
	"::java::world::component::predicate::CollectionPredicate.size": "检查的数量。匹配一个精确值，或者检测数值是否在范围之间。"
}
