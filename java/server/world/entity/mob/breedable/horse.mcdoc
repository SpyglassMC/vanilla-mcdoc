use ::java::server::util::InventoryItem
use ::java::server::util::SlottedItem
use ::java::server::util::FlagMemory
use ::java::server::util::TickMemory

dispatch minecraft:entity[zombie_horse] to struct HorseBase {
	...super::Breedable,
	/// Unknown use.
	/// Remains `0` even if it was bred.
	Bred: boolean,
	/// Whether it is eating a haystack.
	EatingHaystack: boolean,
	/// Whether it has been tamed.
	Tame: boolean,
	/// Higher values make it easier to tame. Increases with feeding.
	Temper: int @ 0..100,
	/// Player who tamed it.
	#[until=1.16] #[uuid]
	OwnerUUID: string,
	/// Player who tamed it.
	#[since=1.16] #[uuid]
	Owner: int[] @ 4,
	SaddleItem: InventoryItem,
}

dispatch minecraft:entity[horse] to struct Horse {
	...HorseBase,
	/// Horse armor.
	ArmorItem: InventoryItem,
	Variant: int, // TODO
}

dispatch minecraft:entity[donkey, mule] to struct ChestedHorse {
	...HorseBase,
	/// Whether it has a chest.
	ChestedHorse: boolean,
	/// Slots from 0 to 14.
	Items: [SlottedItem<byte @ 0..14>] @ 15,
}

dispatch minecraft:entity[skeleton_horse] to struct SkeletonHorse {
	...HorseBase,
	/// Whether it was spawned by a trap.
	SkeletonTrap: boolean,
	/// Ticks it has existed.
	SkeletonTrapTime: int,
}

#[since=1.17]
dispatch minecraft:entity[camel] to struct Camel {
	...HorseBase,
	Brain: struct {
		memories: struct {
			/// Ticks until it can look around randomly again.
			"minecraft:gaze_cooldown_ticks": TickMemory,
			/// Tempted by the player.
			"minecraft:is_tempted": FlagMemory,
			/// Ticks until it can be tempted again.
			"minecraft:temptation_cooldown_ticks": TickMemory,
		},
	},
	/// Whether it is sitting.
	IsSitting: boolean,
	/// The tick when it started changing its pose.
	LastPoseTick: long
}
