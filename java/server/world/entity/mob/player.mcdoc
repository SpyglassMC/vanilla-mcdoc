use ::java::server::util::GlobalPos
use ::java::server::util::InventoryItem
use ::java::server::util::SlottedItem
use super::super::AnyEntity

type PlayerSlot = (byte @ 0..35 | byte @ 100..103 | byte @ -106)

dispatch minecraft:entity[player] to struct Player {
	...super::LivingEntity,
	/// Version of the player NBT structure
	DataVersion: int,
	Dimension: (
		#[until=1.16] Dimension |
		#[since=1.16] #[id=dimension] string |
	),
	/// Location of the player's last death.
	#[since=1.19]
	LastDeathLocation: GlobalPos,
	/// Game mode that the player is in.
	playerGameType: Gamemode,
	/// Previous game mode that the player was in.
	#[since=1.16]
	previousPlayerGameType: Gamemode,
	/// Score to display upon death.
	Score: int,
	/// Hotbar slot the player has selected.
	SelectedItemSlot: int @ 0..8,
	/// Item in the hotbar slot the player has selected.
	SelectedItem: SlottedItem<PlayerSlot>,
	/// Dimension of the player's respawn point.
	#[since=1.16]
	SpawnDimension: #[id=dimension] string,
	/// X coordinate of the player's spawn point.
	SpawnX: int,
	/// Y coordinate of the player's spawn point.
	SpawnY: int,
	/// Z coordinate of the player's spawn point.
	SpawnZ: int,
	/// Whether the player must spawn at the spawn point.
	SpawnForced: boolean,
	/// Ticks the player has been in bed.
	SleepTimer: short,
	/// Level of the hunger bar.
	foodLevel: int,
	/// Rate at which the `foodSaturationLevel` depletes.
	foodExhaustionLevel: float,
	/// Rate at which the hunger bar depletes.
	foodSaturationLevel: float,
	/// Ticks until the player heals or takes starvation damage.
	foodTickTimer: int,
	/// Number of experience levels the player has.
	XpLevel: int,
	/// Percentage the experience bar is filled up.
	XpP: float,
	/// Total experience the player has.
	XpTotal: int,
	/// Seed for enchantments.
	XpSeed: int,
	Inventory: [SlottedItem<PlayerSlot>] @ 0..41,
	/// The player's enderchest inventory.
	EnderItems: [SlottedItem<byte @ 0..26>] @ 0..27,
	/// Abilities of the player.
	abilities: Abilities,
	/// Position that the player entered the nether at.
	enteredNetherPosition: EnteredNetherPosition,
	/// Entity that the player is riding.
	RootVehicle: RootVehicle,
	/// Entity that is on the player's left shoulder.
	ShoulderEntityLeft: AnyEntity,
	/// Entity that is on the player's right shoulder.
	ShoulderEntityRight: AnyEntity,
	/// Whether the player has gone to the overworld after defeating the Ender Dragon.
	seenCredits: boolean,
	/// Recipes that the player has.
	recipeBook: RecipeBook,
	/// Tracking the warden spawning process for this player.
	#[since=1.19]
	warden_spawn_tracker: WardenSpawnTracker,
	// these are not included
	id: (),
	CustomName: (),
	CustomNameVisible: (),
}

enum(int) Dimension {
	Nether = -1,
	Overworld = 0,
	End = 1,
}

enum(int) Gamemode {
	Survival = 0,
	Creative = 1,
	Adventure = 2,
	Spectator = 3,
}

struct Abilities {
	/// Speed that the player walks at.
	walkSpeed: float @ 0.1,
	/// Speed that the player flies at.
	flySpeed: float @ 0.05,
	/// Whether the player can fly.
	mayfly: boolean,
	/// Whether the player is flying.
	flying: boolean,
	/// Whether the player can only take damage from the void.
	invulnerable: boolean,
	/// Whether the player may build.
	mayBuild: boolean,
	/// Whether the player destroys blocks instantly.
	instabuild: boolean,
}

struct EnteredNetherPosition {
	x: double,
	y: double,
	z: double,
}

struct RootVehicle {
	/// Upper bits of the ridden entity's UUID.
	#[until=1.16]
	AttachMost: long,
	/// Lower bits of the ridden entity's UUID.
	#[until=1.16]
	AttachLeast: long,
	/// Ridden entity's UUID.
	#[uuid]
	#[since=1.16]
	Attach: int[] @ 4,
	/// The ridden entity.
	Entity: AnyEntity,
}

struct RecipeBook {
	/// Recipes the player has acquired.
	recipes: #[id=recipe] string,
	/// Recipes that should pulse in the crafting book.
	toBeDisplayed: #[id=recipe] string,
	/// Whether the player has filtered crafting on in the crafting table.
	isFilteringCraftable: boolean,
	/// Whether the player has the crafting book open in the crafting table.
	isGuiOpen: boolean,
	/// Whether the player has filtered crafting on in the furnace.
	isFurnaceFilteringCraftable: boolean,
	/// Whether the player has the crafting book open in the furnace.
	isFurnaceGuiOpen: boolean,
}

struct WardenSpawnTracker {
	/// Ticks before the `warning_level` can be increased again.
	/// Decreases by 1 every tick. It is set to 200 game ticks (10 seconds) every time the warning level is increased.
	cooldown_ticks: int @ 0..,
	/// Ticks since the player was warned for warden spawning.
	/// Increases by 1 every tick. After 12000 game ticks (10 minutes) it will be set back to 0,
	/// and the `warning_level` will be decreased by 1.
	ticks_since_last_warning: int @ 0..,
	/// The warden will spawn at level 3.
	warning_level: int @ 0..3,
}
