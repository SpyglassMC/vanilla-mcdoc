use ::java::server::util::attribute::AttributeName
use ::java::server::util::attribute::Operation
use ::java::server::util::inventory::InventoryItem
use ::java::server::util::LegacyPotionEffect
use ::java::server::util::PotionComponent
use ::java::server::util::inventory::EquipmentSlot

struct LivingEntity {
	...super::EntityBase,
	Health: float,
	/// How much absorption health it has.
	AbsorptionAmount: float,
	/// Timer since it has been damaged. Counts down to zero.
	HurtTime: short,
	/// Ticks since it was last damaged, from its creation.
	HurtByTimestamp: int,
	/// Timer since it was marked as dead. Counts down to zero.
	DeathTime: short,
	/// Whether it will glide when it falls.
	FallFlying: boolean,
	/// X coordinate of where it is sleeping.
	SleepingX: int,
	/// Y coordinate of where it is sleeping.
	SleepingY: int,
	/// Z coordinate of where it is sleeping.
	SleepingZ: int,
	/// The mob's brain, empty.
	Brain: struct {
		memories: struct {
			/// The unit value.
			[%unknown]: struct {}
		}
	},
	Attributes: [Attribute],
	/// Active potion effects
	#[until="1.20.2"]
	ActiveEffects: [LegacyPotionEffect],
	#[since="1.20.2"]
	active_effects: [PotionComponent],
	/// Whether it should have an AI.
	NoAI: boolean,
	/// Team to join when it is spawned.
	Team: string,
}

/// Base NBT for all mobs.
struct MobBase {
	...LivingEntity,
	/// [main hand, offhand]
	HandItems: [InventoryItem] @ 2,
	/// [feet, legs, body, head]
	ArmorItems: [InventoryItem] @ 4,
	/// Chance to drop the items it is holding, in [main hand, offhand].
	HandDropChances: [float] @ 2,
	/// Chance to drop the items it is wearing, in [feet, legs, body, head].
	ArmorDropChances: [float] @ 4,
	DeathLootTable: #[id=loot_table] string,
	/// Seed for generating the death loot table.
	DeathLootTableSeed: long,
	/// Whether it can pick up loot.
	CanPickUpLoot: boolean,
	/// Whether it should not despawn naturally.
	PersistenceRequired: boolean,
	/// Whether it is left handed.
	LeftHanded: boolean,
	/// What the leash is attached to.
	#[until="1.20.5"]
	Leash: (UUIDLeash | BlockLeash),
	/// What the leash is attached to.
	#[since="1.20.5"]
	leash: (int[] @ 3 | struct {
		UUID: int[] @ 4
	})
}

struct NeutralMob {
	/// Ticks that it will be angry for.
	AngerTime: int,
	#[uuid]
	AngryAt: int[] @ 4,
}

/// A single attribute.
struct Attribute {
	Name: (
		#[until=1.16] (AttributeName | string) |
		#[since=1.16] #[id=attribute] string |
	),
	Base: double,
	/// Modifiers that act on it.
	Modifiers: [AttributeModifier],
}

/// A single attribute modifier
struct AttributeModifier {
	/// Has no real effect.
	Name: string,
	/// Slot that the modifier is active in.
	Slot: EquipmentSlot,
	Operation: Operation,
	/// Change in the attribute.
	Amount: double,
	/// Upper bits of the modifier's UUID.
	#[until=1.16]
	UUIDMost: long,
	/// Lower bits of the modifier's UUID.
	#[until=1.16]
	UUIDLeast: long,
	#[uuid]
	#[since=1.16]
	UUID: int[] @ 4,
}

struct Brain {
	/// The mobs memories, empty.
	memories: struct {},
}

struct Memories {
	[#[id=memory_module_type] string]: minecraft:memory_module[[%key]],
}

struct UUIDLeash {
	/// Upper bits of the other entity's UUID.
	UUIDMost: long,
	/// Lower bits of the other entity's UUID.
	UUIDLeast: long,
}

struct BlockLeash {
	/// X coordiante of leash knot.
	X: int,
	/// Y coordiante of leash knot.
	Y: int,
	/// Z coordiante of leash knot.
	Z: int,
}

dispatch minecraft:entity[
	blaze,
	cave_spider,
	elder_guardian,
	giant,
	guardian,
	silverfish,
	spider,
	squid,
	stray,
	wither_skeleton,
] to MobBase

dispatch minecraft:entity[
	polar_bear,
] to NeutralMob
