use ::java::server::util::block_state::BlockState
use ::java::server::util::effect::LegacyPotionEffect
use ::java::server::util::PotionComponent
use ::java::server::util::inventory::InventoryItem
use super::ProjectileBase

struct ArrowBase {
	...ProjectileBase,
	/// Shake it creates.
	shake: byte,
	/// How players can pick up it.
	pickup: Pickup,
	/// Whether a player shot it.
	#[until=1.16]
	player: boolean,
	/// Ticks since it last moved.
	life: short,
	/// Damage it should deal.
	damage: double,
	/// Whether it is in the ground.
	inGround: boolean,
	/// Block it is in.
	inBlockState: BlockState,
	/// Whether it should do critical damage.
	crit: boolean,
	/// Whether it was shot from a crossbow.
	ShotFromCrossbow: boolean,
	/// Number of entities it can pass through.
	PierceLevel: byte,
	/// Sound event to play when it hits something.
	SoundEvent: #[id=sound_event] string,
	/// Upper bits of the owner's UUID.
	#[until=1.16]
	OwnerUUIDMost: long,
	/// Lower bits of the owner's UUID.
	#[until=1.16]
	OwnerUUIDLeast: long,
	#[since="1.20.3"]
	item: InventoryItem,
}

enum(byte) Pickup {
	None = 0,
	Any = 1,
	Creative = 2,
}

dispatch minecraft:entity[arrow] to struct Arrow {
	...ArrowBase,
	/// Color of the arrow's potion bubble trail particles.
	/// calculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.
	#[until="1.20.5"]
	Color: #[color=composite_int] int,
	/// Effects to give to the hit entity.
	#[until="1.20.2"]
	CustomPotionEffects: [LegacyPotionEffect],
	/// Effects to give to the hit entity.
	#[since="1.20.2",until="1.20.3"]
	custom_potion_effects: [LegacyPotionEffect],
	/// Name of the default potion effect.
	#[until="1.20.3"]
	Potion: #[id=mob_effect] string,
}

dispatch minecraft:entity[spectral_arrow] to struct SpectralArrow {
	...ArrowBase,
	/// Ticks the glowing effect lasts.
	Duration: int,
}

dispatch minecraft:entity[trident] to struct Trident {
	...ArrowBase,
	#[until="1.20.3"]
	Trident: InventoryItem,
	/// Whether it has already damaged an entity.
	DealtDamage: boolean,
}
