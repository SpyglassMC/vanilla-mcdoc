use ::java::server::util::text::Text
use super::DisplayBase

dispatch minecraft:entity[text_display] to struct TextDisplay {
	...DisplayBase,
	/// Text to display. Components are resolved with the executor set to the display entity and the position set to `0 0 0`.
	text?: (
		#[until="1.21.5"] #[text_component] string |
		#[since="1.21.5"] Text |
	),
	/// Line width in pixels used to split lines (note: new line can be also added with \n characters). Defaults to 200.
	line_width?: int @ 0..,
	/// Opacity (alpha component) of rendered text. Defaults to 255. Interpolated.
	text_opacity?: int @ 0..255,
	/// Color of background. Includes alpha channel. Defaults to 0x40000000. Interpolated.
	/// Calculated as `ALPHA << 24 | RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.
	background?: #[color="composite_argb"] int,
	/// If true, overrides `background` & rendering uses default text background color (same as in chat). Defaults to false.
	default_background?: boolean,
	/// Should text be displayed with shadow. Defaults to false.
	shadow?: boolean,
	/// Should text be visible through blocks. Defaults to false.
	see_through?: boolean,
	#[until="1.21.5"]
	...struct {
		/// How text should be aligned. Defaults to `center`.
		/// Will log an error when not specified, see [MC-261036](https://bugs.mojang.com/browse/MC-261036).
		alignment: TextAlignment,
	},
	#[since="1.21.5"]
	...struct {
		/// How text should be aligned. Defaults to `center`.
		alignment?: TextAlignment,
	},
}

enum(string) TextAlignment {
	Center = "center",
	Left = "left",
	Right = "right",
}
