use super::super::block::spawner::SpawnPotential
use super::super::entity::AnyEntity
use ::java::server::util::BlockState
use ::java::server::util::SlottedItem

struct ContainerMinecart {
	/// Loot table that will populate this minecart.
	LootTable?: #[id="loot_table"] string,
	/// Seed of the loot table.
	LootTableSeed?: long,
}

dispatch minecraft:entity[minecart] to struct Minecart {
	...super::EntityBase,
	/// Whether to display a custom block.
	CustomDisplayTile?: boolean,
	/// Custom block to display.
	/// Only has effects when `CustomDisplayTile` is true.
	DisplayState?: BlockState,
	/// Vertical offset of the custom block display.
	DisplayOffset?: int,
}

dispatch minecraft:entity[chest_minecart] to struct ChestMinecart {
	...Minecart,
	...ContainerMinecart,
	/// Slots from 0 to 26.
	Items?: [SlottedItem<byte @ 0..26>] @ 0..27,
}

dispatch minecraft:entity[command_block_minecart] to struct CommandBlockMinecart {
	...Minecart,
	Command?: #[command(slash="allowed",empty="allowed",max_length=32500)] string,
	/// Success count of the last command.
	SuccessCount?: int,
	/// Output of the last command.
	LastOutput?: string,
	/// Whether to record command output.
	TrackOutput?: boolean,
}

dispatch minecraft:entity[furnace_minecart] to struct FurnaceMinecart {
	...Minecart,
	/// Acceleration in x axis.
	PushX?: double,
	/// Acceleration in z axis.
	PushZ?: double,
	/// Ticks until the fuel runs out.
	Fuel?: short,
}

dispatch minecraft:entity[hopper_minecart] to struct HopperMinecart {
	...Minecart,
	...ContainerMinecart,
	/// Slots from 0 to 4.
	Items?: [SlottedItem<byte @ 0..4>] @ 0..5,
	/// Ticks until an item can be transferred.
	TransferCooldown?: int,
	/// Whether it should pick up items.
	Enabled?: boolean,
}

dispatch minecraft:entity[spawner_minecart] to struct SpawnerMinecart {
	...Minecart,
	/// List of potential entities to place next.
	SpawnPotentials?: [SpawnPotential],
	/// Data for the next mob to place.
	/// Will be overwritten by `SpawnPotentials`.
	SpawnData?: AnyEntity,
	/// Number of entities that will be placed.
	SpawnCount: short,
	/// Range that the spawned entities will be placed in.
	SpawnRange?: short,
	/// Ticks until the next spawn.
	Delay?: short,
	/// Minimum random delay for the next spawn.
	MinSpawnDelay?: short,
	/// Maximum random delay for the next spawn.
	MaxSpawnDelay?: short,
	/// Maximum number of entities nearby.
	MaxNearbyEntities?: short,
	/// Radius in blocks that a player has to be within to spawn entities.
	RequiredPlayerRange?: short,
}

dispatch minecraft:entity[tnt_minecart] to struct TntMinecart {
	...Minecart,
	/// Ticks until it explodes.
	TNTFuse?: int,
	#[since="1.21.2"]
	explosion_power?: float @ 0..128
}
