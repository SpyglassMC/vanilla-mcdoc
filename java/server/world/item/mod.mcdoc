use ::java::server::util::attribute::AttributeName
use ::java::server::util::attribute::Operation
use ::java::server::util::inventory::EquipmentSlot
use ::java::server::util::block_state::BlockState
use ::java::server::util::PotionComponent

struct BlockPredicate {
	blocks: #[id=block] string | (#[id=block] string)[] | #[id(registry=block)] string,
	// TODO: determine how this should actually work, maybe the above should automatically resolve, idk
	nbt: minecraft:block[[%blocks]],
	state: mcdoc:block_item_states[[%blocks]],
}

type BlockComponent = (
	#[canonical] struct {
		predicates: [BlockPredicate],
		show_in_tooltip?: boolean,
	} |
	BlockPredicate |
)

dispatch minecraft:item_component[attribute_modifiers] to type AttributeModifiers = [AttributeModifier] | #[canonical] struct {
	modifiers: [AttributeModifier],
	show_in_tooltip?: boolean,
}
dispatch minecraft:item_component[can_destroy] to BlockComponent

dispatch minecraft:item_component[custom_name] to type CustomName = #[text_component] string

dispatch minecraft:item_component[custom_model_data] to int

dispatch minecraft:item_component[damage] to int @ 0..

dispatch minecraft:item_component[enchantment_glint_override] to boolean

dispatch minecraft:item_component[enchantments] to type Enchantments = (
	struct {
		[#[id=enchantment] string]: int @ 0..,
	} |
	#[canonical] struct {
		levels: struct {
			[#[id=enchantment] string]: int @ 0..,
		},
		show_in_tooltip?: boolean,
	} |
)
dispatch minecraft:item_component[fire_resistant] to struct {}

dispatch minecraft:item_component[food] to struct Food {
	/// Food points/haunches restored when eaten.
	nutrition: int @ 0..,
	// TODO: Better doc
	/// Saturation restored when eaten.
	saturation_modifier: float,
	/// Whether the item can be fed to wolves. Defaults to `false`.
	is_meat: boolean,
	/// Whether the item can be eaten when the player's food points/haunches are full. Defaults to `false`
	can_always_eat: boolean,
	/// Seconds it takes to eat the item. Defaults to `1.6`
	eat_seconds: float @ 0..
	/// Applied when eaten.
	effects: [struct {
		effect: PotionComponent,
		/// Chance for the effect to be applied.
		probability: float @ 0..1,
	}],
}
dispatch minecraft:item_component[hide_additional_tooltip] to struct {}

dispatch minecraft:item_component[hide_tooltip] to struct {}

dispatch minecraft:item_component[lore] to type Lore = [#[text_component] string]

dispatch minecraft:item_component[max_damage] to int @ 1..

dispatch minecraft:item_component[max_stack_size] to int @ 1..99

dispatch minecraft:item_component[rarity] to enum(string) Rarity { // TODO: Add doc for these
	Common = "common",
	Uncommon = "uncommon",
	Rare = "rare",
	Epic = "epic",
}
dispatch minecraft:item_component[repair_cost] to int @ 0..

dispatch minecraft:item_component[tool] to struct Tool {
	/// Used if no rules override it. Defaults to 1.0.
	default_mining_speed: float,
	/// Amount of durability to remove each time a block is broken with this tool. Must be a non-negative integer.
	damage_per_block: int,
	/// Blocks that this tool has a special behavior with.
	rules: [struct {
		blocks: #[id=block] string | (#[id=block] string)[] | #[id(registry=block)] string,
		/// Overrides the default mining speed.
		speed?: float,
		/// Overrides whether or not this tool is considered correct to mine at its most efficient speed, and to drop items if the block's loot table requires it.
		correct_for_drops?: boolean,
	}]
}
dispatch minecraft:item_component[trim] to struct Trim {
	/// Used by the `trim_type` model overrides predicate via the material `item_model_index` and armor rendering for the material's `asset_name` for the `armor_trims` atlas.
	material: #[id=trim_material] string,
	/// Used by armor rendering for the pattern's `asset_id`.
	pattern: #[id=trim_pattern] string,

	#[since="1.20.5"]
	show_in_tooltip?: boolean,
}
dispatch minecraft:item_component[unbreakable] to struct Unbreakable {
	show_in_tooltip?: boolean,
}

dispatch minecraft:item[%all_items] to (
	#[since=1.20.5] struct {
		/// Applied to an entity that has equipped/is holding the item.
		"minecraft:attribute_modifiers": AttributeModifiers,
		"minecraft:can_destroy": BlockComponent,
		"minecraft:custom_name": CustomName,
		/// Tag that describes the custom model an item will take.
		/// Used by the `custom_model_data` model overrides predicate.
		/// Has certain restrictions due to float conversion.
		"minecraft:custom_model_data": CustomModelData,
		/// Damage that an item has. Only used for tools, armor, etc.
		"minecraft:damage": int @ 0..,
		/// If set, changes enchantment glint behavior. When true, this item will display a glint, even without enchantments. When false, this item will not display a glint, even with enchantments.
		"minecraft:enchantment_glint_override": boolean,
		/// List of enchantments that are on the item.
		"minecraft:enchantments": Enchantments,
		/// If set, this item will not burn in fire or lava.
		"minecraft:fire_resistant": struct {},
		/// If set, this item is considered as a food, and can be eaten.
		"minecraft:food": Food,
		// TODO: What does this actually hide?
		"minecraft:hide_additional_tooltip": struct {}
		/// If set, it will completely hide this item's tooltip, including its name.
		"minecraft:hide_tooltip": struct {},
		/// A list of JSON text components, each element being a lore line.
		"minecraft:lore": Lore,
		/// Maximum amount of damage that this item can take. If not set, this item cannot take damage.
		"minecraft:max_damage": int @ 1..,
		"minecraft:max_stack_size": int @ 1..99,
		/// Default color of this item's name.
		"minecraft:rarity": Rarity,
		/// Number of experience levels to add to the base level cost when repairing, combining, or renaming this item with an anvil.
		"minecraft:repair_cost": int @ 0..,
		"minecraft:tool": Tool,
		/// Trim to apply to the item & armor when worn.
		"minecraft:trim": Trim,
		"minecraft:unbreakable": Unbreakable,
	} |
	#[until=1.20.5] struct {
		/// Damage that an item has. Only used for tools, armor, etc.
		Damage: int,
		/// Whether the item should be unbreakable.
		/// Only used for tools, armor, etc.
		Unbreakable: boolean,
		/// List of the block states that can be destroyed by this item when holding it in adventure mode.
		CanDestroy: [BlockState],
		/// Tag that describes the custom model an item will take.
		/// Used by the `custom_model_data` model overrides predicate.
		/// Has certain restrictions due to float conversion.
		CustomModelData: int,
		/// List of enchantments that are on the item.
		Enchantments: [Enchantment],
		/// Number of experience levels to add to the base level cost when repairing, combining, or renaming this item with an anvil.
		RepairCost: int,
		/// Applied to an entity that has equipped the item.
		AttributeModifiers: [AttributeModifier],
		/// Display settings.
		display: Display,
		/// Bitfield for which flags to hide on an item.
		#[bitfield(enum (int) {
			Enchantments = 1,
			AttributeModifiers = 2,
			Unbreakable = 3,
			CanDestroy = 4,
			CanPlaceOn = 5,
			Other = 6,
			#[since="1.16.2"]
			LeatherColor = 7,
			#[since="1.19.4"]
			Trim = 8
		})]
		HideFlags: int,
		/// Trim to apply to the item & armor when worn.
		#[since="1.19.4"]
		Trim: Trim,
	} |
)

struct AnyItem {
	/// ID of the item.
	id: #[id=item_type] string,
	...ItemBase,
	...minecraft:item[[id]],
}

/// An individual enchantment, with ID and level.
struct Enchantment {
	/// Which enchantment is being described.
	id: #[id=enchantment] string,
	/// Which level the enchantment is.
	lvl: (
		#[until=1.17] (short @ 1.. | int @ 1..) |
		#[since=1.17] int @ 0..255 |
	),
}

/// A single attribute modifier.
type AttributeModifier = (
	#[since="1.20.5"] struct {
		type: #[id=attribute] string,
		/// Slot or slot type the item must be in for the modifier to take effect.
		slot: EquipmentSlot,
		/// Used when equipping and unequipping the item to identify which modifier to add or remove from the entity.
		uuid: int[] @ 4,
		/// Identifying name of the modifier, has no real effect.
		name: string,
		/// Change in the attribute.
		amount: double,
		operation: (enum(string) {
			AddValue = "add_value",
			AddMultipliedBase = "add_value",
			AddMultipliedTotal = "add_multiplied_total"
		}),
	} |
	#[until="1.20.5"] struct {
		AttributeName: (
			#[until=1.16] (AttributeName | string) |
			#[since=1.16] #[id=attribute] string |
		),
		/// Identifying name of the modifier, has no real effect.
		Name: string,
		/// Slot that the modifier is active in.
		Slot: EquipmentSlot,
		Operation: Operation,
		/// Change in the attribute.
		Amount: double,
		/// Upper bits of the modifier's UUID.
		#[until=1.16]
		UUIDMost: long,
		/// Lower bits of the modifier's UUID.
		#[until=1.16]
		UUIDLeast: long,
		#[uuid]
		#[since=1.16]
		UUID: int[] @ 4,
	} |
)

/// Display settings of an item.
struct Display {
	/// A JSON text component.
	Name: #[text_component] string,
	/// A list of JSON text components, each element being a lore line.
	Lore: Lore,
}
