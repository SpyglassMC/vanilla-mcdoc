use ::java::data::advancement::predicate::BlockPredicate
use ::java::data::trim::TrimMaterial
use ::java::data::trim::TrimPattern
use ::java::data::util::SoundEventRef
use ::java::server::util::attribute::AttributeName
use ::java::server::util::attribute::LegacyOperation
use ::java::server::util::attribute::AttributeOperation
use ::java::server::util::attribute::AttributeSlot
use ::java::server::util::block_state::BlockState
use ::java::server::util::effect::MobEffectInstance
use ::java::server::util::inventory::EquipmentSlot

struct AttributeModifiers {
	modifiers: [AttributeModifier],
	show_in_tooltip?: boolean,
}

/// Applied to an entity that has equipped/is holding the item.
dispatch minecraft:data_component[attribute_modifiers] to (
	#[canonical] AttributeModifiers |
	[AttributeModifier] |
)

struct AdventureModePredicate {
	predicates: [BlockPredicate] @ 1..,
	show_in_tooltip?: boolean,
}

dispatch minecraft:data_component[can_break] to (
	#[canonical] AdventureModePredicate |
	BlockPredicate |
)

#[since="1.21.2"]
dispatch minecraft:data_component[consumable] to struct Consumable {
	/// Time taken for a player to consume the item. Defaults to 1.6.
	consume_seconds?: float @ 0..,
	/// View model/arms animation used during consumption of the item. Defaults to `eat`.
	animation?: ItemUseAnimation,
	/// Sound played during and on completion of item consumption.
	sound?: SoundEventRef,
	/// Whether the `item` particle is emitted while consuming the item. Defaults to `true`.
	has_consume_particles?: boolean,
	/// Side effects which take place after consuming the item.
	on_consume_effects?: [ConsumeEffect],
}

enum(string) ItemUseAnimation {
	None = "none",
	Eat = "eat",
	Drink = "drink",
	Block = "block",
	Bow = "bow",
	/// Used for Tridents.
	Spear = "spear",
	Crossbow = "crossbow",
	Spyglass = "spyglass",
	/// Used for Goat Horns.
	TootHorn = "toot_horn",
	Brush = "brush",
}

struct ConsumeEffect {
	type: #[id="consume_effect_type"] string,
	...minecraft:consume_effect[[type]],
}

/// Adding status/mob effects to the player.
dispatch minecraft:consume_effect[apply_effects] to struct ApplyEffectsConsumeEffect {
	effects: [MobEffectInstance],
	/// Chance the effects will be applied once consumed.
	probability?: float @ 0..1,
}

/// Removing specific status/mob effect types from the player.
dispatch minecraft:consume_effect[remove_effects] to struct RemoveEffectsConsumeEffect {
	effects: (#[id(registry="mob_effect",tags="allowed")] string | [#[id="mob_effect"] string]),
}

/// Removing all status/mob effects from the player.
dispatch minecraft:consume_effect[clear_all_effects] to struct {}

dispatch minecraft:consume_effect[teleport_randomly] to struct TeleportRandomlyConsumeEffect {
	/// Defaults to 16.
	diameter?: float @ 1..,
}

dispatch minecraft:consume_effect[play_sound] to struct PlaySoundConsumeEffect {
	sound: SoundEventRef,
}

dispatch minecraft:data_component[custom_name] to (#[text_component] string)

dispatch mcdoc:custom_data[%unknown] to any

// TODO: when we add `recommended` to `dispatcher_key`, we should use it here; `mcdoc:custom_item_data[[%parent.id]]`.
type CustomDataMap = struct {
	[#[dispatcher_key="mcdoc:custom_data"] string]?: mcdoc:custom_data[[%key]],
}

type CustomData = (
	CustomDataMap |
	#[nbt=CustomDataMap] string |
)

dispatch minecraft:data_component[custom_data] to CustomData

/// Tag that describes the custom model an item will take.
/// Used by the `custom_model_data` model overrides predicate.
/// Has certain restrictions due to float conversion.
dispatch minecraft:data_component[custom_model_data] to int

/// Damage that an item has. Only used for tools, armor, etc.
dispatch minecraft:data_component[damage] to int @ 0..

#[since="1.21.2"]
dispatch minecraft:data_component[damage_resistant] to struct DamageResistant {
	/// The damage types which the item is resistant to when in entity form.
	/// Additionally, this also affects whether the equipped item will be damaged when the wearer is hurt by a specified damage type.
	types: #[id(registry="damage_type",tags="required")] string,
}

#[since="1.21.2"]
dispatch minecraft:data_component[death_protection] to struct DeathProtection {
	/// Effects applied when the item protects the holder.
	death_effects?: [ConsumeEffect]
}

/// Makes an item enchantable in an enchanting table
#[since="1.21.2"]
dispatch minecraft:data_component[enchantable] to struct Enchantable {
	value: int @ 1..
}

/// If set, changes enchantment glint behavior. When true, this item will display a glint, even without enchantments. When false, this item will not display a glint, even with enchantments.
dispatch minecraft:data_component[enchantment_glint_override] to boolean

struct EnchantmentLevels {
	[#[id="enchantment"] string]: int @ 0..255,
}

struct Enchantments {
	levels: EnchantmentLevels,
	show_in_tooltip?: boolean,
}

/// List of enchantments that are on the item.
///
/// An enchantment level of zero doesn't cause the enchantment section to be displayed in the tooltip, but the glint will still be shown, and the following rules apply:
/// - Boolean enchantments are treated as level 1 (active).
/// - Leveled enchantments are ignored.
dispatch minecraft:data_component[enchantments,stored_enchantments] to (
	#[canonical] Enchantments |
	EnchantmentLevels |
)

#[since="1.21.2"]
dispatch minecraft:data_component[equippable] to struct Equippable {
	slot: EquipmentSlot,
	/// Sound event to play when the item is equipped.
	/// If not specified, the default armor equip sound will be played.
	equip_sound?: SoundEventRef,
	/// The equipment model to use when equipped.
	/// Falls back to rendering as the item itself when in the head slot (or no rendering if not applicable).
	model?: #[id="model"] string,
	/// The overlay texture that should render in first person when equipped.
	camera_overlay?: #[id="texture"] string,
	/// Limits which entities can equip this item
	allowed_entities?: (#[id(registry="entity_type",tags="allowed")] string | [#[id="entity_type"] string]),
	/// Whether the item can be equipped by using a dispenser. Defaults to `true`.
	dispensable?: boolean,
	/// Whether the item can be equipped by right-clicking. Defaults to `true`.
	swappable?: boolean,
	/// Whether the item will be damaged when the wearer is damaged. Defaults to `true`.
	damage_on_hurt?: boolean,
}

/// If set, this item will not burn in fire or lava.
#[until="1.21.2"]
dispatch minecraft:data_component[fire_resistant] to struct {}

struct FoodEffect {
	effect: MobEffectInstance,
	/// Chance for the effect to be applied. Defaults to 1.
	probability?: float @ 0..1,
}

struct Food {
	/// Food points/haunches restored when eaten (capped to 20.0).
	nutrition: int @ 0..,
	/// Exact value added to the player's saturation level, capped at whatever the [new] food points value is.
	saturation: float,
	/// Whether the item can be eaten when the player's food points/haunches are full. Defaults to `false`
	can_always_eat?: boolean,
	/// Seconds it takes to eat the item. Defaults to `1.6`
	#[until="1.21.2"]
	eat_seconds?: float @ 0..,
	/// Applied when eaten.
	#[until="1.21.2"]
	effects?: [FoodEffect],
	/// Works similarly to a milk bucket.
	#[since="1.21"]
	#[until="1.21.2"]
	using_converts_to?: SingleItem,
}

/// If set, this item is considered as a food, and can be eaten.
dispatch minecraft:data_component[food] to Food

dispatch minecraft:data_component[glider] to struct {}

/// If set, several specific tooltip entries without an applicable `show_in_tooltip` option available are hidden.
///
/// Included entries:
/// - Banner pattern layers
/// - Banner Pattern description
/// - Decorated Pot sherds
/// - Shulker Box items
/// - Spawner entity type and interaction description
/// - Bundle occupancy and items
/// - Charged Crossbow projectiles
/// - Painting variant
/// - Disc Fragment description
/// - Tropical Fish Bucket entity variant
/// - Filled Map lock and scale level
/// - Firework Rocket duration
/// - Firework explosions
/// - Goat Horn instrument
/// - Potion effect, amplifier & duration
/// - Music Disc description
/// - Smithing Template description
/// - Written Book author & generation
dispatch minecraft:data_component[hide_additional_tooltip] to struct {}

/// If set, it will completely hide this item's tooltip, including its name.
dispatch minecraft:data_component[hide_tooltip] to struct {}

dispatch minecraft:data_component[item_model] to #[id] string

/// Replaces default item name with contained chat component.
///
/// Differences from `custom_name`:
/// - Can't be changed or removed in anvil.
/// - Not styled with italics when displayed to player.
/// - Does not show labels where applicable (for example: banner markers, names in item frames).
dispatch minecraft:data_component[item_name] to (#[text_component] string)

/// If set, this item can be played in a jukebox like a music disc.
#[since="1.21"]
dispatch minecraft:data_component[jukebox_playable] to struct JukeboxPlayable {
	song: #[id="jukebox_song"] string,
	show_in_tooltip?: boolean,
}

/// A list of JSON text components, each element being a lore line.
dispatch minecraft:data_component[lore] to [#[text_component] string]

/// Maximum amount of damage that this item can take (ie. **Durability**). If not set, this item cannot take damage. Cannot be combined with the `max_stack_size` component.
dispatch minecraft:data_component[max_damage] to int @ 1..

dispatch minecraft:data_component[max_stack_size] to int @ 1..99

enum(string) Rarity {
	/// White name, or aqua when enchanted.
	Common = "common",
	/// Yellow name, or aqua when enchanted.
	Uncommon = "uncommon",
	/// Aqua name, or light purple when enchanted.
	Rare = "rare",
	/// Light purple name.
	Epic = "epic",
}

/// Default color of this item's name.
dispatch minecraft:data_component[rarity] to Rarity

/// Number of experience levels to add to the base level cost when repairing, combining, or renaming this item with an anvil.
dispatch minecraft:data_component[repair_cost] to int @ 0..

/// Makes an item enchantable in an enchanting table
#[since="1.21.2"]
dispatch minecraft:data_component[repairable] to struct Repairable{
	items: (#[id(registry="item",tags="allowed")] string | [#[id="item"] string]),
}

struct ToolRule {
	blocks: (#[id="block"] string | [#[id="block"] string] | #[id(registry="block")] string),
	/// Overrides the default mining speed.
	speed?: float,
	/// Overrides whether or not this tool is considered correct to mine at its most efficient speed, and to drop items if the block's loot table requires it.
	correct_for_drops?: boolean,
}

dispatch minecraft:data_component[tool] to struct Tool {
	/// Blocks that this tool has a special behavior with.
	rules: [ToolRule],
	/// Used if no rules override it. Defaults to 1.0.
	default_mining_speed?: float,
	/// Amount of durability to remove each time a block is broken with this tool. Must be a non-negative integer.
	damage_per_block?: int,
}

dispatch minecraft:data_component[tooltip_style] to #[id] string

/// Trim to apply to the item & armor when worn.
dispatch minecraft:data_component[trim] to struct Trim {
	/// The trim material of this item..
	material: (
		#[id="trim_material"] string |
		TrimMaterial |
	),
	/// The trim pattern of this item.
	pattern: (
		#[id="trim_pattern"] string |
		TrimPattern |
	),
	show_in_tooltip?: boolean,
}

dispatch minecraft:data_component[unbreakable] to struct Unbreakable {
	show_in_tooltip?: boolean,
}

dispatch minecraft:data_component[use_cooldown] to struct UseCooldown {
	/// Time the cooldown will last.
	seconds: float @ 0<..,
	/// If present, this item will be part of a cooldown group and no longer share cooldowns with its base item type.
	/// Instead, cooldowns applied to this item will only be shared with any other items that are part of the same cooldown group.
	cooldown_group?: #[id(registry="cooldown_group", definition=true)] string,
}

dispatch minecraft:data_component[use_remainder] to ItemStack

enum(string) ItemBaseComponents {
	AttributeModifiers = "attribute_modifiers",
	CanBreak = "can_break",
	CustomData = "custom_data",
	CustomModelData = "custom_model_data",
	Damage = "damage",
	#[since="1.21.2"]
	Enchantable = "enchantable",
	EnchantmentGlintOverride = "enchantment_glint_override",
	Enchantments = "enchantments",
	FireResistant = "fire_resistant",
	Food = "food",
	HideAdditionalTooltip = "hide_additional_tooltip",
	HideTooltip = "hide_tooltip",
	ItemName = "item_name",
	#[since="1.21"]
	JukeboxPlayable = "jukebox_playable",
	Lore = "lore",
	MaxDamage = "max_damage",
	MaxStackSize = "max_stack_size",
	Rarity = "rarity",
	RepairCost = "repair_cost",
	#[since="1.21.2"]
	Repairable = "repairable",
	Tool = "tool",
	Trim = "trim",
	Unbreakable = "unbreakable",
}

dispatch minecraft:item_component[%unknown] to ItemBaseComponents

// Until 1.20.5
struct ItemBase {
	/// Damage that an item has. Only used for tools, armor, etc.
	Damage?: int,
	/// Whether the item should be unbreakable.
	/// Only used for tools, armor, etc.
	Unbreakable?: boolean,
	/// List of the block states that can be destroyed by this item when holding it in adventure mode.
	CanDestroy?: [#[block_predicate] string],
	/// Tag that describes the custom model an item will take.
	/// Used by the `custom_model_data` model overrides predicate.
	/// Has certain restrictions due to float conversion.
	CustomModelData?: int,
	/// List of enchantments that are on the item.
	Enchantments?: [Enchantment],
	/// Number of experience levels to add to the base level cost when repairing, combining, or renaming this item with an anvil.
	RepairCost?: int,
	/// Applied to an entity that has equipped the item.
	AttributeModifiers?: [AttributeModifier],
	/// Display settings.
	display?: Display,
	/// Bitfield for which flags to hide on an item.
	#[bitfield(enum (int) {
		Enchantments = 1,
		AttributeModifiers = 2,
		Unbreakable = 3,
		CanDestroy = 4,
		CanPlaceOn = 5,
		Other = 6,
		#[since="1.16.2"]
		LeatherColor = 7,
		#[since="1.19.4"]
		Trim = 8
	})]
	HideFlags?: int,
	/// Trim to apply to the item & armor when worn.
	#[since="1.19.4"]
	Trim?: Trim,
}

dispatch minecraft:item[%unknown] to ItemBase

/// An individual enchantment, with ID and level.
struct Enchantment {
	/// Which enchantment is being described.
	id?: #[id="enchantment"] string,
	/// Which level the enchantment is.
	lvl?: (
		#[until="1.17"] (short @ 1.. | int @ 1..) |
		#[since="1.17"] int @ 0..255 |
	),
}

/// A single attribute modifier.
type AttributeModifier = (
	#[since="1.20.5"] struct {
		type: #[id="attribute"] string,
		#[until="1.21"]
		uuid: int[] @ 4,
		#[until="1.21"]
		name: string,
		/// Used when equipping and unequipping the item to identify which modifier to add or remove from the entity.
		#[since="1.21"]
		id: #[id="attribute_modifier"] string,
		/// Change in the attribute.
		amount: double,
		operation: AttributeOperation,
		/// Slot or slot type the item must be in for the modifier to take effect. Defaults to `any`.
		slot?: AttributeSlot,
	} |
	#[until="1.20.5"] struct {
		AttributeName?: (
			#[until="1.16"] (AttributeName | string) |
			#[since="1.16"] #[id="attribute"] string |
		),
		/// Identifying name of the modifier, has no real effect.
		Name?: string,
		/// Slot that the modifier is active in.
		Slot?: AttributeSlot,
		Operation?: LegacyOperation,
		/// Change in the attribute.
		Amount?: double,
		/// Upper bits of the modifier's UUID.
		#[until="1.16"]
		UUIDMost?: long,
		/// Lower bits of the modifier's UUID.
		#[until="1.16"]
		UUIDLeast?: long,
		#[uuid]
		#[since="1.16"]
		UUID?: int[] @ 4,
	} |
)

/// Display settings of an item.
struct Display {
	/// A JSON text component.
	Name?: #[text_component] string,
	/// A list of JSON text components, each element being a lore line.
	Lore?: [#[text_component] string],
}

type DataComponentPatch<T> = struct {
	[#[id(registry="data_component_type", recommended=T)] string]: minecraft:data_component[[%key]],
	[#[id(registry="data_component_type", recommended=T, prefix="!")] string]: struct {},
}

struct DataComponentPredicate {
	[#[id="data_component_type"] string]: minecraft:data_component[[%key]],
}

struct SingleItem {
	/// ID of the item.
	id: (
		#[until="1.20.5"] #[id="item"] string |
		#[since="1.20.5"] #[id(registry="item", exclude=["air"])] string |	
	),
	#[since="1.20.5"]
	components?: DataComponentPatch<minecraft:item_component[[id]]>,
	#[until="1.20.5"]
	tag?: minecraft:item[[id]],
}

/// @deprecated
type AnyItem = SingleItem

type ItemStack = struct {
	...SingleItem,
	/// Number of items in the stack
	#[since="1.20.5"]
	count?: int @ 1..99,
	/// Number of items in the stack
	#[until="1.20.5"]
	Count?: byte,
}
