use ::java::server::util::attribute::AttributeName
use ::java::server::util::attribute::Operation
use ::java::server::util::inventory::EquipmentSlot
use ::java::server::util::block_state::BlockState

/// Base Components of all items.
struct ItemBase {
	"minecraft:attribute_modifiers": 
	"minecraft:custom_name": 
	"minecraft:custom_model_data": 
	"minecraft:damage": 
	"minecraft:enchantment_glint_override": 
	"minecraft:enchantments": 
	"minecraft:fire_resistant": 
	"minecraft:food": 
	"minecraft:hide_tooltip": 
	"minecraft:lore": 
	"minecraft:max_damage": 
	"minecraft:max_stack_size": 
	"minecraft:rarity": 
	"minecraft:repair_cost": 
	"minecraft:tool": 
	/// Damage that an item has. Only used for tools, armor, etc.
	Damage: int,
	/// Whether the item should be unbreakable.
	/// Only used for tools, armor, etc.
	Unbreakable: boolean,
	/// List of the block states that can be destroyed by this item when holding it in adventure mode.
	CanDestroy: [BlockState],
	/// Tag that describes the custom model an item will take.
	/// Used by the `custom_model_data` model overrides predicate.
	CustomModelData: int,
	/// List of enchantments that are on the item.
	Enchantments: [Enchantment],
	/// Levels to add to the cost when using this in an anvil.
	RepairCost: int,
	/// Applied to an entity that has equipped the item.
	AttributeModifiers: [AttributeModifier],
	/// Display settings.
	display: Display,
	/// Bitfield for which flags to hide on an item.
	#[bitfield(enum (int) {
		Enchantments = 1,
		AttributeModifiers = 2,
		Unbreakable = 3,
		CanDestroy = 4,
		CanPlaceOn = 5,
		Other = 6,
		#[since="1.16.2"]
		LeatherColor = 7,
		#[since="1.19.4"]
		Trim = 8
	})]
	HideFlags: int,
	/// Trim to apply to the item & armor when worn.
	#[since="1.19.4"]
	Trim: struct {
		/// Used by the `trim_type` model overrides predicate via the material `item_model_index` and armor rendering for the material's `asset_name` for the `armor_trims` atlas.
		material: #[id=trim_material] string,
		/// Used by armor rendering for the pattern's `asset_id`.
		pattern: #[id=trim_pattern] string,
	},
}

struct AnyItem {
	/// ID of the item.
	id: #[id=item_type] string,
	...ItemBase,
	...minecraft:item[[id]],
}

/// An individual enchantment, with ID and level.
struct Enchantment {
	/// Which enchantment is being described.
	id: #[id=enchantment] string,
	/// Which level the enchantment is.
	lvl: (
		#[until=1.17] (short @ 1.. | int @ 1..) |
		#[since=1.17] int @ 0..255 |
	),
}

/// A single attribute modifier.
struct AttributeModifier {
	AttributeName: (
		#[until=1.16] (AttributeName | string) |
		#[since=1.16] #[id=attribute] string |
	),
	/// Identifying name of the modifier, has no real effect.
	Name: string,
	/// Slot that the modifier is active in.
	Slot: EquipmentSlot,
	Operation: Operation,
	/// Change in the attribute.
	Amount: double,
	/// Upper bits of the modifier's UUID.
	#[until=1.16]
	UUIDMost: long,
	/// Lower bits of the modifier's UUID.
	#[until=1.16]
	UUIDLeast: long,
	#[uuid]
	#[since=1.16]
	UUID: int[] @ 4,
}

/// Display settings of an item.
struct Display {
	/// A JSON text component.
	Name: #[text_component] string,
	/// A list of JSON text components, each element being a lore line.
	Lore: [#[text_component] string],
}
