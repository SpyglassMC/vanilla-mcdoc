use ::java::data::advancement::predicate::BlockPredicate
use ::java::server::util::attribute::AttributeName
use ::java::server::util::attribute::LegacyOperation
use ::java::server::util::attribute::AttributeOperation
use ::java::server::util::attribute::AttributeSlot
use ::java::server::util::block_state::BlockState
use ::java::server::util::effect::MobEffectInstance

struct AttributeModifiers {
	modifiers: [AttributeModifier],
	show_in_tooltip?: boolean,
}

/// Applied to an entity that has equipped/is holding the item.
dispatch minecraft:data_component[attribute_modifiers] to (
	#[canonical] AttributeModifiers |
	[AttributeModifier] |
)

struct AdventureModePredicate {
	predicates: [BlockPredicate] @ 1..,
	show_in_tooltip?: boolean,
}

dispatch minecraft:data_component[can_break] to (
	#[canonical] AdventureModePredicate |
	BlockPredicate |
)
// TODO: Determine if %parent.id can/should be used here. Ideally it should soft-fail to %any_item, but if this presents too much of a challenge it can be moved to AnyItem.
type CustomData = (
	mcdoc:custom_item_data[[%parent.id]] |
	#[nbt=mcdoc:custom_item_data[[%parent.id]]] string |
)

dispatch mcdoc:custom_item_data[%fallback] to struct {
	[string]: any,
}

dispatch minecraft:data_component[custom_name] to #[text_component] string

dispatch minecraft:data_component[custom_data] to CustomData

/// Tag that describes the custom model an item will take.
/// Used by the `custom_model_data` model overrides predicate.
/// Has certain restrictions due to float conversion.
dispatch minecraft:data_component[custom_model_data] to int

/// Damage that an item has. Only used for tools, armor, etc.
dispatch minecraft:data_component[damage] to int @ 0..

/// If set, changes enchantment glint behavior. When true, this item will display a glint, even without enchantments. When false, this item will not display a glint, even with enchantments.
dispatch minecraft:data_component[enchantment_glint_override] to boolean

struct EnchantmentLevels {
	[#[id="enchantment"] string]: int @ 0..255,
}

struct Enchantments {
	levels: struct {
		[#[id="enchantment"] string]: int @ 0..,
	},
	show_in_tooltip?: boolean,
}

/// List of enchantments that are on the item.
dispatch minecraft:data_component[enchantments] to (
	#[canonical] Enchantments |
	EnchantmentLevels |
)

/// If set, this item will not burn in fire or lava.
dispatch minecraft:data_component[fire_resistant] to struct {}

struct FoodEffect {
	effect: MobEffectInstance,
	/// Chance for the effect to be applied.
	probability: float @ 0..1,
}

struct Food {
	/// Food points/haunches restored when eaten (capped to 20.0).
	nutrition: int @ 0..,
	/// Exact value added to the player's saturation level, capped at whatever the [new] food points value is.
	saturation: float,
	/// Whether the item can be eaten when the player's food points/haunches are full. Defaults to `false`
	can_always_eat?: boolean,
	/// Seconds it takes to eat the item. Defaults to `1.6`
	eat_seconds?: float @ 0..,
	/// Applied when eaten.
	effects?: [FoodEffect],
	/// Works similarly to a milk bucket.
	#[since="1.21"]
	using_converts_to?: AnyItem,
}

/// If set, this item is considered as a food, and can be eaten.
dispatch minecraft:data_component[food] to Food

/// If set, several specific tooltip entries without an applicable `show_in_tooltip` option available are hidden.
///
/// Included entries:
/// - Banner pattern layers
/// - Banner Pattern description
/// - Decorated Pot sherds
/// - Shulker Box items
/// - Spawner entity type and interaction description
/// - Bundle occupancy and items
/// - Charged Crossbow projectiles
/// - Painting variant
/// - Disc Fragment description
/// - Tropical Fish Bucket entity variant
/// - Filled Map lock and scale level
/// - Firework Rocket duration
/// - Firework explosions
/// - Goat Horn instrument
/// - Potion effect, amplifier & duration
/// - Music Disc description
/// - Smithing Template description
/// - Written Book author & generation
dispatch minecraft:data_component[hide_additional_tooltip] to struct {}

/// If set, it will completely hide this item's tooltip, including its name.
dispatch minecraft:data_component[hide_tooltip] to struct {}

/// Replaces default item name with contained chat component.
///
/// Differences from `custom_name`:
/// - Can't be changed or removed in anvil.
/// - Not styled with italics when displayed to player.
/// - Does not show labels where applicable (for example: banner markers, names in item frames).
dispatch minecraft:data_component[item_name] to (#[text_component] string)

/// If set, this item can be played in a jukebox like a music disc.
#[since="1.21"]
dispatch minecraft:data_component[jukebox_playable] to struct JukeboxPlayable {
	song: #[id="jukebox_song"] string,
	show_in_tooltip?: boolean,
}

/// A list of JSON text components, each element being a lore line.
dispatch minecraft:data_component[lore] to [#[text_component] string]

/// Maximum amount of damage that this item can take (ie. **Durability**). If not set, this item cannot take damage. Cannot be combined with the `max_stack_size` component.
dispatch minecraft:data_component[max_damage] to int @ 1..

dispatch minecraft:data_component[max_stack_size] to int @ 1..99

enum(string) Rarity {
	/// White name, or aqua when enchanted.
	Common = "common",
	/// Yellow name, or aqua when enchanted.
	Uncommon = "uncommon",
	/// Aqua name, or light purple when enchanted.
	Rare = "rare",
	/// Light purple name.
	Epic = "epic",
}

/// Default color of this item's name.
dispatch minecraft:data_component[rarity] to Rarity

/// Number of experience levels to add to the base level cost when repairing, combining, or renaming this item with an anvil.
dispatch minecraft:data_component[repair_cost] to int @ 0..

struct ToolRule {
	blocks: (#[id="block"] string | [#[id="block"] string] | #[id(registry="block")] string),
	/// Overrides the default mining speed.
	speed?: float,
	/// Overrides whether or not this tool is considered correct to mine at its most efficient speed, and to drop items if the block's loot table requires it.
	correct_for_drops?: boolean,
}

dispatch minecraft:data_component[tool] to struct Tool {
	/// Blocks that this tool has a special behavior with.
	rules: [ToolRule],
	/// Used if no rules override it. Defaults to 1.0.
	default_mining_speed?: float,
	/// Amount of durability to remove each time a block is broken with this tool. Must be a non-negative integer.
	damage_per_block?: int,
}

/// Trim to apply to the item & armor when worn.
dispatch minecraft:data_component[trim] to struct Trim {
	/// Used by the `trim_type` model overrides predicate via the material `item_model_index` and armor rendering for the material's `asset_name` for the `armor_trims` atlas.
	material: #[id="trim_material"] string,
	/// Used by armor rendering for the pattern's `asset_id`.
	pattern: #[id="trim_pattern"] string,
	show_in_tooltip?: boolean,
}

dispatch minecraft:data_component[unbreakable] to struct Unbreakable {
	show_in_tooltip?: boolean,
}

enum(string) ItemBaseComponents {
	AttributeModifiers = "attribute_modifiers",
	CanBreak = "can_break",
	CustomData = "custom_data",
	CustomModelData = "custom_model_data",
	Damage = "damage",
	EnchantmentGlintOverride = "enchantment_glint_override",
	Enchantments = "enchantments",
	FireResistant = "fire_resistant",
	Food = "food",
	HideAdditionalTooltip = "hide_additional_tooltip",
	HideTooltip = "hide_tooltip",
	ItemName = "item_name",
	#[since="1.21"]
	JukeboxPlayable = "jukebox_playable",
	Lore = "lore",
	MaxDamage = "max_damage",
	MaxStackSize = "max_stack_size",
	Rarity = "rarity",
	RepairCost = "repair_cost",
	Tool = "tool",
	Trim = "trim",
	Unbreakable = "unbreakable",
}

dispatch minecraft:item_component[%fallback] to ItemBaseComponents

// Until 1.20.5
struct ItemBase {
	/// Damage that an item has. Only used for tools, armor, etc.
	Damage?: int,
	/// Whether the item should be unbreakable.
	/// Only used for tools, armor, etc.
	Unbreakable?: boolean,
	/// List of the block states that can be destroyed by this item when holding it in adventure mode.
	CanDestroy?: [BlockState],
	/// Tag that describes the custom model an item will take.
	/// Used by the `custom_model_data` model overrides predicate.
	/// Has certain restrictions due to float conversion.
	CustomModelData?: int,
	/// List of enchantments that are on the item.
	Enchantments?: [Enchantment],
	/// Number of experience levels to add to the base level cost when repairing, combining, or renaming this item with an anvil.
	RepairCost?: int,
	/// Applied to an entity that has equipped the item.
	AttributeModifiers?: [AttributeModifier],
	/// Display settings.
	display?: Display,
	/// Bitfield for which flags to hide on an item.
	#[bitfield(enum (int) {
		Enchantments = 1,
		AttributeModifiers = 2,
		Unbreakable = 3,
		CanDestroy = 4,
		CanPlaceOn = 5,
		Other = 6,
		#[since="1.16.2"]
		LeatherColor = 7,
		#[since="1.19.4"]
		Trim = 8
	})]
	HideFlags?: int,
	/// Trim to apply to the item & armor when worn.
	#[since="1.19.4"]
	Trim?: Trim,
}

struct AnyItem {
	/// ID of the item.
	id: #[id="item"] string,
	#[since="1.20.5"]
	components?: DataComponentPatch<minecraft:item_component[[id]]>,
	#[until="1.20.5"]
	tag?: minecraft:item[[id]],
}

type DataComponentPatch<T> = struct {
	[#[id(registry="data_component_type", recommended=T)] string]: minecraft:data_component[[%key]],
	[#[id(registry="data_component_type", recommended=T, prefix="!")] string]: struct {},
}

struct DataComponentPredicate {
	[#[id="data_component_type"] string]: minecraft:data_component[[%key]],
}

/// An individual enchantment, with ID and level.
struct Enchantment {
	/// Which enchantment is being described.
	id?: #[id="enchantment"] string,
	/// Which level the enchantment is.
	lvl?: (
		#[until="1.17"] (short @ 1.. | int @ 1..) |
		#[since="1.17"] int @ 0..255 |
	),
}

/// A single attribute modifier.
type AttributeModifier = (
	#[since="1.20.5"] struct {
		type: #[id="attribute"] string,
		/// Used when equipping and unequipping the item to identify which modifier to add or remove from the entity.
		id: #[id="attribute_modifier"] string,
		/// Change in the attribute.
		amount: double,
		operation: AttributeOperation,
		/// Slot or slot type the item must be in for the modifier to take effect. Defaults to `any`.
		slot?: AttributeSlot,
	} |
	#[until="1.20.5"] struct {
		AttributeName?: (
			#[until="1.16"] (AttributeName | string) |
			#[since="1.16"] #[id="attribute"] string |
		),
		/// Identifying name of the modifier, has no real effect.
		Name?: string,
		/// Slot that the modifier is active in.
		Slot?: AttributeSlot,
		Operation?: LegacyOperation,
		/// Change in the attribute.
		Amount?: double,
		/// Upper bits of the modifier's UUID.
		#[until="1.16"]
		UUIDMost?: long,
		/// Lower bits of the modifier's UUID.
		#[until="1.16"]
		UUIDLeast?: long,
		#[uuid]
		#[since="1.16"]
		UUID?: int[] @ 4,
	} |
)

/// Display settings of an item.
struct Display {
	/// A JSON text component.
	Name?: #[text_component] string,
	/// A list of JSON text components, each element being a lore line.
	Lore?: [#[text_component] string],
}
