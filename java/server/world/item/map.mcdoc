/// Calculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.
dispatch minecraft:data_component[map_color] to #[color="composite_int"] int

/// Key-value pairs of the icons to display, where the key is an arbitrary unique string identifying the decoration.
dispatch minecraft:data_component[map_decorations] to struct MapDecorations {
	[string]: Decoration
}

/// Map number, representing the shared state holding map contents and markers.
dispatch minecraft:data_component[map_id] to int

// Pre-1.20.5
dispatch minecraft:item[filled_map] to struct FilledMap {
	...super::ItemBase,
	/// Map number, representing the shared state holding map contents and markers.
	map?: int,
	/// Amount to increase the current map scale by when crafting.
	map_scale_direction?: int @ 1..,
	/// Whether the map should be locked after being taken out of the cartography table.
	map_to_lock?: boolean,
	/// Decorations on the map.
	Decorations?: [struct {
		...Decoration,
		/// An arbitrary unique string identifying the decoration.
		id: string,
	}],
	/// Display for the item.
	display?: struct {
		...super::Display,
		/// Calculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.
		MapColor?: #[color="composite_int"] int,
	},
}

dispatch minecraft:item_component[filled_map] to (
	super::ItemBaseComponents |
	"map_color" |
	"map_decorations" |
	"map_id" |
)

struct Decoration {
	/// Decoration type.
	type: (
		#[since="1.20.5"] #[id="map_decoration_type"] string |
		#[until="1.20.5"] IconByteId |
	),
	/// World x position.
	x: double,
	/// World z position.
	z: double,
	/// Rotation of the decoration, measured in degrees clockwise.
	rot: float,
}

enum(byte) IconByteId {
	/// White pentagon.
	Player = 0,
	/// Green pentagon.
	Frame = 1,
	/// Red pentagon.
	RedMarker = 2,
	/// Blue pentagon.
	BlueMarker = 3,
	/// White x.
	TargetX = 4,
	/// Red triangle.
	TargetPoint = 5,
	/// Large white dot.
	PlayerOffMap = 6,
	/// Small white dot.
	PlayerOffLimits = 7,
	/// Woodland mansion.
	Mansion = 8,
	/// Ocean monument.
	Monument = 9,
	WhiteBanner = 10,
	OrangeBanner = 11,
	MagentaBanner = 12,
	LightBlueBanner = 13,
	YellowBanner = 14,
	LimeBanner = 15,
	PinkBanner = 16,
	GrayBanner = 17,
	LightGrayBanner = 18,
	CyanBanner = 19,
	PurpleBanner = 20,
	BlueBanner = 21,
	BrownBanner = 22,
	GreenBanner = 23,
	RedBanner = 24,
	BlackBanner = 25,
	RedX = 26,
}
