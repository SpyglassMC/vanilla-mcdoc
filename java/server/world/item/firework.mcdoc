dispatch minecraft:item_component[fireworks] to struct Fireworks {
	explosions: [Explosion] @ 0..256,
	flight_duration: byte
}

dispatch minecraft:item_component[firework_explosion] to struct Explosion {
	shape: (enum(string) {
		SmallBall = "small_ball",
		LargeBall = "large_ball",
		Star = "star",
		Creeper = "creeper",
		Burst = "burst",
	}),
	/// Colors of the initial particles of the explosion, randomly selected from.
	/// Calculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.
	colors: #[color=composite_int] int[],
	/// Colors of the fading particles of the explosion
	fade_colors: #[color=composite_int] int[],
	/// Added to a firework star via Diamond.
	has_trail: boolean,
	/// Added to a firework star via Glowstone Dust.
	has_twinkle: boolean,
}



dispatch minecraft:item[firework_rocket] to struct FireworkRocket {
	#[since="1.20.5"]
	"minecraft:fireworks": Fireworks,
	#[until="1.20.5"]
	Fireworks: LegacyFireworks,
}

dispatch minecraft:item[firework_star] to struct FireworkStar {
	#[since="1.20.5"]
	"minecraft:firework_explosion": Explosion,
	#[until="1.20.5"]
	Explosion: LegacyExplosion,
}

struct LegacyFireworks {
	/// Duration of flight.
	Flight: byte,
	Explosions: [LegacyExplosion],
}

struct LegacyExplosion {
	/// Whether the explosion should flicker.
	Flicker: boolean,
	/// Whether the explosion should have a trail.
	Trail: boolean,
	Type: (enum(byte) {
		SmallBall = 0,
		LargeBall = 1,
		Star = 2,
		Creeper = 3,
		Burst = 4,
	}),
	/// Colors of the explosion.
	/// Calculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.
	Colors: #[color=composite_int] int[],
	/// Colors of the explosion fade.
	/// Calculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.
	FadeColors: #[color=composite_int] int[],
}
