use ::java::util::text::Text
use ::java::util::text::ClickEvent
use action::ClickAction
use body::DialogBody
use input::InputControl

#[since="1.21.6"]
dispatch minecraft:resource[dialog] to struct Dialog {
	type: #[id="dialog_type"] string,
	...minecraft:dialog[[type]],
}

struct DialogBase {
	title: Text,
	/// Name to be used for a button leading to this dialog.
	/// If not present, `title` will be used instead.
	external_title?: Text,
	body?: (DialogBody | [DialogBody]),
	// TODO: check if this field accepts single InputControl like the body field
	inputs?: [InputControl],
	/// Whether the dialog can be closed with ESC key.
	/// Defaults to `true`.
	can_close_with_escape?: boolean,
	/// Whether the dialog should pause the game in single-player mode.
	/// Defaults to `true`.
	pause?: boolean,
	/// An additional operation performed on dialog after click or submit actions.
	/// Defaults to `close`.
	after_action?: AfterAction,
}

enum(string) AfterAction {
	/// Closes the dialog.
	/// Returns to the previous non-dialog screen, if any.
	Close = "close",
	/// Does nothing.
	/// Only available if `pause` is set to `false`.
	None = "none",
	/// Replaces the dialog with a "Waiting for Response" screen.
	/// The waiting screen unpauses the game in single-player mode.
	WaitForResponse = "wait_for_response",
}

struct Button {
	label: Text,
	tooltip?: Text,
	/// Width of the button.
	/// Defaults to 150.
	width?: int @ 1..1024,
	/// If not present, clicking button will simply close dialog without any action.
	action?: ClickAction,
}

dispatch minecraft:dialog[notice] to struct NoticeDialog {
	...DialogBase,
	/// The only action in footer.
	/// Defaults to `gui.ok` label with no action or tooltip.
	action?: Button,
}

dispatch minecraft:dialog[confirmation] to struct ConfirmationDialog {
	...DialogBase,
	yes: Button,
	/// This action is also used for ESC-triggered exit.
	no: Button,
}

struct ListDialogBase {
	...DialogBase,
	/// The button in footer.
	/// The action is also used for ESC-triggered exit.
	exit_action?: Button,
	/// The number of columns.
	/// Defaults to 2.
	columns?: int @ 1..,
}

dispatch minecraft:dialog[multi_action] to struct MultiActionDialog {
	...ListDialogBase,
	actions: [Button] @ 1..,
}

struct ButtonListDialogBase {
	...ListDialogBase,
	/// Width of buttons in the list.
	/// Defaults to 150.
	button_width?: int @ 1..,
}

dispatch minecraft:dialog[server_links] to struct ServerLinksDialog {
	...ButtonListDialogBase,
}

dispatch minecraft:dialog[dialog_list] to struct RedirectDialog {
	...ButtonListDialogBase,
	dialogs: (
		[(#[id="dialog"] string | Dialog)] |
		#[id=(registry="dialog", tags="allowed")] string |
		Dialog |
	),
}
