use ::java::server::util::inventory::InventoryItem
use ::java::server::world::item::AnyItem

dispatch minecraft:resource[recipe] to struct Recipe {
	type: #[id="recipe_serializer"] string,
	...minecraft:recipe_serializer[[type]],
}

dispatch minecraft:recipe_serializer[crafting_shaped] to struct CraftingShaped {
	/// Identifier to group multiple recipes in the recipe book.
	group?: string, // TODO
	/// Identifier for the category this goes in the recipe book.
	category?: CraftingBookCategory,
	pattern: [string @ 1..3] @ 1..3, // TODO
	key: struct {
		[string]: Ingredient,
	},
	result: (
		#[until="1.20.5"] ItemResult |
		#[since="1.20.5"] InventoryItem |
	),
	/// Determines if a notification is shown when unlocking this recipe. Defaults to true.
	#[since="1.19.4"]
	show_notification?: boolean
}

dispatch minecraft:recipe_serializer[crafting_shapeless] to struct CraftingShapeless {
	group?: string,
	/// Identifier for the category this goes in the recipe book.
	category?: CraftingBookCategory,
	ingredients?: [Ingredient] @ 1..9,
	result: (
		#[until="1.20.5"] ItemResult |
		#[since="1.20.5"] InventoryItem |
	),
}

dispatch minecraft:recipe_serializer[smelting,blasting,smoking,campfire_cooking] to struct Smelting {
	group?: string,
	/// Identifier for the category this goes in the recipe book.
	category?: CookingBookCategory,
	ingredient: Ingredient,
	result: (
		#[until="1.20.5"] #[id="item"] string |
		#[since="1.20.5"] AnyItem |
	),
	experience?: float,
	cookingtime?: int,
}

dispatch minecraft:recipe_serializer[stonecutting] to struct Stonecutting {
	group?: string,
	ingredient: Ingredient,
	result: (
		#[until="1.20.5"] #[id="item"] string |
		#[since="1.20.5"] InventoryItem |
	),
	#[until="1.20.5"]
	count: int,
}

#[until="1.20"]
dispatch minecraft:recipe_serializer[smithing] to struct Smithing {
	base: IngredientValue,
	addition: IngredientValue,
	result: ItemResult,
}

#[since="1.19.4"]
dispatch minecraft:recipe_serializer[smithing_trim] to struct SmithingTrim {
	/// Ingredient specifying an item to be trimmed. (eg. `{ "tag": "minecraft:trimmable_armor" }`)
	base: Ingredient,
	/// Material that will be used. (eg. `{ "tag": "minecraft:trim_materials" }`)
	addition: Ingredient,
	/// Template item that will be used for the pattern.
	template: Ingredient,
}

#[since="1.19.4"]
dispatch minecraft:recipe_serializer[smithing_transform] to struct SmithingTransform {
	/// Ingredient specifying an item to be transformed. (eg. `{ "tag": "minecraft:diamond_helmet" }`)
	base: Ingredient,
	/// Material that will be used for transforming. (eg. `{ "tag": "minecraft:netherite_ingot" }`)
	addition: Ingredient,
	/// Template item that will be used for the item transformation.
	template: Ingredient,
	/// Resulting transformed item.
	result: (
		#[until="1.20.5"] struct {
			item: #[id="item"] string, // Fun
		} |
		#[since="1.20.5"] InventoryItem |
	)
}

struct ItemResult {
	item: #[id="item"] string,
	count?: int
}

type Ingredient = (
	IngredientValue |
	[IngredientValue] |
)

type IngredientValue = (
	struct {
		item: #[id="item"] string,
	} |
	struct {
		tag: #[id(registry="item",tags="implicit")] string,
	} |
)

enum(string) CraftingBookCategory {
	Building = "building",
	Redstone = "redstone",
	Equipment = "equipment",
	Misc = "misc",
}

enum(string) CookingBookCategory {
	Food = "food",
	Blocks = "blocks",
	Misc = "misc",
}
