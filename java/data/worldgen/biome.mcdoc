use ::java::server::util::particle::Particle
use super::CarveStep
use super::carver::CarverRef
use super::feature::ConfiguredFeatureRef
use super::feature::placement::PlacedFeatureRef
use super::structure::StructureRef
use super::surface_builder::ConfiguredSurfaceBuilderRef
use super::super::util::SoundEventRef

dispatch minecraft:resource["worldgen/biome"] to struct Biome {
	#[until="1.19"]
	category: BiomeCategory,
	/// Raises or lowers the terrain. Positive values are considered land and negative are oceans.
	#[until="1.18"]
	depth: float,
	/// Vertically stretches the terrain. Lower values produce flatter terrain.
	#[until="1.18"]
	scale: float,
	temperature: float,
	downfall: float,
	#[until="1.19.4"]
	precipitation: Precipication,
	#[since="1.19.4"]
	has_precipitation: boolean,
	temperature_modifier?: TemperatureModifier,
	/// If true, the world spawn will be preferred in this biome.
	#[until="1.18"]
	player_spawn_friendly?: boolean,
	creature_spawn_probability?: float @ 0..1,
	effects: BiomeEffects,
	#[until="1.18"]
	surface_builder: ConfiguredSurfaceBuilderRef,
	#[until="1.18"]
	starts: [StructureRef],
	spawners: struct {
		[MobCategory]: [SpawnerData],
	},
	spawn_costs: struct {
		[#[id="entity_type"] string]: MobSpawnCost,
	},
	carvers: (
		#[until="1.21.2"] struct CarversPerStep {
			[CarveStep]: (
				[CarverRef] |
				#[since="1.18.2"] #[id(registry="worldgen/configured_carver",tags=allowed)] string |
			),
		} |
		#[since="1.21.2"] (
			[CarverRef] |
			#[id(registry="worldgen/configured_carver",tags=allowed)] string |
		) |
	),
	features: (
		#[until="1.18"] [[ConfiguredFeatureRef]] @ ..10 |
		#[since="1.18"] [(
			[PlacedFeatureRef] |
			#[since="1.18.2"] #[id(registry="worldgen/placed_feature",tags=allowed)] string |
		)] @ ..11 |
	),
}

enum (string) BiomeCategory {
	Beach = "beach",
	Desert = "desert",
	ExtremeHills = "extreme_hills",
	Forest = "forest",
	Icy = "icy",
	Jungle = "jungle",
	Mesa = "mesa",
	#[since="1.18"] Mountain = "mountain",
	Mushroom = "mushroom",
	Nether = "nether",
	None = "none",
	Ocean = "ocean",
	Plains = "plains",
	River = "river",
	Savanna = "savanna",
	Swamp = "swamp",
	Taiga = "taiga",
	TheEnd = "the_end",
	#[since="1.17"] Underground = "underground",
}

enum(string) Precipication {
	None = "none",
	Rain = "rain",
	Snow = "snow",
}

enum(string) TemperatureModifier {
	None = "none",
	Frozen = "frozen",
}

struct BiomeEffects {
	sky_color: #[color="composite_rgb"] int,
	fog_color: #[color="composite_rgb"] int,
	water_color: #[color="composite_rgb"] int,
	water_fog_color: #[color="composite_rgb"] int,
	grass_color?: #[color="composite_rgb"] int,
	foliage_color?: #[color="composite_rgb"] int,
	grass_color_modifier?: GrassColorModifier,
	ambient_sound?: SoundEventRef,
	mood_sound?: struct MoodSound {
		sound: SoundEventRef,
		tick_delay: int,
		block_search_extent: int,
		offset: float,
	},
	additions_sound?: struct BiomeSoundAdditions {
		sound: SoundEventRef,
		tick_chance: float @ 0..1,
	},
	music?: struct BiomeMusic {
		sound: SoundEventRef,
		min_delay: int @ 0..,
		max_delay: int @ 0..,
		replace_current_music: boolean,
	},
	particle?: struct BiomeParticle {
		options: Particle,
		probability: float @ 0..1,
	},
}

enum(string) GrassColorModifier {
	None = "none",
	DarkForest = "dark_forest",
	Swamp = "swamp",
}

enum(string) MobCategory {
	Monster = "monster",
	Creature = "creature",
	Ambient = "ambient",
	#[since="1.18"] Axolotls = "axolotls",
	#[since="1.17"] UndergroundWaterCreature = "underground_water_creature",
	WaterCreature = "water_creature",
	WaterAmbient = "water_ambient",
	Misc = "misc",
}

struct SpawnerData {
	type: #[id="entity_type"] string,
	weight: int,
	minCount: int,
	maxCount: int,
}

struct MobSpawnCost {
	energy_budget: double,
	charge: double,
}
