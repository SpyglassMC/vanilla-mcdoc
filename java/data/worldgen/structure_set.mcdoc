type StructureSetRef = (
	#[id="worldgen/structure_set"] string |
	StructureSet |
)

dispatch minecraft:resource["worldgen/structure_set"] to struct StructureSet {
	structures: [StructureSetElement],
	placement: StructurePlacement,
}

struct StructureSetElement {
	structure: (
		#[until="1.19"] #[id(registry="worldgen/configured_structure_feature")] string |
		#[since="1.19"] #[id(registry="worldgen/structure")] string |
	),
	weight: int @ 1..,
}

struct StructurePlacement {
	type: #[id="worldgen/structure_placement"] string,
	...minecraft:structure_placement[[type]],
	#[since="1.19"]
	salt: int @ 0..,
	#[since="1.19"]
	frequency_reduction_method?: FrequencyReductionMethod,
	#[since="1.19"]
	frequency?: float @ 0..1,
	exclusion_zone?: ExclusionZone,
	locate_offset?: [int @ -16..16] @ 3,
}

enum(string) FrequencyReductionMethod {
	Default = "default",
	LegacyType1 = "legacy_type_1",
	LegacyType2 = "legacy_type_2",
	LegacyType3 = "legacy_type_3",
}

struct ExclusionZone {
	other_set: StructureSetRef,
	chunk_count: int @ 1..16,
}

dispatch minecraft:structure_placement[concentric_rings] to struct ConcentricRingsPlacement {
	distance: int @ 0..1023,
	spread: int @ 0..1023,
	count: int @ 1..4095,
	#[since="1.19"]
	preferred_biomes: (
		[#[id="worldgen/biome"] string] |
		#[id(registry="worldgen/biome",tags=allowed)] string |
	),
}

dispatch minecraft:structure_placement[random_spread] to struct RandomSpreadPlacement {
	/// Average distance in chunks between two structures of this type.
	spacing: int @ 0..4096,
	/// Minimum distance in chunks between two structures of this type.
	separation: int @ 0..4096,
	#[until="1.19"]
	salt: int @ 0..,
	#[since="1.18.2"]
	spread_type?: SpreadType,
	#[since="1.18.2"] #[until="1.19"]
	locate_offset?: [int @ -16..16] @ 3,
}

enum(string) SpreadType {
	Linear = "linear",
	Triangular = "triangular",
}
