enum(string) HeightmapType {
	MotionBlocking = "MOTION_BLOCKING",
	MotionBlockingNoLeaves = "MOTION_BLOCKING_NO_LEAVES",
	OceanFloor = "OCEAN_FLOOR",
	OceanFloorWorldgen = "OCEAN_FLOOR_WG",
	WorldSurface = "WORLD_SURFACE",
	WorldSurfaceWorldgen = "WORLD_SURFACE_WG",
}

enum(string) CarveStep {
	Air = "air",
	Liquid = "liquid",
}

enum(string) DecorationStep {
	RawGeneration = "raw_generation",
	Lakes = "lakes",
	LocalModifications = "local_modifications",
	UndergroundStructures = "underground_structures",
	SurfaceStructures = "surface_structures",
	Strongholds = "strongholds",
	UndergroundOres = "underground_ores",
	UndergroundDecoration = "underground_decoration",
	FluidSprings = "fluid_springs",
	VegetalDecoration = "vegetal_decoration",
	TopLayerModification = "top_layer_modification"
}

enum(string) CaveSurface {
	Floor = "floor",
	Ceiling = "ceiling",
}

type UniformInt<Base, Spread> = (
	Base |
	struct {
		base: Base,
		spread: Spread,
	} |
)

type IntProvider<T> = (
	T |
	struct {
		type: #[id="int_provider_type"] string,
		#[until="1.20.5"]
		value: minecraft:int_provider[[type]]<T>,
		#[since="1.20.5"]
		...minecraft:int_provider[[type]]<T>,
	} |
)

type ConstantIntProvider<T> = struct {
	value: T,
}
dispatch minecraft:int_provider[constant] to ConstantIntProvider

type UniformIntProvider<T> = struct {
	min_inclusive: T,
	max_inclusive: T,
}
dispatch minecraft:int_provider[uniform,biased_to_bottom] to UniformIntProvider

type ClampedIntProvider<T> = struct {
	min_inclusive: T,
	max_inclusive: T,
	source: IntProvider<int>,
}
dispatch minecraft:int_provider[clamped] to ClampedIntProvider

type ClampedNormalIntProvider<T> = struct {
	...UniformIntProvider,
	mean: float,
	deviation: float,
}

#[since="1.18"]
dispatch minecraft:int_provider[clamped_normal] to ClampedNormalIntProvider

type WeightListIntProvider<T> = struct {
	distribution: [struct {
		weight: int,
		data: IntProvider<T>,
	}],
}

#[since="1.18"]
dispatch minecraft:int_provider[weighted_list] to WeightListIntProvider


type FloatProvider<T> = (
	T |
	struct {
		type: #[id="float_provider_type"] string,
		#[until="1.20.5"]
		value: minecraft:float_provider[[type]]<T>,
		#[since="1.20.5"]
		...minecraft:float_provider[[type]]<T>,
	} |
)

type ConstantFloatProvider<T> = struct {
	value: T,
}
dispatch minecraft:float_provider[constant] to ConstantFloatProvider

type UniformFloatProvider<T> = struct {
	min_inclusive: T,
	max_exclusive: T,
}
dispatch minecraft:float_provider[uniform] to UniformFloatProvider

type ClampedNormalFloatProvider<T> = struct {
	min: T,
	max: T,
	mean: float,
	deviation: float,
}
dispatch minecraft:float_provider[clamped_normal] to ClampedNormalFloatProvider

type TrapezoidFloatProvider<T> = struct {
	min: T,
	max: T,
	plateau: float,
}
dispatch minecraft:float_provider[trapezoid] to TrapezoidFloatProvider

type VerticalAnchor = (
	struct {
		absolute: int,
	} |
	struct {
		above_bottom: int,
	} |
	struct {
		below_top: int,
	} |
)

struct HeightProvider {
	type?: #[id="height_provider_type"] string,
	...minecraft:height_provider[[type]],
}

dispatch minecraft:height_provider[%none] to VerticalAnchor

dispatch minecraft:height_provider[constant] to struct ConstantHeightProvider {
	value: VerticalAnchor,
}

dispatch minecraft:height_provider[uniform] to struct UniformHeightProvider {
	min_inclusive: VerticalAnchor,
	max_inclusive: VerticalAnchor,
}

dispatch minecraft:height_provider[biased_to_bottom,very_biased_to_bottom] to struct BottomBiasHeightProvider {
	...UniformHeightProvider,
	inner?: int @ 1..,
}

dispatch minecraft:height_provider[trapezoid] to struct TrapezoidHeightProvider {
	...UniformHeightProvider,
	plateau?: int,
}

#[since="1.18"]
dispatch minecraft:height_provider[weighted_list] to struct WeightListHeightProvider {
	distribution: [struct {
		weight: int,
		data: HeightProvider,
	}],
}
