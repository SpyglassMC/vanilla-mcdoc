use ::java::util::block_state::BlockState
use ::java::util::direction::Direction

struct BlockPredicate {
	type: #[id="block_predicate_type"] string,
	...minecraft:block_predicate[[type]],
}

struct PredicateOffset {
	/// The block offset to check.
	offset?: [int @ -16..16] @ 3,
}

dispatch minecraft:block_predicate[all_of,any_of] to struct CombiningPredicate {
	predicates: [BlockPredicate],
}

dispatch minecraft:block_predicate[has_sturdy_face] to struct HasSturdyFacePredicate {
	...PredicateOffset,
	direction: Direction,
}

dispatch minecraft:block_predicate[inside_world_bounds] to struct InsideWorldBoundsPredicate {
	...PredicateOffset,
}

dispatch minecraft:block_predicate[matching_block_tag] to struct MatchingBlockTagPredicate {
	...PredicateOffset,
	tag: #[id(registry="block",tags="implicit")] string,
}

dispatch minecraft:block_predicate[matching_blocks] to struct MatchingBlocksPredicate {
	...PredicateOffset,
	blocks: (
		[#[id="block"] string] |
		#[since="1.18.2"] #[id(registry="block",tags="allowed")] string|
	),
}

dispatch minecraft:block_predicate[matching_fluids] to struct MatchingFluidsPredicate {
	...PredicateOffset,
	fluids: (
		[#[id="fluid"] string] |
		#[since="1.18.2"] #[id(registry="fluid",tags="allowed")] string |
	),
}

dispatch minecraft:block_predicate[not] to struct NotPredicate {
	predicate: BlockPredicate,
}

/// Whether the selected block is unobstructed (no entities are in the space of the block).
#[since="1.21"]
dispatch minecraft:block_predicate[unobstructed] to struct UnobstructedPredicate {
	offset?: [int] @ 3,
}

dispatch minecraft:block_predicate[would_survive] to struct WouldSurvivePredicate {
	...PredicateOffset,
	state: BlockState,
}
