use super::super::IntProvider
use super::super::dimension::biome_source::NoiseParameters
use ::java::util::block_state::BlockState
use ::java::util::InclusiveRange

struct BlockStateProvider {
	type: #[id="worldgen/block_state_provider_type"] string,
	...minecraft:block_state_provider[[type]],
}

struct BaseNoiseProvider {
	seed: #[random] int,
	noise: NoiseParameters,
	scale: float @ 0..,
}

#[since="1.18"]
dispatch minecraft:block_state_provider[dual_noise_provider] to struct DualNoiseProvider {
	...BaseNoiseProvider,
	variety: InclusiveRange<int @ 1..64>,
	slow_noise: NoiseParameters,
	slow_scale: float @ 0..,
	states: [BlockState],
}

#[since="1.18"]
dispatch minecraft:block_state_provider[noise_threshold_provider] to struct NoiseThresholdProvider {
	...BaseNoiseProvider,
	threshold: float @ -1..1,
	high_chance: float @ 0..1,
	default_state: BlockState,
	low_states: [BlockState],
	high_states: [BlockState],
}

#[since="1.18"]
dispatch minecraft:block_state_provider[noise_provider] to struct NoiseProvider {
	...BaseNoiseProvider,
	states: [BlockState],
}

#[since="1.17"]
dispatch minecraft:block_state_provider[randomized_int_state_provider] to struct RandomizedIntStateProvider {
	property: string,
	values: IntProvider<int>,
	source: BlockStateProvider,
}

dispatch minecraft:block_state_provider[rotated_block_provider,simple_state_provider] to struct SimpleStateProvider {
	state: BlockState,
}

dispatch minecraft:block_state_provider[weighted_state_provider] to struct WeightedBlockStateProvider {
	entries: [struct WeightedEntry {
		weight: int @ 1..,
		data: BlockState,
	}],
}
