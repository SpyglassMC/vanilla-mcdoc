use super::dimension::biome_source::ClimateParameters
use super::density_function::DensityFunctionRef
use super::density_function::CubicSpline
use super::structure_set::ConcentricRingsPlacement
use super::structure_set::RandomSpreadPlacement
use super::surface_rule::SurfaceRule
use ::java::server::util::block_state::BlockState

type NoiseGeneratorSettingsRef = (
	#[since="1.16.2"] #[id="worldgen/noise_settings"] string |
	struct {
		name: #[id=(registry="worldgen/noise_settings",definition=true)] string,
		...NoiseGeneratorSettings,
	} |
)

dispatch minecraft:resource["worldgen/noise_settings"] to struct NoiseGeneratorSettings {
	default_block: BlockState,
	default_fluid: BlockState,
	/// Relative position of the bedrock roof starting at the world height. Higher numbers move the roof down.
	#[until="1.18"]
	bedrock_roof_position: (
		#[until="1.17"] int @ -20..276 |
		#[since="1.17"] int |
	),
	#[until="1.18"]
	bedrock_floor_position: (
		#[until="1.17"] int @ -20..276 |
		#[since="1.17"] int |
	),
	sea_level: (
		#[until="1.17"] int @ 0..255 |
		#[since="1.17"] int |
	),
	#[since="1.17"] #[until="1.18"]
	min_surface_level: int,
	/// If true, mobs will not spawn during generation.
	disable_mob_generation: boolean,
	#[since="1.17"]
	...struct {
		#[until="1.18.2"]
		noise_caves_enabled: boolean,
		#[until="1.18.2"]
		noodle_caves_enabled: boolean,
		aquifers_enabled: boolean,
		#[until="1.18"]
		deepslate_enabled: boolean,
		ore_veins_enabled: boolean,
	},
	#[since="1.18"]
	legacy_random_source: boolean,
	noise: NoiseSettings,
	#[since="1.18.2"]
	noise_router: NoiseRouter,
	#[since="1.19"]
	spawn_target: [ClimateParameters],
	#[since="1.18"]
	surface_rule: SurfaceRule,
	#[until="1.18.2"]
	structures: StructureSettings,
}

struct NoiseSettings {
	/// Minimum height where blocks start generating.
	#[since="1.17"]
	min_y: int @ -2048..2047,
	/// The total height where blocks can generate. Max Y = Min Y + Height.
	height: (
		#[until="1.17"] int @ 0..256 |
		#[since="1.17"] int @ 0..4096 |
	),
	size_horizontal: int @ 1..4,
	size_vertical: int @ 1..4,
	#[until="1.18"]
	density_factor: double,
	#[until="1.18"]
	density_offset: double,
	#[until="1.19"]
	sampling: NoiseSamplingSettings,
	/// Adds or removes terrain at the top of the world. Does nothing when size is 0.
	#[until="1.19"]
	top_slide: NoiseSlideSettings,
	/// Adds or removes terrain at the bottom of the world. Does nothing when size is 0.
	#[until="1.19"]
	bottom_slide: NoiseSlideSettings,
	#[since="1.18"] #[until="1.19"]
	terrain_shaper: TerrainShaper,
	#[until="1.18"]
	simplex_surface_noise: boolean,
	#[until="1.18"]
	random_density_offset?: boolean,
	/// If true, terrain will be shaped like islands similar to the end.
	#[until="1.18.2"]
	island_noise_override?: boolean,
	#[until="1.18.2"]
	amplified?: boolean,
	#[since="1.18"] #[until="1.18.2"]
	large_biomes?: boolean,
}

struct NoiseSamplingSettings {
	xz_scale: double @ 0.001..1000,
	y_scale: double @ 0.001..1000,
	xz_factor: double @ 0.001..1000,
	y_factor: double @ 0.001..1000,
}

struct NoiseSlideSettings {
	/// The target density. Positive values add terrain and negative values remove terrain.
	target: float,
	/// Defines a range of 'Size * Size vertical * 4' blocks where the existing density and target are interpolated.
	size: int @ 0..256,
	/// Defines an range of 'Offset * Size vertical * 4' blocks where the density is set to the target.
	offset: int,
}

struct TerrainShaper {
	offset: CubicSpline,
	factor: CubicSpline,
	jaggedness: CubicSpline,
}

struct NoiseRouter {
	barrier: DensityFunctionRef,
	fluid_level_floodedness: DensityFunctionRef,
	fluid_level_spread: DensityFunctionRef,
	lava: DensityFunctionRef,
	vein_toggle: DensityFunctionRef,
	vein_ridged: DensityFunctionRef,
	vein_gap: DensityFunctionRef,
	temperature: DensityFunctionRef,
	vegetation: DensityFunctionRef,
	continents: DensityFunctionRef,
	erosion: DensityFunctionRef,
	depth: DensityFunctionRef,
	ridges: DensityFunctionRef,
	initial_density_without_jaggedness: DensityFunctionRef,
	final_density: DensityFunctionRef,
}

struct StructureSettings {
	stronghold?: ConcentricRingsPlacement,
	structures: struct {
		[#[id="worldgen/structure_feature"] string]: RandomSpreadPlacement
	},
}
