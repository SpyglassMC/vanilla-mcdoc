use ::java::util::color::StringRGB
use ::java::util::color::StringARGB

type BooleanAttributeModifier<T> = struct {
	modifier: BooleanModifierType,
	// All modifiers use boolean argument
	// If this is changed in the future, use a dispatcher like float/color modifier
	argument: boolean,
}

type FloatAttributeModifier<T> = struct {
	modifier: FloatModifierType,
	argument: minecraft:environment_attribute_float_modifier[[modifier]]<T>,
}
dispatch minecraft:environment_attribute_float_modifier[%unknown]<T> to float
dispatch minecraft:environment_attribute_float_modifier[alpha_blend]<T> to struct FloatWithAlpha {
	value: float,
	alpha: float @ 0..1,
}
dispatch minecraft:environment_attribute_float_modifier[override, %none]<T> to T

type ColorAttributeModifier<T> = struct {
	modifier: ColorModifierType,
	argument: minecraft:environment_attribute_color_modifier[[modifier]]<T>,
}
dispatch minecraft:environment_attribute_color_modifier[%unknown]<T> to StringRGB
dispatch minecraft:environment_attribute_color_modifier[alpha_blend]<T> to StringARGB
dispatch minecraft:environment_attribute_color_modifier[override, %none]<T> to T

type OverrideModifier<T> = struct {
	modifier: "override",
	argument: T,
}

enum(string) BooleanModifierType {
	Override = "override",
	And = "and",
	Nand = "nand",
	Or = "or",
	Nor = "nor",
	Xor = "xor",
	Xnor = "xnor",
}

enum(string) FloatModifierType {
	Override = "override",
	Add = "add",
	Subtract = "subtract",
	Multiply = "multiply",
	Minimum = "minimum",
	Maximum = "maximum",
	AlphaBlend = "alpha_blend",
}

enum(string) ColorModifierType {
	Override = "override",
	Add = "add",
	Subtract = "subtract",
	Multiply = "multiply",
	AlphaBlend = "alpha_blend",
}
