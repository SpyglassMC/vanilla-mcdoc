use super::HeightmapType
use super::HeightProvider
use super::DecorationStep
use super::biome::MobCategory
use super::biome::SpawnerData

type StructureRef = (
	#[until="1.19"] #[id="worldgen/configured_structure_feature"] string |
	#[since="1.19"] #[id="worldgen/structure"] string |
	Structure |
)

dispatch minecraft:resource["worldgen/structure"] to struct Structure {
	type: (
		#[until="1.19"] #[id="worldgen/structure_feature"] string |
		#[since="1.19"] #[id="worldgen/structure_type"] string |
	),
	#[since="1.18.2"]
	biomes: (
		[#[id="worldgen/biome"] string] |
		#[id(registry="worldgen/biome",tags=allowed)] string |
	),
	/// The step when the structure generates.
	#[since="1.19"]
	step: DecorationStep,
	/// Whether to add extra terrain below the structure.
	#[since="1.18.2"] #[until="1.19"]
	adapt_noise?: boolean,
	#[since="1.19"]
	terrain_adaptation?: TerrainAdaptation,
	#[since="1.18.2"]
	spawn_overrides: struct {
		[MobCategory]: SpawnOverride,
	},
	#[until="1.19"]
	config: minecraft:structure_config[[type]],
	#[since="1.19"]
	...minecraft:structure_config[[type]],
}

enum(string) TerrainAdaptation {
	None = "none",
	BeardThin = "beard_thin",
	BeardBox = "beard_box",
	Bury = "bury",
	Encapsulate = "encapsulate"
}

struct SpawnOverride {
	bounding_box: BoundingBox,
	spawns: [SpawnerData],
}

enum(string) BoundingBox {
	Piece = "piece",
	Full = "full",
}

dispatch minecraft:jigsaw_max_distance_from_center[%none,%unknown] to int @ 1..128

dispatch minecraft:jigsaw_max_distance_from_center[beard_thin,beard_box,bury] to int @ 1..116

dispatch minecraft:structure_config[buried_treasure] to struct BuriedTreasure {
	#[until="1.19"]
	probability: float @ 0..1,
}

dispatch minecraft:structure_config[mineshaft] to struct Mineshaft {
	#[until="1.19"]
	type: MineshaftType,
	#[since="1.19"]
	mineshaft_type: MineshaftType,
	#[until="1.19"]
	probability: float @ 0..1,
}

enum(string) MineshaftType {
	Normal = "normal",
	Mesa = "mesa",
}

#[since="1.17"]
dispatch minecraft:structure_config[nether_fossil] to struct NetherFossil {
	height: HeightProvider,
}

dispatch minecraft:structure_config[ocean_ruin] to struct OceanRuin {
	biome_temp: BiomeTemperature,
	large_probability: float @ 0..1,
	cluster_probability: float @ 0..1,
}

enum(string) BiomeTemperature {
	Cold = "cold",
	Warm = "warm",
}

dispatch minecraft:structure_config[ruined_portal] to struct RuinedPortal {
	#[until="1.19"]
	portal_type: RuinedPortalType,
	#[since="1.19"]
	setups: [RuinedPortalSetup],
}

enum(string) RuinedPortalType {
	Standard = "standard",
	Desert = "desert",
	Jungle = "jungle",
	Mountain = "mountain",
	Nether = "nether",
	Ocean = "ocean",
	Swamp = "swamp",
}

struct RuinedPortalSetup {
	placement: RuinedPortalPlacement,
	air_pocket_probability: float @ 0..1,
	mossiness: float @ 0..1,
	overgrown: boolean,
	vines: boolean,
	can_be_cold: boolean,
	replace_with_blackstone: boolean,
	weight: float @ 0..,
}

enum(string) RuinedPortalPlacement {
	OnLandSurface = "on_land_surface",
	PartlyBuried = "partly_buried",
	OnOceanFloor = "on_ocean_floor",
	InMountain = "in_mountain",
	Underground = "underground",
	InNether = "in_nether",
}

dispatch minecraft:structure_config[shipwreck] to struct Shipwreck {
	is_beached?: boolean,
}

dispatch minecraft:structure_config[
	bastion_remnant,
	jigsaw,
	pillager_outpost,
	villager,
] to struct Jigsaw {
	start_pool: #[id="worldgen/template_pool"] string,
	size: (
		#[until="1.20.3"]
		int @ 0..7 |
		#[since="1.20.3"]
		int @ 1..20
	),
	#[since="1.19"]
	...struct {
		start_height: HeightProvider,
		start_jigsaw_name?: #[id] string,
		project_start_to_heightmap?: HeightmapType,
		max_distance_from_center: minecraft:jigsaw_max_distance_from_center[[terrain_adaptation]],
		use_expansion_hack: boolean,
	},
	#[since="1.20.3"]
	pool_aliases?: [PoolAlias],
	#[since="1.21"]
	...struct {
		dimension_padding?: (
			int @ 0.. |
			struct {
				bottom?: int @ 0..,
				top?: int @ 0..,
			}
		),
		liquid_settings?: LiquidSettings,
	},
}

enum(string) LiquidSettings {
	ApplyWaterlogging = "apply_waterlogging",
	IgnoreWaterlogging = "ignore_waterlogging",
}

type PoolAlias = struct {
	type: #[id="worldgen/pool_alias_binding"] string,
	...minecraft:worldgen/pool_alias_binding[[type]],
}

dispatch minecraft:worldgen/pool_alias_binding[direct] to struct DirectPoolAlias {
	alias: #[id] string,
	target: #[id="worldgen/template_pool"] string,
}

dispatch minecraft:worldgen/pool_alias_binding[random] to struct RandomPoolAlias {
	alias: #[id] string,
	targets: [struct {
		weight: int,
		data: #[id="worldgen/template_pool"] string,
	}],
}

dispatch minecraft:worldgen/pool_alias_binding[random_group] to struct RandomGroupPoolAlias {
	groups: [struct {
		weight: int,
		data: [PoolAlias],
	}],
}
