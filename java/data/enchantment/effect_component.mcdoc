use ::java::data::loot::LootCondition
use ::java::data::util::SoundEventRef
use super::effect::ValueEffect
use super::effect::EntityEffect
use super::effect::LocationBasedEffect
use super::effect::AttributeEffect

struct EnchantmentEffectComponentMap {
	[#[id="enchantment_effect_component_type"] string]?: minecraft:effect_component[[%key]],
}

// TODO: handle the "location based effects" thing

struct DamageEnchantmentEffect {
	/// Predicate context: Damage Parameters.
	requirements?: (LootCondition | [LootCondition]),
	/// Determines armor effectiveness; `0.0` for no effect, `1.0` for full effect.
	effect: ValueEffect,
}

dispatch minecraft:effect_component[armor_effectiveness] to [DamageEnchantmentEffect]

dispatch minecraft:effect_component[attributes] to [AttributeEffect]

dispatch minecraft:effect_component[ammo_use] to [struct AmmoUseEnchantmentEffect {
	/// Predicate context: Item Parameters.
	requirements?: (LootCondition | [LootCondition]),
	/// Amount of ammunition being used up.
	effect: ValueEffect,
}]

dispatch minecraft:effect_component[block_experience] to [struct BlockExperienceEnchantmentEffect {
	/// Predicate context: Item Parameters.
	requirements?: (LootCondition | [LootCondition]),
	/// Amount of experience awarded.
	effect: ValueEffect,
}]

/// Each entry in the list represents the sounds at one level of the Enchantment, so the first entry represents the sounds used by a level 1 Enchantment.
dispatch minecraft:effect_component[crossbow_charge_sounds] to [struct CrossbowChargeSoundsEnchantmentEffect {
	/// Start of charging.
	start?: SoundEventRef,
	/// Middle of charging.
	mid?: SoundEventRef,
	/// End of charging.
	end?: SoundEventRef,
}]

/// Charge time of the Crossbow in seconds
dispatch minecraft:effect_component[crossbow_charge_time] to ValueEffect

dispatch minecraft:effect_component[damage] to [DamageEnchantmentEffect]

/// Complete damage immunity given the conditions are met.
dispatch minecraft:effect_component[damage_immunity] to [struct DamageImmunityEnchantmentEffect {
	/// Predicate context: Damage Parameters.
	requirements?: (LootCondition | [LootCondition]),
	/// Dummy value; this is a boolean effect.
	effect: struct {},
}]

dispatch minecraft:effect_component[damage_protection] to [struct DamageProtectionEnchantmentEffect {
	/// Predicate context: Damage Parameters.
	requirements?: (LootCondition | [LootCondition]),
	/// Amount of damage being absorbed; as "fake armor".
	effect: ValueEffect,
}]

/// Chance of equipment dropping when a target is killed by the owner of the Enchanted Item.
dispatch minecraft:effect_component[equipment_drops] to [struct EquipmentDropsEnchantmentEffect {
	/// Predicate context: Damage Parameters.
	requirements?: (LootCondition | [LootCondition]),
	/// Chance between `0.0` and `1.0` of an equipped piece dropping.
	effect: ValueEffect,
	/// Which subject needs to be enchanted for the effect to apply.
	enchanted: ("attacker" | "victim"),
}]

dispatch minecraft:effect_component[fishing_luck_bonus] to [struct FishingLuckBonusEnchantmentEffect {
	/// Predicate context: Entity Parameters.
	///
	/// `this` is the player fishing.
	requirements?: (LootCondition | [LootCondition]),
	/// Amount of luck being added.
	effect: ValueEffect,
}]

dispatch minecraft:effect_component[fishing_time_reduction] to [struct FishingTimeReductionEnchantmentEffect {
	/// Predicate context: Entity Parameters.
	///
	/// `this` is the player fishing.
	requirements?: (LootCondition | [LootCondition]),
	/// Time reduction in seconds (higher values mean less time until a fish bites).
	effect: ValueEffect,
}]

dispatch minecraft:effect_component[hit_block] to [struct HitBlockEnchantmentEffect {
	/// Predicate context: Entity Parameters.
	///
	/// `this` is the entity hitting the Block, unless during a projectile attack, then, `this` is the projectile.
	requirements?: (LootCondition | [LootCondition]),
	/// On the entity hitting the Block
	effect: EntityEffect,
}]

dispatch minecraft:effect_component[knockback] to [struct KnockbackEnchantmentEffect {
	/// Predicate context: Damage Parameters.
	requirements?: (LootCondition | [LootCondition]),
	/// Amount of knockback being applied.
	effect: ValueEffect,
}]

dispatch minecraft:effect_component[item_damage] to [struct ItemDamageEnchantmentEffect {
	/// Predicate context: Item Parameters.
	requirements?: (LootCondition | [LootCondition]),
	/// Amount of damage being dealt to the item.
	effect: ValueEffect,
}]

dispatch minecraft:effect_component[location_changed] to [struct LocationChangedEnchantmentEffect {
	/// Predicate context: Location Parameters.
	requirements?: (LootCondition | [LootCondition]),
	/// On the entity changing location.
	effect: LocationBasedEffect,
}]

dispatch minecraft:effect_component[mob_experience] to [struct MobExperienceEnchantmentEffect {
	/// Predicate context: Entity Parameters.
	///
	/// `this` is the killed mob.
	requirements?: (LootCondition | [LootCondition]),
	/// Amount of experience awarded.
	effect: ValueEffect,
}]

dispatch minecraft:effect_component[post_attack] to [struct PostAttackEnchantmentEffect {
	/// Predicate context: Damage Parameters.
	requirements?: (LootCondition | [LootCondition]),
	/// Examples:
	/// - A Fire Aspect Enchant would specify that when the attacker is enchanted, the ignite effect is applied, and the affected party is the victim.
	/// - Thorns would specify that when the victim is enchanted, the damage_entity effect is applied, and the affected party is the attacker.
	effect: EntityEffect,
	enchanted: AttackTarget,
	affected: AttackTarget,
}]

enum(string) AttackTarget {
	Attacker = "attacker",
	DamagingEntity = "damaging_entity",
	Victim = "victim",
}

#[since="1.21.11"]
dispatch minecraft:effect_component[post_piercing_attack] to [struct PostPiercingAttackEnchantmentEffect {
	/// Predicate context: Damage Parameters.
	requirements?: (LootCondition | [LootCondition]),
	/// The effect to apply on attacker.
	effect: EntityEffect,
}]

/// Prevents the enchanted item from being unequipped from an armor slot.
dispatch minecraft:effect_component[prevent_armor_change] to struct {}

/// Prevents the enchanted item from being dropped when the owner dies.
dispatch minecraft:effect_component[prevent_equipment_drop] to struct {}

dispatch minecraft:effect_component[projectile_count] to [struct ProjectileCountEnchantmentEffect {
	/// Predicate context: Entity Parameters.
	///
	/// `this` is the entity drawing the weapon.
	requirements?: (LootCondition | [LootCondition]),
	/// Amount of projectiles being loaded/drawn.
	effect: ValueEffect,
}]

/// Controls the amount of entities a shot projectile will pierce through before despawning.
dispatch minecraft:effect_component[projectile_piercing] to [struct ProjectilePiercingEnchantmentEffect {
	/// Predicate context: Item Parameters.
	///
	/// Tool is the ammunition item.
	requirements?: (LootCondition | [LootCondition]),
	/// Amount of entities the projectile will pierce through before despawning.
	effect: ValueEffect,
}]

/// Spread of arrows from a projectile weapon firing multiple projectiles
dispatch minecraft:effect_component[projectile_spread] to [struct ProjectileSpreadEnchantmentEffect {
	/// Predicate context: Entity Parameters.
	///
	/// `this` is the entity shooting the projectile.
	requirements?: (LootCondition | [LootCondition]),
	/// Maximum spread of projectiles measured in degrees from the aim line.
	effect: ValueEffect,
}]

/// Effect(s) to apply to projectile entities that have been spawned when firing a projectile weapon.
dispatch minecraft:effect_component[projectile_spawned] to [struct ProjectileSpawnedEnchantmentEffect {
	/// Predicate context: Entity Parameters.
	///
	/// `this` is the newly spawned projectile.
	requirements?: (LootCondition | [LootCondition]),
	/// On the newly spawned projectile.
	effect: EntityEffect,
}]

/// Repairs the enchanted item with experience points picked up by the player.
dispatch minecraft:effect_component[repair_with_xp] to [struct RepairWithXpEnchantmentEffect {
	/// Predicate context: Item Parameters.
	requirements?: (LootCondition | [LootCondition]),
	/// Amount of durability increase per experience point, `mending` uses 2x.
	effect: ValueEffect,
}]

/// Amount of damage caused by a Mace's smash attack per block fallen.
dispatch minecraft:effect_component[smash_damage_per_block_fallen] to [struct SmashDamagePerBlockFallenEnchantmentEffect {
	/// Predicate context: Damage Parameters.
	requirements?: (LootCondition | [LootCondition]),
	/// Amount of damage dealt per block fallen.
	effect: ValueEffect,
}]

dispatch minecraft:effect_component[tick] to [struct TickEnchantmentEffect {
	/// Predicate context: Entity Parameters.
	///
	/// `this` is the entity with the Enchanted Item.
	requirements?: (LootCondition | [LootCondition]),
	/// On every tick. Performance recommendation: don't use with `run_function` unless necessary.
	effect: EntityEffect,
}]

dispatch minecraft:effect_component[trident_return_acceleration] to [struct TridentReturnAccelerationEnchantmentEffect {
	/// Predicate context: Entity Parameters.
	///
	/// `this` is the trident entity.
	requirements?: (LootCondition | [LootCondition]),
	/// Amount of acceleration applied to the returning trident.
	effect: ValueEffect,
}]

/// Amount of strength applied to the spin attack.
///
/// Any resulting value greater than 0 converts the Trident to be a spin attack weapon instead of a thrown attack.
dispatch minecraft:effect_component[trident_spin_attack_strength] to ValueEffect

/// Each entry in the list represents the sound at one level of the Enchantment, so the first entry represents the sound used by a level 1 Enchantment.
dispatch minecraft:effect_component[trident_sound] to [SoundEventRef]
