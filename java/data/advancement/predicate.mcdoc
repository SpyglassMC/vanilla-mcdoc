use ::java::server::world::item::ItemBase
use ::java::server::util::inventory::EquipmentSlot
use super::super::util::MinMaxBounds

struct ItemPredicate {
	#[until="1.20.5"]
	item?: #[id=item] string,
	#[until="1.20.5"]
	tag?: #[id(registry=item,tags=implicit)] string,
	#[since="1.20.5"]
	items?: #[id(registry=item,tags=allowed)] string | [#[id=item] string],
	#[since="1.20.5"]
	count?: MinMaxBounds<int>,
	durability?: MinMaxBounds<int>,
	#[until="1.20.5"]
	potion?: #[id=potion] string,
	#[since="1.20.5"]
	potions?: #[id(registry=potion,tags=allowed)] string | [#[id=potion] string],
	enchantments?: [EnchantmentPredicate],
	/// Checks the `StoredEnchantments` nbt tag (used by enchanted books).
	stored_enchantments?: [EnchantmentPredicate],
	#[until="1.20.5"]
	nbt?: #[nbt(registry=minecraft:item[[tag] | [item]])] string,
	#[since="1.20.5"]
	components?: minecraft:item[[items]],
	#[since="1.20.5"]
	custom_data?: #[nbt(registry=mcdoc:custom_item_data[[items]])] string,
}

struct EnchantmentPredicate {
	enchantment?: #[id=enchantment] string,
	levels?: MinMaxBounds<int>,
}

struct BlockPredicate {
	#[until="1.20.5"]
	block?: #[id=block] string,
	#[until="1.20.5"]
	tag?: #[id(registry=block,tags=implicit)] string,
	#[since="1.20.5"]
	blocks?: #[id(registry=block,tags=allowed)] string | [#[id=block] string],
	state?: mcdoc:block_states[[blocks] | [tag] | [block]],
	nbt?: #[nbt(registry=minecraft:block[[blocks] | [tag] | [block]])] string,
}

struct FluidPredicate {
	#[until="1.20.5"]
	fluid?: #[id=fluid] string,
	#[until="1.20.5"]
	tag?: #[id(registry=fluid,tags=implicit)] string,
	#[since="1.20.5"]
	fluids?: #[id(registry=fluid,tags=allowed)] string | [#[id=fluid] string],
	state?: struct {
		[string]: (MinMaxBounds<int> | boolean | string), // TODO
	},
}

struct LocationPredicate {
	position?: struct {
		x?: MinMaxBounds<float>,
		y?: MinMaxBounds<float>,
		z?: MinMaxBounds<float>,
	},
	#[until="1.20.5"]
	biome?: (
		#[until=1.16] #[id=biome] string |
		#[since=1.16] #[id="worldgen/biome"] string |
	),
	#[since="1.20.5"]
	biomes?: #[id="worldgen/biome",tags=allowed] string | [#[id="worldgen/biome"] string],
	#[until=1.19]
	feature?: (
		#[until="1.18.2"] string |
		#[since="1.18.2"] #[id="worldgen/configured_structure_feature"] string |
	),
	#[since=1.19,until="1.20.5"]
	structure?: #[id="worldgen/structure"] string,
	#[since="1.20.5"]
	structures?: #[id="worldgen/structure",tags=allowed] string | [#[id="worldgen/structure"] string],
	dimension?: #[id=dimension] string,
	/// Calculated using: `max(sky-darkening, block)`.
	light?: struct {
		light?: MinMaxBounds<int @ 0..15>,
	},
	block?: BlockPredicate,
	fluid?: FluidPredicate,
	/// Whether the block is above (5 blocks or less) a campfire or soul campfire.
	#[since=1.16]
	smokey?: boolean,
}

struct EntityPredicate {
	type?: (
		#[id(registry=entity_type,tags=allowed)] string |
		#[since="1.20.5"] [#[id=entity_type] string] |
	),
	#[since=1.19]
	type_specific?: TypeSpecificPredicate,
	team?: #[team] string,
	nbt?: #[nbt=EntityBase] string, // TODO
	location?: LocationPredicate,
	distance?: DistancePredicate,
	flags?: struct {
		is_on_fire?: boolean,
		is_sneaking?: boolean,
		is_sprinting?: boolean,
		is_swimming?: boolean,
		is_baby?: boolean,
	},
	equipment?: struct {
		[EquipmentSlot]: ItemPredicate,
	},
	#[until=1.19]
	player?: PlayerPredicate,
	#[since=1.16]
	vehicle?: EntityPredicate,
	#[since=1.16] #[until=1.19]
	targeted_entity?: EntityPredicate,
	#[since=1.16] #[until=1.19]
	fishing_hook?: FishingHookPredicate,
	#[since=1.17]
	lightning_bolt?: LightningBoltPredicate,
	#[until=1.19]
	catType?: string,
	effects?: struct {
		[#[id=mob_effect] string]: MobEffectPredicate,
	},
}

struct TypeSpecificPredicate {
	type: SpecificType,
	...minecraft:type_specific_predicate[[type]],
}

enum(string) SpecificType {
	Any = "any",
	Cat = "cat",
	FishingHook = "fishing_hook",
	Frog = "frog",
	Lightning = "lightning",
	Player = "player",
	Slime = "slime",
}

dispatch minecraft:type_specific_predicate[cat] to struct CatPredicate {
	variant?: #[id=cat_variant] string,
}

dispatch minecraft:type_specific_predicate[fishing_hook] to struct FishingHookPredicate {
	in_open_water?: boolean,
}

dispatch minecraft:type_specific_predicate[frog] to struct FrogPredicate {
	variant?: #[id=frog_variant] string,
}

dispatch minecraft:type_specific_predicate[lightning] to struct LightningBoltPredicate {
	blocks_set_on_fire?: MinMaxBounds<int>,
	entity_struck?: EntityPredicate,
}

dispatch minecraft:type_specific_predicate[player] to struct PlayerPredicate {
	advancements?: struct {
		[#[id=advancement] string]: (boolean | struct {
			[string]: boolean,
		}),
	},
	gamemode?: GameMode,
	/// Experience/XP level.
	level?: MinMaxBounds<int>,
	recipes?: struct {
		[#[id=recipe] string]: boolean,
	},
	stats?: [StatisticPredicate],
	looking_at?: EntityPredicate,
}

dispatch minecraft:type_specific_predicate[slime] to struct SlimePredicate {
	size?: MinMaxBounds<int>,
}

struct DistancePredicate {
	x?: MinMaxBounds<float>,
	y?: MinMaxBounds<float>,
	z?: MinMaxBounds<float>,
	absolute?: MinMaxBounds<float>,
	horizontal?: MinMaxBounds<float>,
}

enum(string) GameMode {
	Survival = "survival",
	Creative = "creative",
	Adventure = "adventure",
	Spectator = "spectator",
}

struct StatisticPredicate {
	type: #[id=stat_type] string,
	stat: minecraft:statistic_type[[type]],
	value: MinMaxBounds<int>,
}

dispatch minecraft:statistic_type[%unknown] to string

dispatch minecraft:statistic_type[mined] to #[id=block] string

dispatch minecraft:statistic_type[crafted,used,broken,picked_up,dropped] to #[id=item] string

dispatch minecraft:statistic_type[killed,killed_by] to #[id=entity_type] string

dispatch minecraft:statistic_type[custom] to #[id=custom_stat] string

struct MobEffectPredicate {
	amplifier?: MinMaxBounds<int>,
	duration?: MinMaxBounds<int>,
	ambient?: boolean,
	visible?: boolean,
}

struct DamagePredicate {
	/// Amount of incoming damage before damage reduction.
	dealt?: MinMaxBounds<float>,
	/// Amount of incoming damage after damage reduction.
	taken?: MinMaxBounds<float>,
	/// Whether the damage was successfully blocked.
	blocked?: boolean,
	/// Source of the damage (eg: the skeleton that shot the arrow).
	source_entity?: EntityPredicate,
	#[until="1.19.4"]
	type?: DamageSourcePredicate,
	/// Damage type group tags that the damage type is in.
	#[since="1.19.4"]
	tags?: DamageTypeSource[], 
}

struct DamageSourcePredicate {
	is_explosion?: boolean,
	is_fire?: boolean,
	is_magic?: boolean,
	is_projectile?: boolean,
	is_lightning?: boolean,
	bypasses_armor?: boolean,
	bypasses_invulnerability?: boolean,
	bypasses_magic?: boolean,
	source_entity?: EntityPredicate,
	direct_entity?: EntityPredicate,
}

struct DamageTypeSource {
	id: #[id(registry=damage_type,tags=implicit)] string,
	/// Whether the damage is expected to have or not have the tag for the predicate to match.
	expected: boolean,
}