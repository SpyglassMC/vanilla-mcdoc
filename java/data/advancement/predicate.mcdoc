use ::java::server::util::inventory::EquipmentSlot
use ::java::server::util::attribute::AttributeOperation
use ::java::server::util::attribute::AttributeSlot
use ::java::server::util::firework::FireworkShape
use ::java::server::util::text::Text
use ::java::server::util::Filterable
use ::java::server::util::color::ColorString
use ::java::server::world::item::DataComponentPredicate
use ::java::server::world::item::CustomData
use ::java::server::world::entity::boat::BoatType
use ::java::server::world::entity::mob::breedable::axolotl::AxolotlVariant
use ::java::server::world::entity::mob::breedable::fox::FoxType
use ::java::server::world::entity::mob::breedable::horse::HorseVariant
use ::java::server::world::entity::mob::breedable::llama::LlamaVariant
use ::java::server::world::entity::mob::breedable::mooshroom::MooshroomType
use ::java::server::world::entity::mob::breedable::rabbit::RabbitVariant
use ::java::server::world::entity::mob::breedable::tamable::ParrotVariant
use ::java::server::world::entity::mob::fish::TropicalFishPattern
use super::super::util::MinMaxBounds

type ItemPredicate = (
	#[until="1.20.5"] struct PreComponentsItemPredicate {
		#[until="1.17"]
		item?: #[id="item"] string,
		#[since="1.17"]
		items?: [#[id="item"] string],
		tag?: #[id(registry="item",tags="implicit")] string,
		durability?: MinMaxBounds<int>,
		potion?: #[id="potion"] string,
		enchantments?: [EnchantmentPredicate],
		stored_enchantments?: [EnchantmentPredicate],
		nbt?: #[nbt=minecraft:item[[item]]] string,
	} |
	#[since="1.20.5"] struct PostComponentsItemPredicate {
		items?: (#[id(registry="item",tags="allowed")] string | [#[id="item"] string]),
		count?: MinMaxBounds<int>,
		components?: DataComponentPredicate,
		predicates?: ItemSubPredicate,
	} |
)

struct ItemSubPredicate {
	[(
		#[until="1.21.5"] #[id="item_sub_predicate_type"] string |
		#[since="1.21.5"] #[id="data_component_predicate_type"] string |
	)]: minecraft:data_component_predicate[[%key]],
}

dispatch minecraft:data_component_predicate[attribute_modifiers] to struct AttributeModifiersPredicate {
	modifiers?: CollectionPredicate<AttributeModifiersPredicateEntry>,
}

struct AttributeModifiersPredicateEntry {
	attribute?: (#[id(registry="attribute",tags="allowed")] string | [#[id="attribute"] string] ),
	id?: #[id="attribute_modifier"] string,
	amount?: MinMaxBounds<double>,
	operation?: AttributeOperation,
	slot?: AttributeSlot,
}

dispatch minecraft:data_component_predicate[bundle_contents] to struct BundleContentsPredicate {
	items?: CollectionPredicate<ItemPredicate>,
}

dispatch minecraft:data_component_predicate[container] to struct ContainerPredicate {
	items?: CollectionPredicate<ItemPredicate>,
}

dispatch minecraft:data_component_predicate[custom_data] to CustomData

dispatch minecraft:data_component_predicate[damage] to struct ItemDamagePredicate {
	damage?: MinMaxBounds<int>,
	durability?: MinMaxBounds<int>,
}

dispatch minecraft:data_component_predicate[enchantments, stored_enchantments] to [EnchantmentPredicate]

dispatch minecraft:data_component_predicate[fireworks] to struct FireworksPredicate {
	explosions?: CollectionPredicate<FireworkExplosionPredicate>,
	flight_duration?: MinMaxBounds<int>,
}

dispatch minecraft:data_component_predicate[firework_explosion] to struct FireworkExplosionPredicate {
	shape?: FireworkShape,
	has_twinkle?: boolean,
	has_trail?: boolean,
}

dispatch minecraft:data_component_predicate[jukebox_playable] to struct JukeboxPlayablePredicate {
	song?: (#[id(registry="jukebox_song",tags="allowed")] string | [#[id="jukebox_song"] string]),
}

dispatch minecraft:data_component_predicate[potion_contents] to (#[id(registry="potion",tags="allowed")] string | [#[id="potion"] string])

dispatch minecraft:data_component_predicate[trim] to struct TrimPredicate {
	material?: (#[id(registry="trim_material",tags="allowed")] string | [#[id="trim_material"] string]),
	pattern?: (#[id(registry="trim_pattern",tags="allowed")] string | [#[id="trim_pattern"] string]),
}

dispatch minecraft:data_component_predicate[writable_book_content] to struct WritableBookPredicate {
	/// Matches the raw text, instead of filtered.
	pages?: CollectionPredicate<string>,
}

dispatch minecraft:data_component_predicate[written_book_content] to struct WrittenBookPredicate {
	/// Matches the raw text, instead of filtered.
	pages?: CollectionPredicate<Text>,
	author?: string,
	title?: string,
	generation?: MinMaxBounds<int>,
	resolved?: boolean,
}

struct EnchantmentPredicate {
	#[until="1.21"]
	enchantment?: #[id="enchantment"] string,
	#[since="1.21"]
	enchantments?: (#[id(registry="enchantment",tags="allowed")] string | [#[id="enchantment"] string]),
	levels?: MinMaxBounds<int>,
}

struct BlockPredicate {
	#[until="1.17"]
	block?: #[id="block"] string,
	#[since="1.17"]
	blocks?: (
		#[since="1.20.5"] #[id(registry="block",tags="allowed")] string |
		[#[id="block"] string] |
	),
	#[until="1.20.5"]
	tag?: #[id(registry="block",tags="implicit")] string,
	state?: mcdoc:block_states[[blocks]],
	nbt?: #[nbt=minecraft:block[[blocks]]] string,
	/// Match exact data component values on the block entity.
	#[since="1.21.5"]
	components?: DataComponentPredicate,
	/// Test data component values on the block entity.
	#[since="1.21.5"]
	predicates?: ItemSubPredicate,
}

struct FluidPredicate {
	#[until="1.20.5"]
	fluid?: #[id="fluid"] string,
	#[until="1.20.5"]
	tag?: #[id(registry="fluid",tags="implicit")] string,
	#[since="1.20.5"]
	fluids?: (#[id(registry="fluid",tags="allowed")] string | [#[id="fluid"] string]),
	// TODO (mcdoc:fluid_states[[fluids]])
	state?: struct FluidPredicateState {
		[string]: (MinMaxBounds<int> | boolean | string),
	},
}

struct LocationPredicate {
	position?: struct LocationPredicatePosition {
		x?: MinMaxBounds<float>,
		y?: MinMaxBounds<float>,
		z?: MinMaxBounds<float>,
	},
	#[until="1.20.5"]
	biome?: (
		#[until="1.16"] #[id="biome"] string |
		#[since="1.16"] #[id="worldgen/biome"] string |
	),
	#[since="1.20.5"]
	biomes?: (#[id=(registry="worldgen/biome",tags=allowed)] string | [#[id="worldgen/biome"] string]),
	#[until="1.19"]
	feature?: (
		#[until="1.18.2"] string |
		#[since="1.18.2"] #[id="worldgen/configured_structure_feature"] string |
	),
	#[since="1.19"] #[until="1.20.5"]
	structure?: #[id="worldgen/structure"] string,
	#[since="1.20.5"]
	structures?: (#[id=(registry="worldgen/structure",tags=allowed)] string | [#[id="worldgen/structure"] string]),
	dimension?: #[id="dimension"] string,
	/// Calculated using: `max(sky-darkening, block)`.
	light?: struct LocationPredicateLight {
		light?: MinMaxBounds<int @ 0..15>, // :mojank:
	},
	block?: BlockPredicate,
	fluid?: FluidPredicate,
	/// Whether the block is above (5 blocks or less) a campfire or soul campfire.
	#[since="1.16"]
	smokey?: boolean,
	/// Whether the location has the maximum possible level of sky light
	#[since="1.21"]
	can_see_sky?: boolean,
}

struct MovementPredicate {
	x?: MinMaxBounds<float>,
	y?: MinMaxBounds<float>,
	z?: MinMaxBounds<float>,
	speed?: MinMaxBounds<float>,
	horizontal_speed?: MinMaxBounds<float>,
	vertical_speed?: MinMaxBounds<float>,
	fall_distance?: MinMaxBounds<float>,
}

struct EntityPredicate {
	type?: (
		#[id(registry="entity_type",tags="allowed")] string |
		#[since="1.20.5"] [#[id="entity_type"] string] |
	),
	#[since="1.19"]
	type_specific?: EntitySubPredicate,
	team?: #[team] string,
	nbt?: #[nbt=minecraft:entity[[type]]] string,
	location?: LocationPredicate,
	distance?: DistancePredicate,
	flags?: EntityFlagsPredicate,
	equipment?: struct EntityEquipment {
		[EquipmentSlot]: ItemPredicate,
	},
	#[until="1.19"]
	player?: PlayerPredicate,
	#[since="1.16"]
	vehicle?: EntityPredicate,
	#[since="1.17"]
	passenger?: EntityPredicate,
	#[since="1.17"]
	stepping_on?: LocationPredicate,
	/// The entity that a mob's AI/aggro is targeting.
	#[since="1.16"]
	targeted_entity?: EntityPredicate,
	#[since="1.16"] #[until="1.19"]
	fishing_hook?: FishingHookPredicate,
	#[since="1.17"] #[until="1.19"]
	lightning_bolt?: LightningBoltPredicate,
	#[until="1.19"]
	catType?: string,
	effects?: struct EntityEffects {
		[#[id="mob_effect"] string]: MobEffectPredicate,
	},
	#[since="1.20.5"]
	slots?: struct EntityInventorySlots {
		[#[item_slots] string]: ItemPredicate,
	},
	#[since="1.21"]
	movement?: MovementPredicate,
	/// True every `n` ticks of an entity's lifetime.
	#[since="1.21"]
	periodic_tick?: int @ 1..,
	/// Whether the block at most 0.5 blocks below the entity is present which can affect its movement.
	#[since="1.21"]
	movement_affected_by?: LocationPredicate,
	/// Match exact data component values on the entity.
	#[since="1.21.5"]
	components?: DataComponentPredicate,
	/// Test data component values on the entity.
	#[since="1.21.5"]
	predicates?: ItemSubPredicate,
}

struct EntityFlagsPredicate {
	is_on_fire?: boolean,
	is_sneaking?: boolean,
	is_sprinting?: boolean,
	is_swimming?: boolean,
	is_baby?: boolean,
	#[since="1.21"]
	is_on_ground?: boolean,
	#[since="1.21"]
	is_flying?: boolean,
}

struct EntitySubPredicate {
	type: (
		#[until="1.20.5"] #[id] SpecificType |
		#[since="1.20.5"] #[id="entity_sub_predicate_type"] string
	),
	...minecraft:entity_sub_predicate[[type]],
}

#[until="1.20.5"]
enum(string) SpecificType {
	Any = "any",
	#[since="1.19.3"] Axolotl = "axolotl",
	#[since="1.19.3"] Boat = "boat", 
	Cat = "cat",
	FishingHook = "fishing_hook",
	#[since="1.19.3"] Fox = "fox",
	Frog = "frog",
	#[since="1.19.3"] Horse = "horse",
	Lightning = "lightning",
	#[since="1.19.3"] Llama = "llama",
	#[since="1.19.3"] Mooshroom = "mooshroom",
	#[since="1.19.3"] Painting = "painting",
	#[since="1.19.3"] Parrot = "parrot",
	Player = "player",
	#[since="1.19.3"] Rabbit = "rabbit",
	Slime = "slime",
	#[since="1.19.3"] TropicalFish = "tropical_fish",
	#[since="1.19.3"] Villager = "villager",
}

#[until="1.21.5"]
dispatch minecraft:entity_sub_predicate[axolotl] to struct AxolotlPredicate {
	variant: AxolotlVariant,
}

dispatch minecraft:entity_sub_predicate[boat] to struct BoatPredicate {
	variant: BoatType,
}

#[until="1.21.5"]
dispatch minecraft:entity_sub_predicate[cat] to struct CatPredicate {
	variant: (
		#[until="1.20.5"] #[id="cat_variant"] string |
		#[since="1.20.5"] #[id(registry="cat_variant",tags="allowed")] string |
		#[since="1.20.5"] [#[id="cat_variant"] string] |
	),
}

dispatch minecraft:entity_sub_predicate[fishing_hook] to struct FishingHookPredicate {
	in_open_water?: boolean,
}

#[until="1.21.5"]
dispatch minecraft:entity_sub_predicate[fox] to struct FoxPredicate {
	variant: FoxType,
}

#[until="1.21.5"]
dispatch minecraft:entity_sub_predicate[frog] to struct FrogPredicate {
	variant: (
		#[until="1.20.5"] #[id="frog_variant"] string |
		#[since="1.20.5"] #[id(registry="frog_variant",tags="allowed")] string |
		#[since="1.20.5"] [#[id="frog_variant"] string] |
	),
}

#[until="1.21.5"]
dispatch minecraft:entity_sub_predicate[horse] to struct HorsePredicate {
	variant: HorseVariant,
}

dispatch minecraft:entity_sub_predicate[lightning] to struct LightningBoltPredicate {
	blocks_set_on_fire?: MinMaxBounds<int>,
	entity_struck?: EntityPredicate,
}

#[until="1.21.5"]
dispatch minecraft:entity_sub_predicate[llama] to struct LlamaPredicate {
	variant: LlamaVariant,
}

#[until="1.21.5"]
dispatch minecraft:entity_sub_predicate[mooshroom] to struct MooshroomPredicate {
	variant: MooshroomType,
}

#[until="1.21.5"]
dispatch minecraft:entity_sub_predicate[painting] to struct PaintingPredicate {
	variant: (
		#[until="1.20.5"] #[id="painting_variant"] string |
		#[since="1.20.5"] #[id(registry="painting_variant",tags="allowed")] string |
		#[since="1.20.5"] [#[id="painting_variant"] string] |
	),
}

#[until="1.21.5"]
dispatch minecraft:entity_sub_predicate[parrot] to struct ParrotPredicate {
	variant: ParrotVariant,
}

dispatch minecraft:entity_sub_predicate[player] to struct PlayerPredicate {
	advancements?: struct PlayerAdvancements {
		[#[id="advancement"] string]: (boolean | struct PlayerAdvancementCriteria {
			[string]: boolean, // TODO: This should use `#[criterion]`, but it's not supported yet.
		}),
	},
	gamemode?: (
		#[until="1.21"] GameMode |
		#[since="1.21"] [GameMode] |
	),
	/// Experience/XP level.
	level?: MinMaxBounds<int>,
	recipes?: struct PlayerRecipes {
		[#[id="recipe"] string]: boolean,
	},
	stats?: [StatisticPredicate],
	looking_at?: EntityPredicate,
	/// Checks the movement keys of the player.
	#[since="1.21.2"]
	input?: struct InputPredicate {
		forward?: boolean,
		backward?: boolean,
		left?: boolean,
		right?: boolean,
		jump?: boolean,
		sneak?: boolean,
		sprint?: boolean,
	},
}

#[until="1.21.5"]
dispatch minecraft:entity_sub_predicate[rabbit] to struct RabbitPredicate {
	variant: RabbitVariant,
}

dispatch minecraft:entity_sub_predicate[raider] to struct RaiderPredicate {
	has_raid?: boolean,
	is_captain?: boolean,
}

dispatch minecraft:entity_sub_predicate[slime] to struct SlimePredicate {
	size?: MinMaxBounds<int>,
}

#[until="1.21.5"]
dispatch minecraft:entity_sub_predicate[salmon] to struct SalmonPredicate {
	variant?: SalmonVariant,
}

enum(string) SalmonVariant {
	Small = "small",
	Medium = "medium",
	Large = "large",
}

dispatch minecraft:entity_sub_predicate[sheep] to struct SheepPredicate {
	sheared?: boolean,
	#[until="1.21.5"]
	color?: ColorString,
}

#[until="1.21.5"]
dispatch minecraft:entity_sub_predicate[tropical_fish] to struct TropicalFishPredicate {
	/// The pattern of the tropical fish.
	variant: TropicalFishPattern,
}

#[until="1.21.5"]
dispatch minecraft:entity_sub_predicate[villager] to struct VillagerPredicate {
	variant: #[id="villager_type"] string,
}

#[until="1.21.5"]
dispatch minecraft:entity_sub_predicate[wolf] to struct WolfPredicate {
	variant: (#[id(registry="wolf_variant",tags="allowed")] string | [#[id="wolf_variant"] string]),
}

struct DistancePredicate {
	x?: MinMaxBounds<float>,
	y?: MinMaxBounds<float>,
	z?: MinMaxBounds<float>,
	absolute?: MinMaxBounds<float>,
	horizontal?: MinMaxBounds<float>,
}

enum(string) GameMode {
	Survival = "survival",
	Creative = "creative",
	Adventure = "adventure",
	Spectator = "spectator",
}

struct StatisticPredicate {
	type: #[id="stat_type"] string,
	stat: minecraft:statistic_type[[type]],
	value: MinMaxBounds<int>,
}

dispatch minecraft:statistic_type[%unknown] to string

dispatch minecraft:statistic_type[mined] to #[id="block"] string

dispatch minecraft:statistic_type[crafted,used,broken,picked_up,dropped] to #[id="item"] string

dispatch minecraft:statistic_type[killed,killed_by] to #[id="entity_type"] string

dispatch minecraft:statistic_type[custom] to #[id="custom_stat"] string

struct MobEffectPredicate {
	amplifier?: MinMaxBounds<int>,
	duration?: MinMaxBounds<int>,
	ambient?: boolean,
	visible?: boolean,
}

struct DamagePredicate {
	/// Amount of incoming damage before damage reduction.
	dealt?: MinMaxBounds<float>,
	/// Amount of incoming damage after damage reduction.
	taken?: MinMaxBounds<float>,
	/// Whether the damage was successfully blocked.
	blocked?: boolean,
	/// Source of the damage (eg: a skeleton shooting an arrow or player igniting tnt).
	source_entity?: EntityPredicate,
	/// The type of the damage source.
	type?: DamageSourcePredicate,
}

struct DamageSourcePredicate {
	#[until="1.19.4"]
	...struct DamageSourceFlags {
		is_explosion?: boolean,
		is_fire?: boolean,
		is_magic?: boolean,
		is_projectile?: boolean,
		is_lightning?: boolean,
		bypasses_armor?: boolean,
		bypasses_invulnerability?: boolean,
		bypasses_magic?: boolean,
	},
	/// Damage type tags that the damage type is in.
	#[since="1.19.4"]
	tags?: [DamageTagPredicate],
	/// Source of the damage (eg: a skeleton shooting an arrow or player igniting tnt).
	source_entity?: EntityPredicate,
	/// Direct entity responsible for the damage (eg: the arrow or tnt).
	direct_entity?: EntityPredicate,
	/// Damage is direct when its direct and source entities are the same.
	#[since="1.21"]
	is_direct?: boolean,
}

struct DamageTagPredicate {
	/// The damage type tag to check.
	id: #[id(registry="damage_type",tags="implicit")] string,
	/// Whether the damage is expected to have or not have the tag.
	expected: boolean,
}

type CollectionPredicate<P> = struct {
	/// A list of tests. For each test, there must be at least one entry whose contents match exactly.
	contains?: [P],
	count?: [struct CollectionCountPredicate {
		/// The contents an entry's text must match exactly.
		test: P,
		/// The number of entries that must match the test.
		count: MinMaxBounds<int>,
	}],
	/// When set, total number of entries in the this collection.
	size?: MinMaxBounds<int>,
}
