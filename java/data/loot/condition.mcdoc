use super::LootCondition
use super::EntityTarget
use super::super::enchantment::LevelBasedValue
use super::super::util::IntRange
use super::super::util::NumberProvider
use super::super::util::RandomValueBounds
use super::super::advancement::predicate::ItemPredicate
use super::super::advancement::predicate::EntityPredicate
use super::super::advancement::predicate::LocationPredicate
use super::super::advancement::predicate::DamageSourcePredicate

/// Whether any condition within a list passes.
#[until="1.20"]
dispatch minecraft:loot_condition[alternative] to struct Alternative {
	terms: [LootCondition],
}

#[since="1.20"]
dispatch minecraft:loot_condition[any_of] to struct AnyOf {
	/// Passes when any of these conditions pass.
	terms: [LootCondition],
}

#[since="1.20"]
dispatch minecraft:loot_condition[all_of] to struct AllOf {
	/// Passes when all of these conditions pass.
	terms: [LootCondition],
}

dispatch minecraft:loot_condition[block_state_property] to struct BlockStateProperty {
	block: #[id="block"] string,
	// TODO: was this optional in 1.20.2 and before? (wasn't codecified yet)
	properties?: mcdoc:block_states[[block]],
}

dispatch minecraft:loot_condition[damage_source_properties] to struct DamageSourceProperties {
	predicate: DamageSourcePredicate,
}

/// Requires the "Enchantment Active" parameter to exist in the context, which currently means it only works in Enchantment conditions.
dispatch minecraft:loot_condition[enchantment_active_check] to struct EnchantmentActiveCheck {
	active: boolean,
}

dispatch minecraft:loot_condition[entity_properties] to struct EntityProperties {
	entity: EntityTarget,
	predicate: EntityPredicate,
}

dispatch minecraft:loot_condition[entity_scores] to struct EntityScores {
	entity: EntityTarget,
	scores: struct {
		[#[objective] string]: (
			#[until="1.17"] RandomValueBounds |
			#[since="1.17"] IntRange |
		),
	},
}

/// Whether a condition does not pass.
dispatch minecraft:loot_condition[inverted] to struct Inverted {
	term: LootCondition,
}

dispatch minecraft:loot_condition[killed_by_player] to struct KilledByPlayer {
	inverse?: boolean,
}

dispatch minecraft:loot_condition[location_check] to struct LocationCheck {
	offsetX?: int,
	offsetY?: int,
	offsetZ?: int,
	predicate: LocationPredicate,
}

dispatch minecraft:loot_condition[match_tool] to struct MatchTool {
	predicate: ItemPredicate,
}

dispatch minecraft:loot_condition[random_chance] to struct RandomChance {
	chance: (
		#[until="1.21"] float @ 0..1 |
		#[since="1.21"] NumberProvider<float> |
	),
}

#[until="1.21"]
dispatch minecraft:loot_condition[random_chance_with_looting] to struct RandomChanceWithLooting {
	chance: float @ 0..1,
	/// Looting adjustment to the base success rate. Formula is `chance + (looting_level * looting_multiplier)` .
	looting_multiplier: float,
}

#[since="1.21"]
dispatch minecraft:loot_condition[random_chance_with_enchanted_bonus] to struct RandomChanceWithEnchantedBonus {
	unenchanted_chance: float @ 0..1,
	enchanted_chance: LevelBasedValue,
	enchantment: #[id="enchantment"] string,
}

/// Whether another predicate passes.
dispatch minecraft:loot_condition[reference] to struct Reference {
	/// A cyclic reference causes a parsing failure.
	name: #[id="predicate"] string,
}

dispatch minecraft:loot_condition[table_bonus] to struct TableBonus {
	enchantment: #[id="enchantment"] string,
	/// Probabilities for each enchantment level
	chances: [float @ 0..1],
}

dispatch minecraft:loot_condition[time_check] to struct TimeCheck {
	/// Check the current game tick.
	value: (
		#[until="1.17"] RandomValueBounds |
		#[since="1.17"] IntRange |
	),
	/// Game tick supplied to `value` check gets modulo-divided by this.
	/// For example, if set to 24000, `value` operates on a time period of days.
	period?: long,
}

#[since="1.17"]
dispatch minecraft:loot_condition[value_check] to struct ValueCheck {
	value: NumberProvider<int>,
	/// Passes when `value` is within this range.
	range: IntRange,
}

dispatch minecraft:loot_condition[weather_check] to struct WeatherCheck {
	raining?: boolean,
	thundering?: boolean,
}
