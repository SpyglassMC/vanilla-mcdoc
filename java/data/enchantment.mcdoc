use super::loot::LootCondition
use super::util::NumberProvider
use ::java::data::worldgen::feature::block_state_provider::BlockStateProvider
use ::java::data::worldgen::feature::block_predicate::BlockPredicate
use ::java::data::worldgen::FloatProvider
use ::java::server::util::text::Text
use ::java::server::util::particle::Particle
use ::java::server::util::attribute::AttributeSlot
use ::java::server::util::attribute::AttributeOperation

// TODO: handle the "location based effects" thing

#[since="1.21"]
dispatch minecraft:resource[enchantment] to struct Enchantment {
	description: Text,
	exclusive_set?: (
		#[id(registry="enchantment", tags="allowed")] string |
		[#[id="enchantment"] string] |
	),
	supported_items: (
		#[id(registry="item", tags="allowed")] string |
		[#[id="item"] string] |
	),
	/// Item types for which this Enchantment shows up in Enchanting Tables and on traded equipment.
	///
	/// Must be a subset of `supported_items`.
	primary_items?: (
		#[id(registry="item", tags="allowed")] string |
		[#[id="item"] string] |
	),
	/// How commonly the Enchantment appears, compared to the total combined `weight` of all available Enchantments.
	weight: int @ 0..,
	max_level: int @ 1..,
	/// Minimum experience cost.
	min_cost: LinearLevelValue<int>,
	/// Maximum experience cost.
	max_cost: LinearLevelValue<int>,
	/// Halved when an Enchantment is added to a book.
	/// The effective fee is multiplied by the level of the Enchantment.
	anvil_cost: int @ 0..,
	slots: [AttributeSlot],
	effects?: struct {
		[#[id="enchantment_effect_component_type"] string]?: minecraft:effect_component[[%key]],
	},
}

#[since="1.21"]
dispatch minecraft:resource[enchantment_provider] to struct EnchantmentProvider {
	type: #[id="enchantment_provider_type"] string,
	...minecraft:enchantment_provider[[type]],
}

struct LevelBasedValueMap {
	type: #[id="enchantment_level_based_value_type"] string,
	...minecraft:level_based_value[[type]],
}

type LevelBasedValue = (float | LevelBasedValueMap)

type LinearLevelValue<T> = (struct {
	/// Base cost at level 1.
	base: T,
	/// Cost increase per level above 1.
	per_level_above_first: T,
})

dispatch minecraft:level_based_value[linear] to LinearLevelValue<(int | float)>

/// Clamps another Level-Based Value
dispatch minecraft:level_based_value[clamped] to struct ClampedLevelValue {
	value: LevelBasedValue,
	min: float,
	max: float,
}

/// Fraction constructed from two other Level-Based Values
dispatch minecraft:level_based_value[fraction] to struct FractionLevelValue {
	numerator: LevelBasedValue,
	denominator: LevelBasedValue,
}

/// Value based on the level squared.
dispatch minecraft:level_based_value[levels_squared] to struct SquaredLevelValue {
	/// Added to the exponent; `0.0` for squared, `1.0` for cubed, `.5` for square root, `-4` for negpow(2), etc.
	added: float,
}

/// Maps a list of values to specific levels, and applies a fallback if the level is greater than the number of values supplied.
dispatch minecraft:level_based_value[lookup] to struct LookupLevelValue {
	/// Indexed by `level - 1` to apply, if present
	values: [LevelBasedValue] @ 1..,
	/// Applied if the level is greater than the size of `values`.
	fallback: LevelBasedValue,
}

struct ValueEffect {
	type: #[id="enchantment_value_effect_type"] string,
	...minecraft:value_effect[[type]],
}

dispatch minecraft:value_effect[add] to struct AddEffectValue {
	value: LevelBasedValue,
}

/// Runs a number of other Effect Values, in order
dispatch minecraft:value_effect[all_of] to struct AllOfEffectValue {
	effects: [ValueEffect] @ 1..,
}

dispatch minecraft:value_effect[multiply] to struct MultiplyEffectValue {
	/// Level-Based Value determining the factor to multiply in
	factor: LevelBasedValue,
}

/// Runs a Binomial series of checks, reducing the input value by 1 for every successful check.
dispatch minecraft:value_effect[remove_binomial] to struct ReduceBinomialEffectValue {
	/// Chance that an input value is dropped by 1.
	///
	/// The span is 0 to 1, with 0 being no chance to drop an input value and 1 dropping all input values.
	chance: LevelBasedValue,
}

dispatch minecraft:value_effect[set] to struct SetEffectValue {
	value: LevelBasedValue,
}

struct AttributeEffect {
	attribute: #[id="attribute"] string,
	/// Used when equipping and unequipping the item to identify which modifier to add or remove from the entity.
	///
	/// Postfixed with the slot name when the enchanted item is equipped.
	id: #[id="attribute_modifier"] string,
	/// Change in the attribute.
	amount: LevelBasedValue,
	/// The attribute operation to use.
	operation: AttributeOperation,
}

struct EntityEffect {
	type: #[id="enchantment_entity_effect_type"] string,
	...minecraft:entity_effect[[type]],
}

struct LocationBasedEffect {
	type: #[id="enchantment_location_based_effect_type"] string,
	...minecraft:location_based_effect[[type]]
}

/// Runs a list of other Entity Effects. Useful when a set of conditions should apply to more than one Entity Effect.
dispatch minecraft:entity_effect[all_of] to struct AllOfEntityEffect {
	effects: [EntityEffect] @ 1..,
}

/// Runs a list of other Entity Effects. Useful when a set of conditions should apply to more than one Entity Effect.
dispatch minecraft:location_based_effect[all_of] to struct AllOfLocationBasedEffect {
	effects: [LocationBasedEffect] @ 1..,
}

struct ApplyMobEffectEntityEffect {
	/// If multiple mob effects are specified, a random effect is selected.
	to_apply: (#[id(registry="mob_effect", tags="allowed")] string | [#[id="mob_effect"] string]),
	min_duration: LevelBasedValue,
	max_duration: LevelBasedValue,
	min_amplifier: LevelBasedValue,
	max_amplifier: LevelBasedValue,
}
dispatch minecraft:entity_effect[apply_mob_effect] to ApplyMobEffectEntityEffect
dispatch minecraft:location_based_effect[apply_mob_effect] to ApplyMobEffectEntityEffect

struct DamageEntityEffect {
	damage_type: #[id="damage_type"] string,
	/// Amount of damage is randomized within the given min/max span.
	min_damage: LevelBasedValue,
	max_damage: LevelBasedValue,
}
dispatch minecraft:entity_effect[damage_entity] to DamageEntityEffect
dispatch minecraft:location_based_effect[damage_entity] to DamageEntityEffect

/// Applies damage to the Enchanted Item. The damage is not applied to items held by players in creative mode.
struct DamageItemEffect {
	amount: LevelBasedValue
}
dispatch minecraft:entity_effect[damage_item] to DamageItemEffect
dispatch minecraft:location_based_effect[damage_item] to DamageItemEffect

struct ExplodeEntityEffect {
	/// Whether the explosion should be attributed to the user of the enchanted tool.
	attribute_to_user?: boolean,
	/// If omitted, no damage is dealt by the explosion.
	damage_type?: #[id="damage_type"] string,
	/// List of Blocks or hash-prefixed Block Tag specifying which blocks fully block the explosion.
	immune_blocks?: (#[id(registry="block", tags="allowed")] string | [#[id="block"] string]),
	// TODO: determine the default knockback
	/// If omitted, the default explosion knockback is applied.
	knockback_multiplier?: LevelBasedValue,
	/// Relative coordinates to offset the explosion by. Defaults to `[0, 0, 0]`.
	offset?: [int] @ 3,
	radius: LevelBasedValue,
	/// Whether fire is placed within the explosion radius.
	create_fire?: boolean,
	/// Whether the explosion has special effects on blocks.
	block_interaction: (enum(string) {
		/// No item drops or special behavior.
		None = "none",
		/// Drops items as if a block caused the explosion; `blockExplosionDropDecay` game rule applies.
		Block = "block",
		/// Drops items as if a mob caused the explosion; `mobExplosionDropDecay` game rule applies.
		Mob = "mob",
		/// Drops items as if TNT caused the explosion; `tntExplosionDropDecay` game rule applies.
		TNT = "tnt",
		/// Triggers redstone-activated blocks.
		Trigger = "trigger",
	}),
	small_particle: Particle,
	large_particle: Particle,
	sound: #[id="sound_event"] string,
}

dispatch minecraft:entity_effect[explode] to ExplodeEntityEffect
dispatch minecraft:location_based_effect[explode] to ExplodeEntityEffect

struct IgniteEntityEffect {
	/// Seconds the fire should last.
	duration: LevelBasedValue,
}

dispatch minecraft:entity_effect[ignite] to IgniteEntityEffect
dispatch minecraft:location_based_effect[ignite] to IgniteEntityEffect

struct PlaySoundEntityEffect {
	sound: #[id="sound_event"] string,
	volume: FloatProvider<float @ 0.00001..10.0>,
	pitch: FloatProvider<float @ 0.00001..2.0>,
}

dispatch minecraft:entity_effect[play_sound] to PlaySoundEntityEffect
dispatch minecraft:location_based_effect[play_sound] to PlaySoundEntityEffect

struct ReplaceBlockEntityEffect {
	block_state: BlockStateProvider,
	/// Relative coordinates to offset the placed block by. Defaults to `[0, 0, 0]`.
	offset?: [int] @ 3,
	/// If omitted, all block types are replaced.
	predicate?: BlockPredicate,
	/// Defaults to no game event dispatched.
	trigger_game_event?: #[id="game_event"] string,
}

dispatch minecraft:entity_effect[replace_block] to ReplaceBlockEntityEffect
dispatch minecraft:location_based_effect[replace_block] to ReplaceBlockEntityEffect

struct ReplaceDiskEntityEffect {
	...ReplaceBlockEntityEffect,
	/// Relative coordinates to offset the center of the cylinder by. Defaults to `[0, 0, 0]`.
	offset?: [int] @ 3,
	radius: LevelBasedValue,
	height: LevelBasedValue,
}

dispatch minecraft:entity_effect[replace_disk] to ReplaceDiskEntityEffect
dispatch minecraft:location_based_effect[replace_disk] to ReplaceDiskEntityEffect

/// Runs an mcfunction as/at the entity.
///
/// Because of function call overhead, this is only useful for events, not for continuous effects, `@e[tag=...]` in that case.
struct RunFunctionEntityEffect {
	function: #[id="function"] string,
}

dispatch minecraft:entity_effect[run_function] to RunFunctionEntityEffect
dispatch minecraft:location_based_effect[run_function] to RunFunctionEntityEffect

struct SetBlockPropertiesEntityEffect {
	properties: minecraft:data_component[block_state],
	/// Relative coordinates to offset the block by. Defaults to `[0, 0, 0]`.
	offset?: [int] @ 3,
	/// Defaults to no game event dispatched.
	trigger_game_event?: #[id="game_event"] string,
}

dispatch minecraft:entity_effect[set_block_properties] to SetBlockPropertiesEntityEffect
dispatch minecraft:location_based_effect[set_block_properties] to SetBlockPropertiesEntityEffect

struct SpawnParticlesEntityEffect {
	particle: Particle,
	horizontal_position: ParticlePosition,
	vertical_position: ParticlePosition,
	horizontal_velocity: ParticleVelocity,
	vertical_velocity: ParticleVelocity,
	speed?: float
}

dispatch minecraft:entity_effect[spawn_particles] to SpawnParticlesEntityEffect
dispatch minecraft:location_based_effect[spawn_particles] to SpawnParticlesEntityEffect

dispatch minecraft:location_based_effect[attribute] to AttributeEffect


struct ParticlePosition {
	type: ("entity_position" | "in_bounding_box"),
	/// Defaults to 0.
	offset?: float,
	/// Defaults to 1.
	scale?: float,
}

struct ParticleVelocity {
	/// Defaults to 0.
	base?: float,
	/// Scale factor applied to the given axis (`1` adds the velocity of the entity to the spawned particles). Defaults to 0.
	movement_scale?: float,
}

dispatch minecraft:entity_effect[summon_entity] to struct SummonEntityEffect {
	/// If multiple entity types are specified, a random entity type is selected.
	entity: (#[id(registry="entity_type", tags="allowed")] string | [#[id="entity_type"] string]),
	/// Whether the summoned entity should join the team of the owner of the Enchanted Item.
	join_team?: boolean,
}

struct DamageEnchantmentEffect {
	/// Predicate context: Damage Parameters.
	requirements?: LootCondition,
	/// Determines armor effectiveness; `0.0` for no effect, `1.0` for full effect.
	effect: ValueEffect,
}

dispatch minecraft:effect_component[armor_effectiveness] to [DamageEnchantmentEffect]

dispatch minecraft:effect_component[attributes] to [AttributeEffect]

dispatch minecraft:effect_component[ammo_use] to [struct AmmoUseEnchantmentEffect {
	/// Predicate context: Item Parameters.
	requirements?: LootCondition,
	/// Amount of ammunition being used up.
	effect: ValueEffect,
}]

dispatch minecraft:effect_component[block_experience] to [struct BlockExperienceEnchantmentEffect {
	/// Predicate context: Item Parameters.
	requirements?: LootCondition,
	/// Amount of experience awarded.
	effect: ValueEffect,
}]

/// Each entry in the list represents the sounds at one level of the Enchantment, so the first entry represents the sounds used by a level 1 Enchantment.
dispatch minecraft:effect_component[crossbow_charge_sounds] to [struct CrossbowChargeSoundsEnchantmentEffect {
	/// Start of charging.
	start?: #[id="sound_event"] string,
	/// Middle of charging.
	mid?: #[id="sound_event"] string,
	/// End of charging.
	end?: #[id="sound_event"] string,
	/// Dummy value; actual effects are applied above
	effect: struct {},
}]

/// Charge time of the Crossbow in seconds
dispatch minecraft:effect_component[crossbow_charge_time] to ValueEffect

dispatch minecraft:effect_component[damage] to [DamageEnchantmentEffect]

/// Complete damage immunity given the conditions are met.
dispatch minecraft:effect_component[damage_immunity] to [struct DamageImmunityEnchantmentEffect {
	/// Predicate context: Damage Parameters.
	requirements?: LootCondition,
	/// Dummy value; this is a boolean effect.
	effect: struct {},
}]

dispatch minecraft:effect_component[damage_protection] to [struct DamageProtectionEnchantmentEffect {
	/// Predicate context: Damage Parameters.
	requirements?: LootCondition,
	/// Amount of damage being absorbed; as "fake armor".
	effect: ValueEffect,
}]

/// Chance of equipment dropping when a target is killed by the owner of the Enchanted Item.
dispatch minecraft:effect_component[equipment_drops] to [struct EquipmentDropsEnchantmentEffect {
	/// Predicate context: Damage Parameters.
	requirements?: LootCondition,
	/// Chance between `0.0` and `1.0` of an equipped piece dropping.
	effect: ValueEffect,
	/// Which subject needs to be enchanted for the effect to apply.
	enchanted: ("attacker" | "victim"),
}]

dispatch minecraft:effect_component[fishing_luck_bonus] to [struct FishingLuckBonusEnchantmentEffect {
	/// Predicate context: Entity Parameters.
	///
	/// `this` is the player fishing.
	requirements?: LootCondition,
	/// Amount of luck being added.
	effect: ValueEffect,
}]

dispatch minecraft:effect_component[fishing_time_reduction] to [struct FishingTimeReductionEnchantmentEffect {
	/// Predicate context: Entity Parameters.
	///
	/// `this` is the player fishing.
	requirements?: LootCondition,
	/// Time reduction in seconds (higher values mean less time until a fish bites).
	effect: ValueEffect,
}]

dispatch minecraft:effect_component[hit_block] to [struct HitBlockEnchantmentEffect {
	/// Predicate context: Entity Parameters.
	///
	/// `this` is the entity hitting the Block, unless during a projectile attack, then, `this` is the projectile.
	requirements?: LootCondition,
	/// On the entity hitting the Block
	effect: EntityEffect,
}]

dispatch minecraft:effect_component[knockback] to [struct KnockbackEnchantmentEffect {
	/// Predicate context: Damage Parameters.
	requirements?: LootCondition,
	/// Amount of knockback being applied.
	effect: ValueEffect,
}]

dispatch minecraft:effect_component[item_damage] to [struct ItemDamageEnchantmentEffect {
	/// Predicate context: Item Parameters.
	requirements?: LootCondition,
	/// Amount of damage being dealt to the item.
	effect: ValueEffect,
}]

dispatch minecraft:effect_component[location_changed] to [struct LocationChangedEnchantmentEffect {
	/// Predicate context: Location Parameters.
	requirements?: LootCondition,
	/// On the entity changing location.
	effect: LocationBasedEffect,
}]

dispatch minecraft:effect_component[mob_experience] to [struct MobExperienceEnchantmentEffect {
	/// Predicate context: Entity Parameters.
	///
	/// `this` is the killed mob.
	requirements?: LootCondition,
	/// Amount of experience awarded.
	effect: ValueEffect,
}]

dispatch minecraft:effect_component[post_attack] to [struct PostAttackEnchantmentEffect {
	/// Predicate context: Damage Parameters.
	requirements?: LootCondition,
	/// Examples:
	/// - A Fire Aspect Enchant would specify that when the attacker is enchanted, the ignite effect is applied, and the affected party is the victim.
	/// - Thorns would specify that when the victim is enchanted, the damage_entity effect is applied, and the affected party is the attacker.
	effect: EntityEffect,
	enchanted: AttackTarget,
	affected: AttackTarget,
}]

enum(string) AttackTarget {
	Attacker = "attacker",
	DamagingEntity = "damaging_entity",
	Victim = "victim",
}

/// Prevents the enchanted item from being unequipped from an armor slot.
dispatch minecraft:effect_component[prevent_armor_change] to struct {}

/// Prevents the enchanted item from being dropped when the owner dies.
dispatch minecraft:effect_component[prevent_equipment_drop] to struct {}

dispatch minecraft:effect_component[projectile_count] to [struct ProjectileCountEnchantmentEffect {
	/// Predicate context: Entity Parameters.
	///
	/// `this` is the entity drawing the weapon.
	requirements?: LootCondition,
	/// Amount of projectiles being loaded/drawn.
	effect: ValueEffect,
}]

/// Controls the amount of entities a shot projectile will pierce through before despawning.
dispatch minecraft:effect_component[projectile_piercing] to [struct ProjectilePiercingEnchantmentEffect {
	/// Predicate context: Item Parameters.
	///
	/// Tool is the ammunition item.
	requirements?: LootCondition,
	/// Amount of entities the projectile will pierce through before despawning.
	effect: ValueEffect,
}]

/// Spread of arrows from a projectile weapon firing multiple projectiles
dispatch minecraft:effect_component[projectile_spread] to [struct ProjectileSpreadEnchantmentEffect {
	/// Predicate context: Entity Parameters.
	///
	/// `this` is the entity shooting the projectile.
	requirements?: LootCondition,
	/// Maximum spread of projectiles measured in degrees from the aim line.
	effect: ValueEffect,
}]

/// Effect(s) to apply to projectile entities that have been spawned when firing a projectile weapon.
dispatch minecraft:effect_component[projectile_spawned] to [struct ProjectileSpawnedEnchantmentEffect {
	/// Predicate context: Entity Parameters.
	///
	/// `this` is the newly spawned projectile.
	requirements?: LootCondition,
	/// On the newly spawned projectile.
	effect: EntityEffect,
}]

/// Repairs the enchanted item with experience points picked up by the player.
dispatch minecraft:effect_component[repair_with_xp] to [struct RepairWithXpEnchantmentEffect {
	/// Predicate context: Item Parameters.
	requirements?: LootCondition,
	/// Amount of durability increase per experience point, `mending` uses 2x.
	effect: ValueEffect,
}]

// Really mojang? Lol.
/// Amount of damage caused by a Mace's smash attack per block fallen.
dispatch minecraft:effect_component[smash_damage_per_block_fallen] to [struct SmashDamagePerBlockFallenEnchantmentEffect {
	/// Predicate context: Damage Parameters.
	requirements?: LootCondition,
	/// Amount of damage dealt per block fallen.
	effect: ValueEffect,
}]

dispatch minecraft:effect_component[tick] to [struct TickEnchantmentEffect {
	/// Predicate context: Entity Parameters.
	///
	/// `this` is the entity with the Enchanted Item.
	requirements?: LootCondition,
	/// On every tick. Performance recommendation: don't use with `run_function` unless necessary.
	effect: EntityEffect,
}]

dispatch minecraft:effect_component[trident_return_acceleration] to [struct TridentReturnAccelerationEnchantmentEffect {
	/// Predicate context: Entity Parameters.
	///
	/// `this` is the trident entity.
	requirements?: LootCondition,
	/// Amount of acceleration applied to the returning trident.
	effect: ValueEffect,
}]

/// Amount of strength applied to the spin attack.
///
/// Any resulting value greater than 0 converts the Trident to be a spin attack weapon instead of a thrown attack.
dispatch minecraft:effect_component[trident_spin_attack_strength] to ValueEffect

// Really mojang?
/// Each entry in the list represents the sound at one level of the Enchantment, so the first entry represents the sound used by a level 1 Enchantment.
dispatch minecraft:effect_component[trident_sound] to [#[id="sound_event"] string]

type EnchantmentsType = (#[id(registry="enchantment", tags="allowed")] string | [#[id="enchantment"] string] @ 1..)

/// Gives one or more Enchantments from a set of options according to a given cost (similar to the cost value in the Enchantment Table).
dispatch minecraft:enchantment_provider[by_cost] to struct ByCostEnchantmentProvider {
	enchantments: EnchantmentsType,
	/// Cost to use for the Enchanting process.
	cost: NumberProvider<int>,
}

dispatch minecraft:enchantment_provider[by_cost_with_difficulty] to struct ByCostWithDifficultyEnchantmentProvider {
	enchantments: EnchantmentsType,
	/// Positive integer representing the minimum possible cost
	min_cost: int @ 0..,
	/// Span of the cost randomization when the special factor is at its maximum.
	max_cost_span: int @ 0..,
}
