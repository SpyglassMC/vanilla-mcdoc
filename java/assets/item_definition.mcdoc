use ::java::assets::model::ModelRef
use ::java::assets::model::ItemDisplayContext
use ::java::util::color::RGB
use ::java::util::color::DyeColor
use ::java::util::direction::Direction
use ::java::util::text::Keybind

#[since="1.21.4"]
dispatch minecraft:resource[item_definition] to struct ItemDefinition {
	model: ItemModel,
	/// Whether the down-and-up animation should be played in first-person view when the item stack is changed.
	/// Defaults to `true`.
	hand_animation_on_swap?: boolean,
	/// Whether the item model is allowed to be bigger than its item slot.
	/// Defaults to `false`, which clips the item model in GUI to the item slot size.
	/// The behavior of `true` is **not** officially supported.
	#[since="1.21.6"]
	oversized_in_gui?: boolean,
}

struct ItemModel {
	type: #[id] ItemModeltype,
	...minecraft:item_model[[type]],
}

enum(string) ItemModeltype {
	BundleSelectedItem = "bundle/selected_item",
	Composite = "composite",
	Condition = "condition",
	Empty = "empty",
	Model = "model",
	RangeDispatch = "range_dispatch",
	Select = "select",
	Special = "special",
}

dispatch minecraft:item_model["bundle/selected_item"] to struct {}

dispatch minecraft:item_model[composite] to struct Composite {
	models: [ItemModel],
}

dispatch minecraft:item_model[condition] to struct Condition {
	property: #[id] ConditionalPropertyType,
	...minecraft:conditional_item_property[[property]],
	on_true: ItemModel,
	on_false: ItemModel,
}

dispatch minecraft:item_model[model] to struct Model {
	model: ModelRef,
	tints?: [ModelTint],
}

dispatch minecraft:item_model[range_dispatch] to struct RangeDispatch {
	property: #[id] NumericPropertyType,
	...minecraft:numeric_item_property[[property]],
	/// Factor to multiply the property value with. Defaults to 1.
	scale?: float,
	/// List of ranges. Will select last entry with threshold less or equal to value.
	/// Order does not matter, list will be sorted by threshold in ascending order.
	entries: [struct RangeDispatchEntry {
		threshold: float,
		model: ItemModel,
	}],
	/// Item model to render if no entries were less or equal to the value.
	fallback?: ItemModel,
}

dispatch minecraft:item_model[select] to struct Select {
	property: #[id] SelectPropertyType,
	...minecraft:select_item_property[[property]],
	/// Item model to render if none of the cases matched the value.
	fallback?: ItemModel,
}

type SelectCases<T> = struct {
  cases: [SelectCase<T>]
}

type SelectCase<T> = struct {
	when: (T | [T]),
	model: ItemModel
}

dispatch minecraft:item_model[special] to struct Special {
	/// Renders a special hardcoded model.
	model: struct SpecialModel {
		type: #[id] SpecialModelType,
		...minecraft:special_item_model[[type]],
	},
	/// Base model, providing transformations, particle texture and GUI light.
	base: ModelRef,
}


struct ModelTint {
	type: #[id] TintSourceType,
	...minecraft:tint_source[[type]],
}

enum(string) TintSourceType {
	Constant = "constant",
	CustomModelData = "custom_model_data",
	Dye = "dye",
	Firework = "firework",
	Grass = "grass",
	MapColor = "map_color",
	Potion = "potion",
	Team = "team",
}

dispatch minecraft:tint_source[constant] to struct ConstantTint {
	/// Constant tint color to apply.
	value: RGB,
}

dispatch minecraft:tint_source[dye] to struct DyeTint {
	/// Tint to apply when the `dyed_color` component is not present.
	default: (
		#[canonical] #[color="composite_argb"] int |
		#[color="dec_rgb"] [float] @ 3 |
	),
}

/// Applies a tint color based on the `textures/colormap/grass.png` color map.
dispatch minecraft:tint_source[grass] to struct GrassTint {
	temperature: float @ 0..1,
	downfall: float @ 0..1,
}

dispatch minecraft:tint_source[firework] to struct FireworkTint {
	/// Tint to apply when the `firework_explosion` component is not present.
	default: (
		#[canonical] #[color="composite_argb"] int |
		#[color="dec_rgb"] [float] @ 3 |
	),
}

dispatch minecraft:tint_source[potion] to struct PotionTint {
	/// Tint to apply when the `potion_contents` component is not present, or it has no effects and no `custom_color` is set.
	default: RGB,
}

dispatch minecraft:tint_source[map_color] to struct MapColorTint {
	/// Tint to apply when the `map_color` component is not present.
	default: RGB,
}

dispatch minecraft:tint_source[custom_model_data] to struct CustomModelDataTint {
	/// The index of the `colors` list in the `custom_model_data` component. Defaults to 0.
	index?: int @ 0..,
	/// Tint to apply when the `custom_model_data` component is not present, or when it doesn't have a color in the specified index.
	default: RGB,
}

dispatch minecraft:tint_source[team] to struct TeamTint {
	/// Tint to apply when there is no context entity, entity is not in a team or the team has no color.
	default: RGB,
}


enum(string) ConditionalPropertyType {
	Broken = "broken",
	BundleHasSelectedItem = "bundle/has_selected_item",
	Carried = "carried",
	#[since="1.21.5"]
	Component = "component",
	CustomModelData = "custom_model_data",
	Damaged = "damaged",
	ExtendedView = "extended_view",
	FishingRod = "fishing_rod/cast",
	HasComponent = "has_component",
	KeybindDown = "keybind_down",
	Selected = "selected",
	UsingItem = "using_item",
	ViewEntity = "view_entity",
}

dispatch minecraft:conditional_item_property[%unknown] to struct {}

dispatch minecraft:conditional_item_property[component] to struct ComponentFlags {
	/// The component predicate to check.
	predicate: (
		#[until="1.21.5"] #[id="item_sub_predicate_type"] string |
		#[since="1.21.5"] #[id="data_component_predicate_type"] string |
	),
	/// The predicate-specific value.
	value: minecraft:data_component_predicate[[predicate]],
}

dispatch minecraft:conditional_item_property[custom_model_data] to struct CustomModelDataFlags {
	/// The index of the `flags` list in the `custom_model_data` component. Defaults to 0.
	index?: int @ 0..,
}

dispatch minecraft:conditional_item_property[has_component] to struct HasComponent {
	component: #[id="data_component_type"] string,
	/// Whether the default components should be handled as "no component". Defaults to false.
	ignore_default?: boolean,
}

dispatch minecraft:conditional_item_property[keybind_down] to struct KeybindDown {
	/// The keybind ID to check for.
	keybind: Keybind,
}

dispatch minecraft:conditional_item_property[view_entity] to struct ViewEntity {

}


enum(string) NumericPropertyType {
	BundleFullness = "bundle/fullness",
	Compass = "compass",
	Cooldown = "cooldown",
	Count = "count",
	CrossbowPull = "crossbow/pull",
	CustomModelData = "custom_model_data",
	Damage = "damage",
	Time = "time",
	UseCycle = "use_cycle",
	UseDuration = "use_duration",
}

dispatch minecraft:numeric_item_property[%unknown] to struct {}

dispatch minecraft:numeric_item_property[custom_model_data] to struct CustomModelDataFloats {
	/// The index of the `floats` list in the `custom_model_data` component. Defaults to 0.
	index?: int @ 0..,
}

dispatch minecraft:numeric_item_property[damage] to struct Damage {
	/// If false, returns value of damage, clamped to `0..max_damage`.
	/// If true, returns value of damage divided by the `max_damage` component, clamped to `0..1`.
	/// Defaults to true.
	normalize?: boolean,
}

dispatch minecraft:numeric_item_property[count] to struct Count {
	/// If false, returns count clamped to `0..max_stack_size`.
	/// If true, returns count divided by the `max_stack_size` component, clamped to `0..1`.
	/// Defaults to true.
	normalize?: boolean,
}

dispatch minecraft:numeric_item_property[time] to struct Time {
	source: TimeSource,
	/// Whether to oscillate for some time around target before settling. Defaults to true.
	wobble?: boolean,
}

enum(string) TimeSource {
	Daytime = "daytime",
	MoonPhase = "moon_phase",
	Random = "random",
}

dispatch minecraft:numeric_item_property[compass] to struct Compass {
	target: CompassTarget,
	/// Whether to oscillate for some time around target before settling. Defaults to true.
	wobble?: boolean,
}

enum(string) CompassTarget {
	/// Always an invalid target.
	None = "none",
	/// Points at world spawn.
	Spawn = "spawn",
	/// Points at the location stored in the `lodestone_tracker` component.
	Lodestone = "lodestone",
	/// Points at the last player death location.
	Recovery = "recovery",
}

dispatch minecraft:numeric_item_property[use_duration] to struct UseDuration {
	/// If true, returns remaining item use ticks.
	/// If false, returns item use ticks so far.
	/// Defaults to false.
	remaining?: boolean,
}

dispatch minecraft:numeric_item_property[use_cycle] to struct UseCycle {
	/// returns remaining item use ticks modulo `period`.
	/// Defaults to 1.
	period?: float,
}


enum(string) SelectPropertyType {
	BlockState = "block_state",
	ChargeType = "charge_type",
	#[since="1.21.5"] Component = "component",
	ContextDimension = "context_dimension",
	ContextEntityType = "context_entity_type",
	CustomModelData = "custom_model_data",
	DisplayContext = "display_context",
	LocalTime = "local_time",
	MainHand = "main_hand",
	TrimMaterial = "trim_material",
}

dispatch minecraft:select_item_property[%unknown] to struct {
	...SelectCases<string>
}

enum(string) CrossbowChargeType {
	NONE = "none",
	ARROW = "arrow",
	ROCKET = "rocket"
}

dispatch minecraft:select_item_property[charge_type] to struct ChargeType {
	...SelectCases<CrossbowChargeType>
}


dispatch minecraft:select_item_property[block_state] to struct BlockState {
	block_state_property: mcdoc:block_state_keys[%fallback],
	...SelectCases<string>
}

#[since="1.21.5"]
dispatch minecraft:select_item_property[component] to struct ComponentStrings {
	/// The component type to check the values of.
	/// If the selected value comes from a registry that the client doesn't have access to,
	/// the entry will be silently ignored.
	component: #[id="data_component_type"] string,
	...SelectCases<minecraft:data_component[[component]]>
}

dispatch minecraft:select_item_property[custom_model_data] to struct CustomModelDataStrings {
	/// The index of the `strings` list in the `custom_model_data` component. Defaults to 0.
	index?: int @ 0..,
	...SelectCases<string>
}

dispatch minecraft:select_item_property[context_dimension] to struct ContextDimension{
	...SelectCases<#[id="dimension"] string>
} 

dispatch minecraft:select_item_property[context_entity_type] to struct ContextEntityType{
	...SelectCases<#[id="entity_type"] string>
}

dispatch minecraft:select_item_property[display_context] to struct DisplayContext{
	...SelectCases<ItemDisplayContext>
}

dispatch minecraft:select_item_property[local_time] to struct LocalTime {
	/// Format to use for time formatting.
	/// Examples: `yyyy-MM-dd`, `HH:mm:ss`.
	pattern: #[time_pattern] string,
	/// Defaults to the root locale.
	/// Examples: `en_US`, `cs_AU@numbers=thai;calendar=japanese`.
	locale?: string, // TODO
	/// Defaults to the timezone set on the client.
	/// Examples: `Europe/Stockholm`, `GMT+0:45`.
	time_zone?: string,
	...SelectCases<string>
}

dispatch minecraft:select_item_property[main_hand] to struct MainHand{
	...SelectCases<("left" | "right")>
}

dispatch minecraft:select_item_property[trim_material] to struct TrimMaterial{
	...SelectCases<#[id="trim_material"] string>
}

enum(string) SpecialModelType {
	Banner = "banner",
	Bed = "bed",
	Conduit = "conduit",
	Chest = "chest",
	DecoratedPot = "decorated_pot",
	HangingSign = "hanging_sign",
	Head = "head",
	Shield = "shield",
	ShulkerBox = "shulker_box",
	StandingSign = "standing_sign",
	Trident = "trident",
}

dispatch minecraft:special_item_model[%unknown] to struct {}

dispatch minecraft:special_item_model[banner] to struct Banner {
	color: DyeColor,
}

dispatch minecraft:special_item_model[bed] to struct Bed {
	texture: #[id(registry="texture",path="entity/bed/")] string,
}

dispatch minecraft:special_item_model[chest] to struct Chest {
	texture: #[id(registry="texture",path="entity/chest/")] string,
	/// Defaults to `0`.
	openness?: float @ 0..1,
}

dispatch minecraft:special_item_model[hanging_sign] to struct HangingSign {
	wood_type: WoodType,
	texture: #[id(registry="texture",path="entity/signs/hanging/")] string,
}

enum(string) WoodType {
	Oak = "oak",
	Spruce = "spruce",
	Birch = "birch",
	Acacia = "acacia",
	Cherry = "cherry",
	Jungle = "jungle",
	DarkOak = "dark_oak",
	PaleOak = "pale_oak",
	Mangrove = "mangrove",
	Bamboo = "bamboo",
	Crimson = "crimson",
	Warped = "warped",
}

dispatch minecraft:special_item_model[head] to struct Head {
	kind: HeadType,
	/// Texture to use instead of the texture from `kind`.
	/// If present, will ignore the `profile` compnent.
	texture?: #[id(registry="texture",path="entity/")] string,
	/// Controls the animation time for piglin and dragon heads. Defaults to `0`.
	animation?: float,
}

enum(string) HeadType {
	Creeper = "creeper",
	Dragon = "dragon",
	Piglin = "piglin",
	Player = "player",
	Skeleton = "skeleton",
	WitherSkeleton = "wither_skeleton",
	Zombie = "zombie",
}

dispatch minecraft:special_item_model[shulker_box] to struct ShulkerBox {
	texture: #[id(registry="texture",path="entity/shulker/")] string,
	openness?: float @ 0..1,
	/// Defaults to `up`.
	orientation?: Direction,
}

dispatch minecraft:special_item_model[standing_sign] to struct StandingSign {
	wood_type: WoodType,
	texture: #[id(registry="texture",path="entity/signs/")] string,
}
