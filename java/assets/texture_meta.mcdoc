dispatch minecraft:resource[texture_meta] to struct TextureMeta {
	animation?: struct TextureAnimation {
		/// If true, additional frames will be generated between frames with a frame time greater than 1 between them. Defaults to false.
		interpolate?: boolean,
		/// The width of the tile, as a direct ratio rather than in pixels. Can be used by resource packs to have frames that are not perfect squares.
		width?: int,
		/// The height of the tile, as a direct ratio rather than in pixels. Can be used by resource packs to have frames that are not perfect squares.
		height?: int,
		/// Sets the default time for each frame in increments of one game tick. Defaults to 1.
		frametime?: int,
		/// Defaults to displaying all the frames from top to bottom.
		frames?: [
			(struct TextureAnimationFrame {
				/// A number corresponding to position of a frame from the top, with the top frame being 0.
				index: int,
				/// The time in ticks to show this frame, overriding `frametime` above.
				time: int,
			} |
			int |
		)],
	},
	gui?: struct GuiMeta {
		/// Configures how the GUI texture should be scaled. Defaults to `stretch`.
		scaling?: GuiSpriteScaling,
	},
	/// Only available for villager textures.
	villager?: struct VillagerTextureMeta {
		/// Determines whether the villager's 'profession' hat layer should allow the 'type' hat layer to render or not. If this mcmeta is undefined the default is used.
		hat?: ("full" | "partial")
	},
	/// Only available for colormaps.
	texture?: struct ColormapTextureMeta {
		/// Causes the texture to blur when viewed from close up. Defaults to false.
		blur?: boolean,
		/// Causes the texture to stretch instead of tiling in cases where it otherwise would, such as on the shadow. Defaults to false.
		clamp?: boolean,
		/// Custom mipmap values for the texture.
		mipmaps?: int[],
	},
}

struct GuiSpriteScaling {
	type: GuiSpriteScalingType,
	...minecraft:gui_sprite_scaling[[type]],
}

enum(string) GuiSpriteScalingType {
	Stretch = "stretch",
	Tile = "tile",
	NineSlice = "nine_slice",
}

dispatch minecraft:gui_sprite_scaling[stretch] to struct {}

dispatch minecraft:gui_sprite_scaling[tile] to struct TileScaling {
	width: int @ 1..,
	height: int @ 1..,
}

dispatch minecraft:gui_sprite_scaling[nine_slice] to struct NineSlice {
	width: int @ 0..,
	height: int @ 0..,
	border: (int @ 1.. | NineSliceBorder),
	/// Defaults to `false`.
	stretch_inner?: boolean,
}

struct NineSliceBorder {
	left: int @ 0..,
	top: int @ 0..,
	right: int @ 0..,
	bottom: int @ 0..,
}
