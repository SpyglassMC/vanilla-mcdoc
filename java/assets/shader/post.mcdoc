use ::java::util::color::RGBA

dispatch minecraft:resource["post_effect"] to struct PostEffect {
	targets?: (
		#[until="1.21.2"] [(string | OldTarget)] |
		#[since="1.21.2"] Targets |
	),
	passes?: [Pass],
}

struct OldTarget {
	name: string,
	width?: int,
	height?: int,
}

struct Targets {
	[#[id="shader_target"] string]: (
		#[until="1.21.6"] FixedSizedTarget |
		#[until="1.21.6"] FullScreenTarget |
		#[since="1.21.6"] InternalTarget |
	),
}

struct FixedSizedTarget {
	width: int,
	height: int,
}

struct FullScreenTarget {}

struct InternalTarget {
	width?: int,
	height?: int,
	/// If `true`, target will be persistent across frames. Defaults to `false`.
	/// The contents of the target will be cleared when the screen is resized.
	persistent?: boolean,
	/// Target will be filled with this color when created or cleared. Defaults to `0`.
	clear_color?: RGBA,
}

type Pass = (
	#[until="1.21.2"] struct {
		name: string,
		intarget: string,
		outtarget: string,
		auxtargets?: [AuxTarget],
		use_linear_filter?: boolean,
		uniforms?: (
			#[until="1.21.6"] [UniformValue] |
			#[since="1.21.6"] UniformBlocks |
		),
	} |
	#[since="1.21.2"] struct {
		#[until="1.21.5"] program: #[id="shader"] string,
		#[since="1.21.5"] ...struct {
			vertex_shader: #[id="shader/vertex"] string,
			fragment_shader: #[id="shader/fragment"] string,
		},
		inputs?: [(TargetInput | TextureInput)],
		output: #[id="shader_target"] string,
		uniforms?: (
			#[until="1.21.6"] [UniformValue] |
			#[since="1.21.6"] UniformBlocks |
		),
	} |
)

struct AuxTarget {
	name: string,
	id: string,
	width?: int,
	height?: int,
	bilinear?: boolean,
}

struct TextureInput {
	location: string,
	sampler_name: string,
	width: int @ 1..,
	height: int @ 1..,
	bilinear?: boolean,
}

struct TargetInput {
	target: #[id="shader_target"] string,
	sampler_name: string,
	use_depth_buffer?: boolean,
	bilinear?: boolean,
}

struct UniformBlocks {
	/// List of uniform values in this block. The order must match the order in the shader file.
	[string]: [UniformValue],
}

struct UniformValue {
	#[until="1.21.6"] ...struct {
		name: string,
	},
	#[since="1.21.6"] ...struct {
		/// Unused by the game, but good to set in practice.
		name?: string,
	},
	type: UniformValueType,
	#[until="1.21.6"]
	values: [float] @ 0..4,
	#[since="1.21.6"]
	value: minecraft:uniform_value[[type]],
}

enum(string) UniformValueType {
	Int = "int",
	Ivec3 = "ivec3",
	Float = "float",
	Vec2 = "vec2",
	Vec3 = "vec3",
	Vec4 = "vec4",
	Matrix4x4 = "matrix4x4",
}

dispatch minecraft:uniform_value["int"] to int

dispatch minecraft:uniform_value[ivec3] to [int] @ 3

dispatch minecraft:uniform_value["float"] to float

dispatch minecraft:uniform_value[vec2] to [float] @ 2

dispatch minecraft:uniform_value[vec3] to [float] @ 3

dispatch minecraft:uniform_value[vec4] to [float] @ 4

dispatch minecraft:uniform_value[matrix4x4] to [float] @ 16
