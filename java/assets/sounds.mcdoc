dispatch minecraft:resource[sounds] to struct Sounds {
	//TODO: this actually registers new weighed_sound_events. Namespace is always the namespace of file
	[#[id="weighed_sound_event"] string]: SoundEventRegistration,
}

struct SoundEventRegistration {
	/// The sound files this sound event uses. One sound is randomly selected to play when the event is triggered. Defaults to assumed path.
	sounds?: [(string | Sound)],
	/// If true the sounds listed should replace the ones listed in the minecraft sounds.json for this sound event.
	/// False if the sounds listed should be added. If undefined. Defaults to false.
	replace?: boolean,
	/// Translated as the subtitle when Show Subtitles is enabled. Section sign formatting codes are supported.
	subtitle?: #[translation_key] string,
}

struct Sound {
	/// Changes how `name` is interpreted. Defaults to `sound`.
	type?: SoundType,
	name: minecraft:sound_type[[type]],
	/// Defaults to 1.0.
	volume?: float @ 0<..,
	/// Default is 1.0.
	pitch?: float @ 0<..,
	/// Chance that this sound is selected to play. Defaults to 1.
	weight?: int @ 1..,
	// TODO: Find difference between this and stream.
	/// Whether the sound should be loaded when loading the pack instead of when the sound is played. Used by the underwater ambience. Defaults to false.
	preload?: boolean,
	/// If true it will be streamed from its file. Sounds longer than a few seconds should enable this to avoid lag. Defaults to false.
	/// When false many instances of the sound can be ran at the same time. When true only allows 4 instances (of that type) can be played.
	stream?: boolean,
	/// Modify sound reduction rate based on distance. Defaults to 16.
	attenuation_distance?: int,
}

enum(string) SoundType {
	/// A file.
	File = "file",
	/// An already defined event.
	SoundEvent = "event",
}

dispatch minecraft:sound_type[file,%none] to #[id="sound"] string

dispatch minecraft:sound_type[event] to #[id="weighed_sound_event"] string
