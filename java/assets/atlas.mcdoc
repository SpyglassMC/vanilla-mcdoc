#[since="1.19.3"]
dispatch minecraft:resource[atlas] to struct Atlas {
	/// List of sprite sources which can add or remove sprite textures to this atlas.
	sources: [SpriteSource],
}

struct SpriteSource {
	type: SpriteSourceType,
	...minecraft:sprite_source[[type]],
}

enum(string) SpriteSourceType {
	Single = "single",
	Directory = "directory",
	Filter = "filter",
	Unstitch = "unstitch",
	#[since="1.19.4"]
	PalettedPermutations = "paletted_permutations",
}

dispatch minecraft:sprite_source[single] to struct Single {
	/// A single texture location of the source.
	resource: #[id="texture"] string,
	/// The identifier of the sprite that can referenced.
	/// If not specified, matches `resource`.
	sprite?: #[id(registry="texture",definition=true)] string,
}

dispatch minecraft:sprite_source[directory] to struct Directory {
	/// Directory of texture locations to include, relative to the `textures` folder, not including the trailing `/`.
	source: string,
	/// The sprite name prefix, usually ending with `/`.
	prefix: string,
}

dispatch minecraft:sprite_source[filter] to struct Filter {
	/// Pattern to remove sprite identifiers already in the atlas. The order of sprite sources is important.
	pattern: FilterPattern,
}

struct FilterPattern {
	namespace?: #[regex_pattern] string,
	path?: #[regex_pattern] string,
}

#[since="1.19.4"]
dispatch minecraft:sprite_source[paletted_permutations] to struct PalettedPermutations {
	textures: [#[id="texture"] string],
	palette_key: #[id="texture"] string,
	permutations: struct PermutationsMap {
		[#[permutation(definition=true)] string]: #[id="texture"] string,
	},
	/// Value to use when joining the texture and permutation names to produce the sprite name.
	/// Defaults to `_`.
	separator?: string,
}

dispatch minecraft:sprite_source[unstitch] to struct Unstitch {
	resource: #[id="texture"] string,
	/// If set to the resource width, regions will use pixel coordinates.
	divisor_x?: double,
	/// If set to the resource height, regions will use pixel coordinates.
	divisor_y?: double,
	regions: [UnstitchRegion],
}

struct UnstitchRegion {
	sprite: #[id(registry="texture",definition=true)] string,
	x: double,
	y: double,
	width: double,
	height: double,
}
