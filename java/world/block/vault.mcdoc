use ::java::world::item::ItemStack

#[since="1.20.5"]
dispatch minecraft:block_entity[vault] to struct Vault {
	server_data?: struct ServerData {
		/// Ticks until the loot table is ran again to update the display item.
		state_updating_resumes_at?: long,
		/// When a player is in this list they can no longer open the vault, but other players can.
		rewarded_players?: [int[] @ 4],
		/// Items that are being ejected from the vault when it is opened. As each item is ejected, it is removed from this list, before ejection, it is previewed as the `display_item`.
		items_to_eject?: [ItemStack],
		/// Number of items that the loot table started off the opening with, does not change while items are ejected.
		total_ejections_needed?: int,
	},
	config?: struct Config {
		/// Item required to open the vault.
		key_item?: ItemStack,
		/// Defaults to "minecraft:chests/trial_chambers/reward".
		loot_table?: #[id="loot_table"] string,
		/// The loot table to display items in the vault.
		/// Defaults to use the value in `loot_table` field.
		override_loot_table_to_display: #[id="loot_table"] string,
		/// The range when the vault should activate.
		activation_range?: double,
		/// The range when the vault should deactivate.
		deactivation_range?: double,
	},
	/// When a player is in range of the vault, the same display item will be shown to all players.
	/// This is also used for the items that are being ejected from the vault.
	shared_data?: struct SharedData {
		/// Item that is displayed to players when they are in range of the vault.
		display_item?: ItemStack,
		connected_players?: [#[uuid] int[] @ 4],
		connected_particles_range?: double,
	},
}

dispatch minecraft:block[vault] to minecraft:block_entity[vault]
