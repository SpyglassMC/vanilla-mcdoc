use ::java::data::advancement::predicate::BlockPredicate
use ::java::data::trim::TrimMaterial
use ::java::data::trim::TrimPattern
use ::java::data::variants::instrument::Instrument
use ::java::data::util::SoundEventRef
use ::java::util::Filterable
use ::java::util::GlobalPos
use ::java::util::attribute::AttributeOperation
use ::java::util::color::DyeColor
use ::java::util::color::RGB
use ::java::util::effect::MobEffectInstance
use ::java::util::slot::EquipmentSlot
use ::java::util::slot::EquipmentSlotGroup
use ::java::util::text::Text
use ::java::world::item::ItemStack
use ::java::world::item::SingleItem
use ::java::world::entity::AnyEntity

/// Applied to an entity that has equipped/is holding the item.
dispatch minecraft:data_component[attribute_modifiers] to (
	#[until="1.21.5"] #[canonical] AttributeModifiers |
	[AttributeModifier] |
)

struct AttributeModifiers {
	modifiers: [AttributeModifier],
	show_in_tooltip?: boolean,
}

struct AttributeModifier {
	type: #[id="attribute"] string,
	#[until="1.21"]
	uuid: int[] @ 4,
	#[until="1.21"]
	name: string,
	/// Used when equipping and unequipping the item to identify which modifier to add or remove from the entity.
	#[since="1.21"]
	id: #[id="attribute_modifier"] string,
	/// Change in the attribute.
	amount: double,
	operation: AttributeOperation,
	/// Slot or slot type the item must be in for the modifier to take effect. Defaults to `any`.
	slot?: EquipmentSlotGroup,
	/// Controls how this modifier is shown in the item tooltip.
	#[since="1.21.6"]
	display: AttributeDisplay,
}

struct AttributeDisplay {
	type: AttributeDisplayType,
	...minecraft:attribute_display[[type]],
}

enum(string) AttributeDisplayType {
	/// Shows the calculated attribute modifier values on the tooltip.
	Default = "default",
	/// Does not show the attribute modifier entry in tooltips.
	Hidden = "hidden",
	/// Replaces the shown attribute modifier text.
	Override = "override",
}

dispatch minecraft:attribute_display[override] to struct AttributeDisplayOverride {
	/// The text contents to show for this attribute modifer entry.
	value: Text,
}

/// The base color of a shield.
dispatch minecraft:data_component[base_color] to DyeColor

#[since="1.21.5"]
dispatch minecraft:data_component[blocks_attacks] to struct blocks_attacks {
	/// Number of seconds that right-click must be held before successfully blocking attacks.
	/// Defaults to `0`.
	block_delay_seconds?: float @ 0..,
	/// Multiplier applied to the number of seconds that the item will be on cooldown for when attacked by a disabling attack (`disable_blocking_for_seconds` on the `weapon` component).
	/// Defaults to `1`.
	/// If `0`, this item can never be disabled by attacks.
	disable_cooldown_scale?: float @ 0..,
	/// Controls how much damage should be blocked in a given attack. If not specified, all damage is blocked.
	/// Each entry in the list contributes an amount of damage to be blocked, optionally filtered by a damage type.
	/// Each entry adds to blocked damage, determined by `clamp(base + factor * dealt_damage, 0, dealt_damage)`.
	/// The final damage applied in the attack to the entity is determined by `dealt_damage - clamp(blocked_damage, 0, dealt_damage)`.
	damage_reductions?: [DamageReduction],
	/// Controls how much damage should be applied to the item from a given attack.
	/// If not specified, a point of durability is removed for every point of damage dealt.
	/// The final damage applied to the item is determined by `floor(base + factor * dealt_damage)`.
	/// The final value may be negative, causing the item to be repaired.
	item_damage?: ItemDamageFunction,
	/// Sound played when an attack is successfully blocked.
	block_sound?: SoundEventRef,
	/// Sound played when the item goes on its disabled cooldown due to an attack.
	disabled_sound?: SoundEventRef,
	/// Damage types in this tag are bypassing the blocking
	bypassed_by?: #[id(registry="damage_type",tags="required")] string,
}

struct DamageReduction {
	/// An optional damage type to filter this reduction by.
	/// If not specified, any damage type is accepted for this reduction.
	type?: (#[id(registry="damage_type",tags="allowed")] string | [#[id="damage_type"] string]),
	/// Constant amount of damage to be blocked.
	base: float,
	/// Fraction of the dealt damage that should be blocked.
	factor: float,
	/// Maximum angle between facing direction and incoming attack direction for the blocking to be effective
	horizontal_blocking_angle?: float @ 0<..,
}

struct ItemDamageFunction {
	/// Minimum amount of damage dealt by the attack before this item damage is applied to the item.
	threshold: float @ 0..,
	/// Constant amount of damage applied to the item, if `threshold` is passed.
	base: float,
	/// Fraction of the dealt damage that should be applied to the item, if `threshold` is passed.
	factor: float,
}

#[since="1.21.5"]
dispatch minecraft:data_component[break_sound] to SoundEventRef

dispatch minecraft:data_component[bucket_entity_data] to (
	#[canonical] BucketEntityData |
	#[nbt=BucketEntityData] string |
)

struct BucketEntityData {
	...AnyEntity,
	/// Turns into the expiry time of the memory module `has_hunting_cooldown` for axolotls.
	HuntingCooldown: long,
	/// Turns into the `Variant` entity tag for tropical fish.
	BucketVariantTag: int,
}

dispatch minecraft:data_component[bundle_contents] to [ItemStack]

dispatch minecraft:data_component[can_break] to AdventureModePredicate

type AdventureModePredicate = (
	#[until="1.21.5"] #[canonical] struct {
		predicates: [BlockPredicate] @ 1..,
		show_in_tooltip?: boolean,
	} |
	#[since="1.21.5"] #[canonical] [BlockPredicate] |
	BlockPredicate |
)

/// Crossbow projectiles that are loaded.
dispatch minecraft:data_component[charged_projectiles] to [ItemStack]

#[since="1.21.2"]
dispatch minecraft:data_component[consumable] to struct Consumable {
	/// Time taken for a player to consume the item. Defaults to 1.6.
	consume_seconds?: float @ 0..,
	/// View model/arms animation used during consumption of the item. Defaults to `eat`.
	animation?: ItemUseAnimation,
	/// Sound played during and on completion of item consumption.
	sound?: SoundEventRef,
	/// Whether the `item` particle is emitted while consuming the item. Defaults to `true`.
	has_consume_particles?: boolean,
	/// Side effects which take place after consuming the item.
	on_consume_effects?: [ConsumeEffect],
}

enum(string) ItemUseAnimation {
	None = "none",
	Eat = "eat",
	Drink = "drink",
	Block = "block",
	Bow = "bow",
	/// Used for Tridents.
	Spear = "spear",
	Crossbow = "crossbow",
	Spyglass = "spyglass",
	/// Used for Goat Horns.
	TootHorn = "toot_horn",
	Brush = "brush",
	#[since="1.21.4"]
	Bundle = "bundle",
}

struct ConsumeEffect {
	type: #[id="consume_effect_type"] string,
	...minecraft:consume_effect[[type]],
}

/// Adding status/mob effects to the player.
dispatch minecraft:consume_effect[apply_effects] to struct ApplyEffectsConsumeEffect {
	effects: [MobEffectInstance],
	/// Chance the effects will be applied once consumed.
	probability?: float @ 0..1,
}

/// Removing specific status/mob effect types from the player.
dispatch minecraft:consume_effect[remove_effects] to struct RemoveEffectsConsumeEffect {
	effects: (#[id(registry="mob_effect",tags="allowed")] string | [#[id="mob_effect"] string]),
}

/// Removing all status/mob effects from the player.
dispatch minecraft:consume_effect[clear_all_effects] to struct {}

dispatch minecraft:consume_effect[teleport_randomly] to struct TeleportRandomlyConsumeEffect {
	/// Defaults to 16.
	diameter?: float @ 1..,
}

dispatch minecraft:consume_effect[play_sound] to struct PlaySoundConsumeEffect {
	sound: SoundEventRef,
}

dispatch minecraft:data_component[custom_model_data] to (
	#[until="1.21.4"] int |
	#[since="1.21.4"] struct CustomModelData {
		floats?: [float],
		flags?: [boolean],
		strings?: [string],
		colors?: [RGB],
	} |
)

/// Damage that an item has. Only used for tools, armor, etc.
dispatch minecraft:data_component[damage] to int @ 0..

#[since="1.21.2"]
dispatch minecraft:data_component[damage_resistant] to struct DamageResistant {
	/// The damage types which the item is resistant to when in entity form.
	/// Additionally, this also affects whether the equipped item will be damaged when the wearer is hurt by a specified damage type.
	types: #[id(registry="damage_type",tags="required")] string,
}

#[since="1.21.2"]
dispatch minecraft:data_component[death_protection] to struct DeathProtection {
	/// Effects applied when the item protects the holder.
	death_effects?: [ConsumeEffect]
}

dispatch minecraft:data_component[debug_stick_state] to struct DebugStickState {
	[#[id="block"] string]: string, // TODO
}

dispatch minecraft:data_component[dyed_color] to (
	#[until="1.21.5"] (
		#[canonical] DyedColor |
		#[color="composite_rgb"] int |
	) |
	#[since="1.21.5"] RGB |
)

struct DyedColor {
	/// Color of the armor.
	/// Calculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.
	rgb: #[color="composite_rgb"] int,
	show_in_tooltip?: boolean,
}

/// Makes an item enchantable in an enchanting table
#[since="1.21.2"]
dispatch minecraft:data_component[enchantable] to struct Enchantable {
	value: int @ 1..
}

/// If set, changes enchantment glint behavior. When true, this item will display a glint, even without enchantments. When false, this item will not display a glint, even with enchantments.
dispatch minecraft:data_component[enchantment_glint_override] to boolean

/// List of enchantments that are on the item.
///
/// An enchantment level of zero doesn't cause the enchantment section to be displayed in the tooltip, but the glint will still be shown, and the following rules apply:
/// - Boolean enchantments are treated as level 1 (active).
/// - Leveled enchantments are ignored.
dispatch minecraft:data_component[enchantments,stored_enchantments] to (
	#[until="1.21.5"] #[canonical] Enchantments |
	EnchantmentLevels |
)

struct Enchantments {
	levels: EnchantmentLevels,
	show_in_tooltip?: boolean,
}

struct EnchantmentLevels {
	[#[id="enchantment"] string]: int @ 0..255,
}

dispatch minecraft:data_component[entity_data] to (
	#[canonical] AnyEntity |
	#[nbt=AnyEntity] string |
)

#[since="1.21.2"]
dispatch minecraft:data_component[equippable] to struct Equippable {
	slot: EquipmentSlot,
	/// Sound event to play when the item is equipped.
	/// If not specified, the default armor equip sound will be played.
	equip_sound?: SoundEventRef,
	/// The equipment model to use when equipped.
	/// Falls back to rendering as the item itself when in the head slot (or no rendering if not applicable).
	#[until="1.21.4"]
	model?: #[id="equipment"] string,
	#[since="1.21.4"]
	asset_id?: #[id="equipment"] string,
	/// The overlay texture that should render in first person when equipped.
	camera_overlay?: #[id="texture"] string,
	/// Limits which entities can equip this item.
	allowed_entities?: (#[id(registry="entity_type",tags="allowed")] string | [#[id="entity_type"] string]),
	/// Whether the item can be equipped by using a dispenser. Defaults to `true`.
	dispensable?: boolean,
	/// Whether the item can be equipped by right-clicking. Defaults to `true`.
	swappable?: boolean,
	/// Whether the item will be damaged when the wearer is damaged. Defaults to `true`.
	damage_on_hurt?: boolean,
	/// Whether players can equip this item onto a target mob by right-clicking it (as long as this item can be equipped on the target at all).
	/// The item will not be equipped if the target already has an item in the relevant slot.
	/// Defaults to `false`.
	equip_on_interact?: boolean,
	/// Whether players can use shears to remove this item from a mob by right-clicking it (as long as other shearing conditions are satisfied).
	/// Defaults to `true`.
	#[since="1.21.6"]
	can_be_sheared?: boolean,
	/// Sound event to play when the item is sheared from a mob.
	/// If not specified, the default shearing sound (`item.shears.snip`) will be played.
	#[since="1.21.6"]
	shearing_sound?: SoundEventRef,
}

/// If set, this item will not burn in fire or lava.
#[until="1.21.2"]
dispatch minecraft:data_component[fire_resistant] to struct {}

dispatch minecraft:data_component[fireworks] to struct Fireworks {
	explosions?: [Explosion] @ 0..256,
	flight_duration?: byte
}

dispatch minecraft:data_component[firework_explosion] to struct Explosion {
	/// The shape of the explosion.
	shape: FireworkShape,
	/// Colors of the initial particles of the explosion, randomly selected from.
	/// Calculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.
	colors?: (
		#[until="1.21.5"] #[color="composite_rgb"] int[] |
		#[since="1.21.5"] [#[color="composite_rgb"] int] |
	),
	/// Colors of the fading particles of the explosion
	fade_colors?: (
		#[until="1.21.5"] #[color="composite_rgb"] int[] |
		#[since="1.21.5"] [#[color="composite_rgb"] int] |
	),
	/// Added to a firework star via Diamond.
	has_trail?: boolean,
	/// Added to a firework star via Glowstone Dust.
	has_twinkle?: boolean,
}

enum(string) FireworkShape {
	SmallBall = "small_ball",
	LargeBall = "large_ball",
	Star = "star",
	Creeper = "creeper",
	Burst = "burst",
}

/// If set, this item is considered as a food, and can be eaten.
dispatch minecraft:data_component[food] to Food

struct Food {
	/// Food points/haunches restored when eaten (capped to 20.0).
	nutrition: int @ 0..,
	/// Exact value added to the player's saturation level, capped at whatever the [new] food points value is.
	saturation: float,
	/// Whether the item can be eaten when the player's food points/haunches are full. Defaults to `false`
	can_always_eat?: boolean,
	/// Seconds it takes to eat the item. Defaults to `1.6`
	#[until="1.21.2"]
	eat_seconds?: float @ 0..,
	/// Applied when eaten.
	#[until="1.21.2"]
	effects?: [FoodEffect],
	/// Works similarly to a milk bucket.
	#[since="1.21"]
	#[until="1.21.2"]
	using_converts_to?: SingleItem,
}

struct FoodEffect {
	effect: MobEffectInstance,
	/// Chance for the effect to be applied. Defaults to 1.
	probability?: float @ 0..1,
}

dispatch minecraft:data_component[glider] to struct {}

/// If set, several specific tooltip entries without an applicable `show_in_tooltip` option available are hidden.
///
/// Included entries:
/// - Banner pattern layers
/// - Banner Pattern description
/// - Decorated Pot sherds
/// - Shulker Box items
/// - Spawner entity type and interaction description
/// - Bundle occupancy and items
/// - Charged Crossbow projectiles
/// - Painting variant
/// - Disc Fragment description
/// - Tropical Fish Bucket entity variant
/// - Filled Map lock and scale level
/// - Firework Rocket duration
/// - Firework explosions
/// - Goat Horn instrument
/// - Potion effect, amplifier & duration
/// - Music Disc description
/// - Smithing Template description
/// - Written Book author & generation
#[until="1.21.5"]
dispatch minecraft:data_component[hide_additional_tooltip] to struct {}

/// If set, it will completely hide this item's tooltip, including its name.
#[until="1.21.5"]
dispatch minecraft:data_component[hide_tooltip] to struct {}

/// The instrument of a goat horn.
dispatch minecraft:data_component[instrument] to (
	#[id="instrument"] string |
	Instrument |
)

/// If set, this projectile item can't be picked up by a player when fired, except in creative mode. Can only be used within charged_projectiles components.
dispatch minecraft:data_component[intangible_projectile] to struct {}

dispatch minecraft:data_component[item_model] to (
	#[until="1.21.4"] #[id(registry="model",path="item/")] string |
	#[since="1.21.4"] #[id(registry="item_definition")] string |
)

/// Replaces default item name with contained chat component.
///
/// Differences from `custom_name`:
/// - Can't be changed or removed in anvil.
/// - Not styled with italics when displayed to player.
/// - Does not show labels where applicable (for example: banner markers, names in item frames).
dispatch minecraft:data_component[item_name] to (
	#[until="1.21.5"] #[text_component] string |
	#[since="1.21.5"] Text |
)

/// If set, this item can be played in a jukebox like a music disc.
#[since="1.21"]
dispatch minecraft:data_component[jukebox_playable] to (
	#[until="1.21.5"] struct JukeboxPlayable {
		song: #[id="jukebox_song"] string,
		show_in_tooltip?: boolean,
	} |
	#[since="1.21.5"] #[id="jukebox_song"] string |
)

dispatch minecraft:data_component[lodestone_tracker] to struct LodestoneTracker {
	/// Location of the lodestone. Optional. If not set, the compass will spin randomly.
	target?: GlobalPos,
	/// When `true`, the component is removed when the lodestone is broken. When `false`, the component is kept. Defaults to true.
	tracked?: boolean,
}

/// A list of text components, each element being a lore line.
dispatch minecraft:data_component[lore] to [(
	#[until="1.21.5"] #[text_component] string |
	#[since="1.21.5"] Text |
)]

/// Calculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.
dispatch minecraft:data_component[map_color] to #[color="composite_rgb"] int

/// Key-value pairs of the icons to display, where the key is an arbitrary unique string identifying the decoration.
dispatch minecraft:data_component[map_decorations] to struct MapDecorations {
	[string]: MapDecoration
}

struct MapDecoration {
	/// Decoration type.
	type: #[id="map_decoration_type"] string,
	/// World x position.
	x: double,
	/// World z position.
	z: double,
	/// Rotation of the decoration, measured in degrees clockwise.
	rotation: float,
}

/// Map number, representing the shared state holding map contents and markers.
dispatch minecraft:data_component[map_id] to int

/// Maximum amount of damage that this item can take (ie. **Durability**). If not set, this item cannot take damage. Cannot be combined with the `max_stack_size` component.
dispatch minecraft:data_component[max_damage] to int @ 1..

dispatch minecraft:data_component[max_stack_size] to int @ 1..99

/// Sound to be played by a note block if this player head is placed above it.
dispatch minecraft:data_component[note_block_sound] to (#[id="weighed_sound_event"] string)

/// Bad omen amplifier level +1 (value of `0` corresponds to `Bad Omen I`).
dispatch minecraft:data_component[ominous_bottle_amplifier] to int @ 0..4

dispatch minecraft:data_component[potion_contents] to (
	#[canonical] PotionContents |
	#[id="potion"] string |
)

struct PotionContents {
	potion?: #[id="potion"] string,
	/// Calculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.
	custom_color?: #[color="composite_rgb"] int,
	/// If present, is used to generate the item name using the translation key `item.minecraft.<potion_type>.effect.<custom_name>`.
	custom_name?: string,
	custom_effects?: [MobEffectInstance],
}

/// When present, for items that have the `potion_contents` component, the duration of the applied effects will be scaled by this factor. Defaults to `1`.
#[since="1.21.5"]
dispatch minecraft:data_component[potion_duration_scale] to float @ 0..

dispatch minecraft:data_component[profile] to (
	#[canonical] Profile |
	string |
)

struct Profile {
	/// Username of a player profile.
	name?: string,
	/// UUID of the owner. Used to update the other tags when the chunk loads or the holder logs in, in case the owner's name has changed.
	id?: int[] @ 4,
	/// Resolved textures hosted on the minecraft CDN.
	properties?: (
		#[canonical] [ProfileProperty] |
		ProfilePropertyMap |
	)
}

struct ProfileProperty {
	// TODO: Provide better doc for this
	/// Usually `textures`.
	name: string,
	// TODO: Consider providing specific tooling for this.
	/// Base64 encoded JSON value of the texture index.
	value: string,
	/// Verifies the hash of the resulting texture.
	signature?: string,
}

struct ProfilePropertyMap {
	// TODO: Consider providing specific tooling for this.
	/// The key is usually `textures`.
	/// Base64 encoded JSON value of the texture index.
	[string]: [string]
}

/// When present, this item can be placed in the pattern slot of a loom.
dispatch minecraft:data_component[provides_banner_patterns] to #[id(registry="banner_pattern",tags="required")] string

/// When present, this item will provide the specified trim material when used in a trimming recipe.
dispatch minecraft:data_component[provides_trim_material] to #[id="trim_material"] string

/// Default color of this item's name.
dispatch minecraft:data_component[rarity] to Rarity

enum(string) Rarity {
	/// White name, or aqua when enchanted.
	Common = "common",
	/// Yellow name, or aqua when enchanted.
	Uncommon = "uncommon",
	/// Aqua name, or light purple when enchanted.
	Rare = "rare",
	/// Light purple name.
	Epic = "epic",
}

/// The recipes of a knowledge book.
dispatch minecraft:data_component[recipes] to [#[id="recipe"] string]

/// Number of experience levels to add to the base level cost when repairing, combining, or renaming this item with an anvil.
dispatch minecraft:data_component[repair_cost] to int @ 0..

/// Makes an item enchantable in an enchanting table
#[since="1.21.2"]
dispatch minecraft:data_component[repairable] to struct Repairable{
	items: (#[id(registry="item",tags="allowed")] string | [#[id="item"] string]),
}

dispatch minecraft:data_component[suspicious_stew_effects] to [SuspiciousStewEffect]

struct SuspiciousStewEffect {
	id: #[id="mob_effect"] string,
	/// Duration of the effect in ticks. Defaults to `160`; 8 seconds.
	duration?: int @ 1..,
}

dispatch minecraft:data_component[tool] to struct Tool {
	/// Blocks that this tool has a special behavior with.
	rules: [ToolRule],
	/// Used if no rules override it. Defaults to 1.0.
	default_mining_speed?: float,
	/// Amount of durability to remove each time a block is broken with this tool. Must be a non-negative integer.
	damage_per_block?: int,
	/// If `false`, players cannot break blocks while holding this tool in creative mode. Defaults to `true`.
	#[since="1.21.5"]
	can_destroy_blocks_in_creative?: boolean,
}

struct ToolRule {
	blocks: (#[id(registry="block",tags="allowed")] string | [#[id="block"] string]),
	/// Overrides the default mining speed.
	speed?: float,
	/// Overrides whether or not this tool is considered correct to mine at its most efficient speed, and to drop items if the block's loot table requires it.
	correct_for_drops?: boolean,
}

#[since="1.21.5"]
dispatch minecraft:data_component[tooltip_display] to struct TooltipDisplay {
	/// If `true`, the item will have no tooltip when hovered. Defaults to `false`.
	hide_tooltip?: boolean,
	/// List of components that should be hidden in the item tooltip.
	hidden_components?: [#[id="data_component_type"] string],
}

dispatch minecraft:data_component[tooltip_style] to #[id] string

/// Trim to apply to the item & armor when worn.
dispatch minecraft:data_component[trim] to struct Trim {
	/// The trim material of this item..
	material: (
		#[id="trim_material"] string |
		TrimMaterial |
	),
	/// The trim pattern of this item.
	pattern: (
		#[id="trim_pattern"] string |
		TrimPattern |
	),
	#[until="1.21.5"]
	show_in_tooltip?: boolean,
}

dispatch minecraft:data_component[unbreakable] to struct Unbreakable {
	#[until="1.21.5"]
	show_in_tooltip?: boolean,
}

dispatch minecraft:data_component[use_cooldown] to struct UseCooldown {
	/// Time the cooldown will last.
	seconds: float @ 0<..,
	/// If present, this item will be part of a cooldown group and no longer share cooldowns with its base item type.
	/// Instead, cooldowns applied to this item will only be shared with any other items that are part of the same cooldown group.
	cooldown_group?: #[id(registry="cooldown_group", definition=true)] string,
}

dispatch minecraft:data_component[use_remainder] to ItemStack

/// When present, the 'Item Used' statistic will be incremented for each attack with the item.
#[since="1.21.5"]
dispatch minecraft:data_component[weapon] to struct Weapon {
	/// The amount to damage to the weapon item for each attack performed. Defaults to `1`.
	item_damage_per_attack?: int @ 0..,
	/// If non-zero, will disable a blocking shield on successful attack for the specified amount of seconds.
	disable_blocking_for_seconds?: float @ 0..,
}

dispatch minecraft:data_component[writable_book_content] to struct WritableBookContent {
	pages: [Filterable<string>],
}

dispatch minecraft:data_component[written_book_content] to struct WrittenBookContent {
	pages?: [Filterable<(
		#[until="1.21.5"] #[text_component] string |
		#[since="1.21.5"] Text |
	)>],
	title: (Filterable<string @ ..32>),
	author: string,
	/// Number of times this written book has been copied. Defaults to 0. If the value is greater than 1, the book cannot be copied.
	generation?: BookGeneration,
	/// Whether the dynamic content on the pages has been resolved.
	resolved?: boolean,
}

enum(int) BookGeneration {
	Original = 0,
	Copy = 1,
	CopyOfCopy = 2,
	Tattered = 3,
}
