use ::java::assets::model::ItemDisplayContext
use ::java::util::block_state::BlockState
use ::java::util::text::Text
use ::java::world::item::ItemStack

struct DisplayBase {
	...super::EntityBase,
	/// Transformation applied to model (after normal entity orientation). Defaults to identity. Interpolated.
	/// For an easy GUI, check out [Misode's tool](https://misode.github.io/transformation/).
	///
	/// The value is stored in decomposed object form for interpolation & ease-of-use,
	/// Supports storing a [non-canonical matrix form](https://gist.github.com/MulverineX/f473dbfd7cc8dadb326074fef05ad76a) describing a row-major matrix, is automatically decomposed by the game with a performance cost.
	transformation?: Transformation,
	/// Size of shadow. Defaults to 0 (no shadow). Interpolated.
	shadow_radius?: float @ 0..,
	/// Strength of the shadow. Controls the opacity of the shadow as a function of distance to block below. Defaults to 1. Interpolated.
	shadow_strength?: float @ 0..1,
	/// Ticks after the next client tick to wait until starting the interpolation.
	/// Info:
	/// All interpolated properties are part of a single interpolation set.
	/// Any update to an interpolated property will cause all values of the interpolation set to be saved as "current".
	///  - Data command executions that do not change value of property (even if it's present in NBT) do not count as updates.
	///  - Updates are synchronized to clients at most once per tick, so multiple updates within command will still count as single update.
	/// Previous current values are saved as "previous".
	/// If interpolation is enabled, entity will transition between "previous" and "current" values over time.
	/// `interpolation_duration` must be set every time an interpolatable property is updated to cause interpolation.
	/// Negative values are allowed, will cause an instant jump to the subtracted duration value, then interpolation will continue as normal.
	start_interpolation?: int,
	/// Ticks the interpolation should take to complete.
	interpolation_duration?: int @ 0..,
	/// How long in game ticks the entity takes to interpolate from it's starting location to it's destination when teleported. Defaults to 0 (no interpolation).
	#[since="1.20.2"]
	teleport_duration?: int @ 0..59,
	/// Controls if model should pivot to face player when rendered. Defaults to `fixed`.
	billboard?: Billboard,
	/// When defined, overrides light values used for rendering. Omitted by default (which means rendering uses values from entity position).
	brightness?: Brightness,
	/// Maximum view range of this entity. Actual distance depends on client-side render distance and entity distance scaling. Default value 1.0 (roughly the same as fireball).
	view_range?: float @ 0..,
	/// Describe width of culling bounding box.
	/// Bounding box spans vertically y to y+height and horizontally width/2 in all directions from entity position.
	/// If field is set to 0, culling is disabled. Defaults to 0.
	width?: float @ 0..,
	/// Describe height of culling bounding box.
	/// Bounding box spans vertically y to y+height and horizontally width/2 in all directions from entity position.
	/// If field is set to 0, culling is disabled. Defaults to 0.
	height?: float @ 0..,
	/// Override glow border color. If field is set to 0, uses team color. Defaults to 0.
	/// Calculated as `RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.
	glow_color_override?: (0 | #[color="composite_rgb"] int),
}

type Transformation = (
	#[canonical] struct DecomposedTransformation {
		/// Translation in [x, y, z].
		translation: [float] @ 3,
		/// Using this rotation is enough for most transformations.
		left_rotation: Rotation,
		/// For more complex transformations. Applied **before** scaling.
		right_rotation: Rotation,
		/// Scale in [x, y, z].
		scale: [float] @ 3,
	} |
	([float] @ 16) | 
)

type Rotation = (
	// Quaternion form (used for saving) in [x, y, z, w].
	[float] @ 4 |
	// Axis-angle form.
	AxisAngle |
)

enum(string) Billboard {
	/// No rotation.
	Fixed = "fixed",
	/// Pivot around vertical axis.
	Vertical = "vertical",
	/// Pivot around horizontal axis.
	Horizontal = "horizontal",
	/// Pivot around both axes.
	Center = "center",
}

struct Brightness {
	/// Value of skylight.
	sky: int @ 0..15,
	/// Value of block light.
	block: int @ 0..15,
}

struct AxisAngle {
	/// Local position of the axis in [x, y, z].
	axis: [float] @ 3,
	/// Angle to rotate around axis in radians.
	angle: float,
}

dispatch minecraft:entity[block_display] to struct BlockDisplay {
	...DisplayBase,
	/// Block state to display.
	/// Does display most block entities (eg. Chests, Beds, Furnaces, etc).
	/// Does not display specially rendered block entities (eg. The bell in a bell block, an end gateway, the book on an enchantment table, a banner, a sign, etc).
	block_state?: BlockState,
}

dispatch minecraft:entity[item_display] to struct ItemDisplay {
	...DisplayBase,
	/// Item stack to display.
	item?: ItemStack,
	/// Describes item model transform applied to item (as defined in `display` section in model JSON). Defaults to `fixed`.
	item_display?: ItemDisplayContext,
}

dispatch minecraft:entity[text_display] to struct TextDisplay {
	...DisplayBase,
	/// Text to display. Components are resolved with the executor set to the display entity and the position set to `0 0 0`.
	text?: (
		#[until="1.21.5"] #[text_component] string |
		#[since="1.21.5"] Text |
	),
	/// Line width in pixels used to split lines (note: new line can be also added with \n characters). Defaults to 200.
	line_width?: int @ 0..,
	/// Opacity (alpha component) of rendered text. Defaults to 255. Interpolated.
	text_opacity?: int @ 0..255,
	/// Color of background. Includes alpha channel. Defaults to 0x40000000. Interpolated.
	/// Calculated as `ALPHA << 24 | RED << 16 | GREEN << 8 | BLUE`. Each of these fields must be between 0 and 255, inclusive.
	background?: #[color="composite_argb"] int,
	/// If true, overrides `background` & rendering uses default text background color (same as in chat). Defaults to false.
	default_background?: boolean,
	/// Should text be displayed with shadow. Defaults to false.
	shadow?: boolean,
	/// Should text be visible through blocks. Defaults to false.
	see_through?: boolean,
	#[until="1.21.5"]
	...struct {
		/// How text should be aligned. Defaults to `center`.
		/// Will log an error when not specified, see [MC-261036](https://bugs.mojang.com/browse/MC-261036).
		alignment: TextAlignment,
	},
	#[since="1.21.5"]
	...struct {
		/// How text should be aligned. Defaults to `center`.
		alignment?: TextAlignment,
	},
}

enum(string) TextAlignment {
	Center = "center",
	Left = "left",
	Right = "right",
}
